// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
	type Options,
	createGroupRequestGroupPost,
	createOrReplaceGroupVkGroupIdPut,
	discordWebhookDiscordPost,
	getAllGroupsGroupGet,
	githubWebhookGithubPost,
	telegramWebhookTelegramPost,
	updateGroupInfoGroupGroupIdPatch,
	validateGroupRequestGroupValidationGet,
	vkWebhookVkPost,
} from '../sdk.gen';
import type {
	CreateGroupRequestGroupPostData,
	CreateGroupRequestGroupPostResponse,
	CreateOrReplaceGroupVkGroupIdPutData,
	CreateOrReplaceGroupVkGroupIdPutError,
	CreateOrReplaceGroupVkGroupIdPutResponse,
	DiscordWebhookDiscordPostData,
	GetAllGroupsGroupGetData,
	GithubWebhookGithubPostData,
	TelegramWebhookTelegramPostData,
	UpdateGroupInfoGroupGroupIdPatchData,
	UpdateGroupInfoGroupGroupIdPatchError,
	ValidateGroupRequestGroupValidationGetData,
	VkWebhookVkPostData,
	VkWebhookVkPostResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const getAllGroupsGroupGetQueryKey = (options?: Options<GetAllGroupsGroupGetData>) =>
	createQueryKey('getAllGroupsGroupGet', options);

export const getAllGroupsGroupGetOptions = (options?: Options<GetAllGroupsGroupGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAllGroupsGroupGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getAllGroupsGroupGetQueryKey(options),
	});
};

export const createGroupRequestGroupPostQueryKey = (
	options?: Options<CreateGroupRequestGroupPostData>
) => createQueryKey('createGroupRequestGroupPost', options);

export const createGroupRequestGroupPostOptions = (
	options?: Options<CreateGroupRequestGroupPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createGroupRequestGroupPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createGroupRequestGroupPostQueryKey(options),
	});
};

export const createGroupRequestGroupPostMutation = (
	options?: Partial<Options<CreateGroupRequestGroupPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateGroupRequestGroupPostResponse,
		DefaultError,
		Options<CreateGroupRequestGroupPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createGroupRequestGroupPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const validateGroupRequestGroupValidationGetQueryKey = (
	options: Options<ValidateGroupRequestGroupValidationGetData>
) => createQueryKey('validateGroupRequestGroupValidationGet', options);

export const validateGroupRequestGroupValidationGetOptions = (
	options: Options<ValidateGroupRequestGroupValidationGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await validateGroupRequestGroupValidationGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: validateGroupRequestGroupValidationGetQueryKey(options),
	});
};

export const updateGroupInfoGroupGroupIdPatchMutation = (
	options?: Partial<Options<UpdateGroupInfoGroupGroupIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		UpdateGroupInfoGroupGroupIdPatchError,
		Options<UpdateGroupInfoGroupGroupIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateGroupInfoGroupGroupIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const githubWebhookGithubPostQueryKey = (options?: Options<GithubWebhookGithubPostData>) =>
	createQueryKey('githubWebhookGithubPost', options);

export const githubWebhookGithubPostOptions = (options?: Options<GithubWebhookGithubPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await githubWebhookGithubPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: githubWebhookGithubPostQueryKey(options),
	});
};

export const githubWebhookGithubPostMutation = (
	options?: Partial<Options<GithubWebhookGithubPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<GithubWebhookGithubPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await githubWebhookGithubPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const telegramWebhookTelegramPostQueryKey = (
	options?: Options<TelegramWebhookTelegramPostData>
) => createQueryKey('telegramWebhookTelegramPost', options);

export const telegramWebhookTelegramPostOptions = (
	options?: Options<TelegramWebhookTelegramPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await telegramWebhookTelegramPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: telegramWebhookTelegramPostQueryKey(options),
	});
};

export const telegramWebhookTelegramPostMutation = (
	options?: Partial<Options<TelegramWebhookTelegramPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<TelegramWebhookTelegramPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await telegramWebhookTelegramPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const vkWebhookVkPostQueryKey = (options?: Options<VkWebhookVkPostData>) =>
	createQueryKey('vkWebhookVkPost', options);

export const vkWebhookVkPostOptions = (options?: Options<VkWebhookVkPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await vkWebhookVkPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: vkWebhookVkPostQueryKey(options),
	});
};

export const vkWebhookVkPostMutation = (options?: Partial<Options<VkWebhookVkPostData>>) => {
	const mutationOptions: UseMutationOptions<
		VkWebhookVkPostResponse,
		DefaultError,
		Options<VkWebhookVkPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await vkWebhookVkPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const createOrReplaceGroupVkGroupIdPutMutation = (
	options?: Partial<Options<CreateOrReplaceGroupVkGroupIdPutData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateOrReplaceGroupVkGroupIdPutResponse,
		CreateOrReplaceGroupVkGroupIdPutError,
		Options<CreateOrReplaceGroupVkGroupIdPutData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createOrReplaceGroupVkGroupIdPut({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const discordWebhookDiscordPostQueryKey = (
	options?: Options<DiscordWebhookDiscordPostData>
) => createQueryKey('discordWebhookDiscordPost', options);

export const discordWebhookDiscordPostOptions = (
	options?: Options<DiscordWebhookDiscordPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await discordWebhookDiscordPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: discordWebhookDiscordPostQueryKey(options),
	});
};

export const discordWebhookDiscordPostMutation = (
	options?: Partial<Options<DiscordWebhookDiscordPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<DiscordWebhookDiscordPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await discordWebhookDiscordPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};
