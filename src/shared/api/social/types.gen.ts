// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
	baseUrl: `${string}://${string}/social` | (string & {});
};

export type CreateGroupRequestGroupPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/group";
};

export type CreateGroupRequestGroupPostResponse =
	CreateGroupRequestGroupPostResponses[keyof CreateGroupRequestGroupPostResponses];

export type CreateGroupRequestGroupPostResponses = {
	/**
	 * Successful Response
	 */
	200: GroupRequestGet;
};

export type CreateOrReplaceGroupVkGroupIdPutData = {
	body: VkGroupCreate;
	path: {
		group_id: number;
	};
	query?: never;
	url: "/vk/{group_id}";
};

export type CreateOrReplaceGroupVkGroupIdPutError =
	CreateOrReplaceGroupVkGroupIdPutErrors[keyof CreateOrReplaceGroupVkGroupIdPutErrors];

export type CreateOrReplaceGroupVkGroupIdPutErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateOrReplaceGroupVkGroupIdPutResponse =
	CreateOrReplaceGroupVkGroupIdPutResponses[keyof CreateOrReplaceGroupVkGroupIdPutResponses];

export type CreateOrReplaceGroupVkGroupIdPutResponses = {
	/**
	 * Successful Response
	 */
	200: VkGroupCreateResponse;
};

export type DiscordWebhookDiscordPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/discord";
};

export type DiscordWebhookDiscordPostResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type GetAllGroupsGroupGetData = {
	body?: never;
	path?: never;
	query?: {
		my?: boolean;
	};
	url: "/group";
};

export type GetAllGroupsGroupGetError = GetAllGroupsGroupGetErrors[keyof GetAllGroupsGroupGetErrors];

export type GetAllGroupsGroupGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetAllGroupsGroupGetResponse = GetAllGroupsGroupGetResponses[keyof GetAllGroupsGroupGetResponses];

export type GetAllGroupsGroupGetResponses = {
	/**
	 * Successful Response
	 */
	200: GroupGetMany;
};

export type GithubWebhookGithubPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/github";
};

export type GithubWebhookGithubPostResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type GroupGet = {
	description?: null | string;
	id: number;
	invite_link?: null | string;
	name?: null | string;
	owner_id?: null | number;
	type?: null | string;
};

export type GroupGetMany = {
	items: Array<GroupGet>;
};

export type GroupPatch = {
	description?: null | string;
	invite_link?: null | string;
	name?: null | string;
	update_from_source?: boolean | null;
};

export type GroupRequestGet = {
	secret_key: string;
	valid_ts: string;
};

export type HttpValidationError = {
	detail?: Array<ValidationError>;
};

export type TelegramWebhookTelegramPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/telegram";
};

export type TelegramWebhookTelegramPostResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type UpdateGroupInfoGroupGroupIdPatchData = {
	body: GroupPatch;
	path: {
		group_id: number;
	};
	query?: never;
	url: "/group/{group_id}";
};

export type UpdateGroupInfoGroupGroupIdPatchError =
	UpdateGroupInfoGroupGroupIdPatchErrors[keyof UpdateGroupInfoGroupGroupIdPatchErrors];

export type UpdateGroupInfoGroupGroupIdPatchErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UpdateGroupInfoGroupGroupIdPatchResponses = {
	/**
	 * Successful Response
	 */
	200: unknown;
};

export type ValidateGroupRequestGroupValidationGetData = {
	body?: never;
	path?: never;
	query: {
		secret_key: string;
	};
	url: "/group/validation";
};

export type ValidateGroupRequestGroupValidationGetError =
	ValidateGroupRequestGroupValidationGetErrors[keyof ValidateGroupRequestGroupValidationGetErrors];

export type ValidateGroupRequestGroupValidationGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ValidateGroupRequestGroupValidationGetResponse =
	ValidateGroupRequestGroupValidationGetResponses[keyof ValidateGroupRequestGroupValidationGetResponses];

export type ValidateGroupRequestGroupValidationGetResponses = {
	/**
	 * Successful Response
	 */
	200: GroupGet | GroupRequestGet;
};

export type ValidationError = {
	loc: Array<number | string>;
	msg: string;
	type: string;
};

export type VkGroupCreate = {
	change_secret_key?: boolean;
	confirmation_token: string;
};

export type VkGroupCreateResponse = {
	group_id: number;
	secret_key: string;
};

export type VkWebhookVkPostData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/vk";
};

export type VkWebhookVkPostResponse = VkWebhookVkPostResponses[keyof VkWebhookVkPostResponses];

export type VkWebhookVkPostResponses = {
	/**
	 * Successful Response
	 */
	200: string;
};
