// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
	CreateGroupRequestGroupPostData,
	CreateGroupRequestGroupPostResponse,
	CreateOrReplaceGroupVkGroupIdPutData,
	CreateOrReplaceGroupVkGroupIdPutError,
	CreateOrReplaceGroupVkGroupIdPutResponse,
	DiscordWebhookDiscordPostData,
	GetAllGroupsGroupGetData,
	GetAllGroupsGroupGetError,
	GetAllGroupsGroupGetResponse,
	GithubWebhookGithubPostData,
	TelegramWebhookTelegramPostData,
	UpdateGroupInfoGroupGroupIdPatchData,
	UpdateGroupInfoGroupGroupIdPatchError,
	ValidateGroupRequestGroupValidationGetData,
	ValidateGroupRequestGroupValidationGetError,
	ValidateGroupRequestGroupValidationGetResponse,
	VkWebhookVkPostData,
	VkWebhookVkPostResponse,
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Get All Groups
 * Получение списка групп
 *
 * Трубуются права:
 * - Для получения списка своих групп права не требуются (`my=True`)
 * - `social.group.read` для чтения списка всех групп, подключенных к приложению
 */
export const getAllGroupsGroupGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllGroupsGroupGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetAllGroupsGroupGetResponse,
		GetAllGroupsGroupGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group',
		...options,
	});
};

/**
 * Create Group Request
 */
export const createGroupRequestGroupPost = <ThrowOnError extends boolean = false>(
	options?: Options<CreateGroupRequestGroupPostData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateGroupRequestGroupPostResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group',
		...options,
	});
};

/**
 * Validate Group Request
 * Получение состояния валидации группы по коду валидации
 *
 * Трубуются права: `social.group.create`
 */
export const validateGroupRequestGroupValidationGet = <ThrowOnError extends boolean = false>(
	options: Options<ValidateGroupRequestGroupValidationGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		ValidateGroupRequestGroupValidationGetResponse,
		ValidateGroupRequestGroupValidationGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/validation',
		...options,
	});
};

/**
 * Update Group Info
 */
export const updateGroupInfoGroupGroupIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<UpdateGroupInfoGroupGroupIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		unknown,
		UpdateGroupInfoGroupGroupIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/{group_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Github Webhook
 * Принимает любой POST запрос от github
 */
export const githubWebhookGithubPost = <ThrowOnError extends boolean = false>(
	options?: Options<GithubWebhookGithubPostData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
		url: '/github',
		...options,
	});
};

/**
 * Telegram Webhook
 * Принимает любой POST запрос от Telegram
 */
export const telegramWebhookTelegramPost = <ThrowOnError extends boolean = false>(
	options?: Options<TelegramWebhookTelegramPostData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
		url: '/telegram',
		...options,
	});
};

/**
 * Vk Webhook
 * Принимает любой POST запрос от VK
 */
export const vkWebhookVkPost = <ThrowOnError extends boolean = false>(
	options?: Options<VkWebhookVkPostData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<VkWebhookVkPostResponse, unknown, ThrowOnError>({
		url: '/vk',
		...options,
	});
};

/**
 * Create Or Replace Group
 */
export const createOrReplaceGroupVkGroupIdPut = <ThrowOnError extends boolean = false>(
	options: Options<CreateOrReplaceGroupVkGroupIdPutData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).put<
		CreateOrReplaceGroupVkGroupIdPutResponse,
		CreateOrReplaceGroupVkGroupIdPutError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/vk/{group_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Discord Webhook
 * Принимает любой POST запрос от discord
 */
export const discordWebhookDiscordPost = <ThrowOnError extends boolean = false>(
	options?: Options<DiscordWebhookDiscordPostData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
		url: '/discord',
		...options,
	});
};
