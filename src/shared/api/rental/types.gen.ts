// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}/rental` | (string & {});
};

/**
 * EventGet
 */
export type EventGet = {
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id?: number | null;
    /**
     * Admin Id
     */
    admin_id?: number | null;
    /**
     * Session Id
     */
    session_id?: number | null;
    /**
     * Action Type
     */
    action_type: string;
    /**
     * Details
     */
    details: {
        [key: string]: unknown;
    };
    /**
     * Create Ts
     */
    create_ts: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * ItemGet
 */
export type ItemGet = {
    /**
     * Id
     */
    id: number;
    /**
     * Type Id
     */
    type_id: number;
    /**
     * Is Available
     */
    is_available?: boolean;
};

/**
 * ItemPost
 */
export type ItemPost = {
    /**
     * Type Id
     */
    type_id: number;
    /**
     * Is Available
     */
    is_available?: boolean;
};

/**
 * ItemTypeAvailable
 */
export type ItemTypeAvailable = {
    /**
     * Item Ids
     */
    item_ids: Array<number>;
    /**
     * Items Changed
     */
    items_changed: number;
    /**
     * Total Available
     */
    total_available: number;
};

/**
 * ItemTypeGet
 */
export type ItemTypeGet = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Image Url
     */
    image_url?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Available Items Count
     */
    available_items_count?: number | null;
    /**
     * Availability
     */
    availability?: boolean;
};

/**
 * ItemTypePost
 */
export type ItemTypePost = {
    /**
     * Name
     */
    name: string;
    /**
     * Image Url
     */
    image_url?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * RentStatus
 */
export type RentStatus = 'reserved' | 'active' | 'canceled' | 'overdue' | 'returned' | 'dismissed' | 'expired';

/**
 * RentalSessionGet
 */
export type RentalSessionGet = {
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id: number;
    /**
     * Item Id
     */
    item_id: number;
    /**
     * Item Type Id
     */
    item_type_id: number;
    /**
     * Admin Open Id
     */
    admin_open_id: number | null;
    /**
     * Admin Close Id
     */
    admin_close_id: number | null;
    /**
     * Reservation Ts
     */
    reservation_ts: string;
    /**
     * Start Ts
     */
    start_ts: string | null;
    /**
     * End Ts
     */
    end_ts: string | null;
    /**
     * Actual Return Ts
     */
    actual_return_ts: string | null;
    status: RentStatus;
    /**
     * Strike Id
     */
    strike_id?: number | null;
    /**
     * User Phone
     */
    user_phone?: string | null;
    /**
     * User Fullname
     */
    user_fullname?: string | null;
    /**
     * Deadline Ts
     */
    deadline_ts?: string | null;
};

/**
 * RentalSessionPatch
 */
export type RentalSessionPatch = {
    status?: RentStatus | null;
    /**
     * End Ts
     */
    end_ts?: string | null;
    /**
     * Actual Return Ts
     */
    actual_return_ts?: string | null;
    /**
     * Admin Close Id
     */
    admin_close_id?: number | null;
};

/**
 * StatusResponseModel
 */
export type StatusResponseModel = {
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
    /**
     * Ru
     */
    ru: string;
};

/**
 * StrikeGet
 */
export type StrikeGet = {
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id: number;
    /**
     * Admin Id
     */
    admin_id: number;
    /**
     * Reason
     */
    reason: string;
    /**
     * Session Id
     */
    session_id?: number | null;
    /**
     * Create Ts
     */
    create_ts: string;
};

/**
 * StrikePost
 */
export type StrikePost = {
    /**
     * User Id
     */
    user_id: number;
    /**
     * Admin Id
     */
    admin_id: number;
    /**
     * Reason
     */
    reason: string;
    /**
     * Session Id
     */
    session_id?: number | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GetEventsEventGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Id
         */
        user_id?: number | null;
        /**
         * Admin Id
         */
        admin_id?: number | null;
        /**
         * Session Id
         */
        session_id?: number | null;
    };
    url: '/event';
};

export type GetEventsEventGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetEventsEventGetError = GetEventsEventGetErrors[keyof GetEventsEventGetErrors];

export type GetEventsEventGetResponses = {
    /**
     * Response Get Events Event Get
     *
     * Successful Response
     */
    200: Array<EventGet>;
};

export type GetEventsEventGetResponse = GetEventsEventGetResponses[keyof GetEventsEventGetResponses];

export type GetItemsItemGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Type Id
         */
        type_id?: number;
    };
    url: '/item';
};

export type GetItemsItemGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemsItemGetError = GetItemsItemGetErrors[keyof GetItemsItemGetErrors];

export type GetItemsItemGetResponses = {
    /**
     * Response Get Items Item Get
     *
     * Successful Response
     */
    200: Array<ItemGet>;
};

export type GetItemsItemGetResponse = GetItemsItemGetResponses[keyof GetItemsItemGetResponses];

export type CreateItemItemPostData = {
    body: ItemPost;
    path?: never;
    query?: never;
    url: '/item';
};

export type CreateItemItemPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateItemItemPostError = CreateItemItemPostErrors[keyof CreateItemItemPostErrors];

export type CreateItemItemPostResponses = {
    /**
     * Successful Response
     */
    200: ItemGet;
};

export type CreateItemItemPostResponse = CreateItemItemPostResponses[keyof CreateItemItemPostResponses];

export type DeleteItemItemIdDeleteData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/item/{id}';
};

export type DeleteItemItemIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteItemItemIdDeleteError = DeleteItemItemIdDeleteErrors[keyof DeleteItemItemIdDeleteErrors];

export type DeleteItemItemIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type DeleteItemItemIdDeleteResponse = DeleteItemItemIdDeleteResponses[keyof DeleteItemItemIdDeleteResponses];

export type GetItemItemIdGetData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/item/{id}';
};

export type GetItemItemIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemItemIdGetError = GetItemItemIdGetErrors[keyof GetItemItemIdGetErrors];

export type GetItemItemIdGetResponses = {
    /**
     * Successful Response
     */
    200: ItemGet;
};

export type GetItemItemIdGetResponse = GetItemItemIdGetResponses[keyof GetItemItemIdGetResponses];

export type UpdateItemItemIdPatchData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: {
        /**
         * Is Available
         *
         * Flag indicating if the item is available
         */
        is_available?: boolean;
    };
    url: '/item/{id}';
};

export type UpdateItemItemIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateItemItemIdPatchError = UpdateItemItemIdPatchErrors[keyof UpdateItemItemIdPatchErrors];

export type UpdateItemItemIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ItemGet;
};

export type UpdateItemItemIdPatchResponse = UpdateItemItemIdPatchResponses[keyof UpdateItemItemIdPatchResponses];

export type CreateRentalSessionRentalSessionsItemTypeIdPostData = {
    body?: never;
    path: {
        /**
         * Item Type Id
         */
        item_type_id: number;
    };
    query?: never;
    url: '/rental-sessions/{item_type_id}';
};

export type CreateRentalSessionRentalSessionsItemTypeIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRentalSessionRentalSessionsItemTypeIdPostError = CreateRentalSessionRentalSessionsItemTypeIdPostErrors[keyof CreateRentalSessionRentalSessionsItemTypeIdPostErrors];

export type CreateRentalSessionRentalSessionsItemTypeIdPostResponses = {
    /**
     * Successful Response
     */
    200: RentalSessionGet;
};

export type CreateRentalSessionRentalSessionsItemTypeIdPostResponse = CreateRentalSessionRentalSessionsItemTypeIdPostResponses[keyof CreateRentalSessionRentalSessionsItemTypeIdPostResponses];

export type StartRentalSessionRentalSessionsSessionIdStartPatchData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: unknown;
    };
    query?: {
        /**
         * Deadline Ts
         *
         * Deadline timestamp
         */
        deadline_ts?: string | null;
    };
    url: '/rental-sessions/{session_id}/start';
};

export type StartRentalSessionRentalSessionsSessionIdStartPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartRentalSessionRentalSessionsSessionIdStartPatchError = StartRentalSessionRentalSessionsSessionIdStartPatchErrors[keyof StartRentalSessionRentalSessionsSessionIdStartPatchErrors];

export type StartRentalSessionRentalSessionsSessionIdStartPatchResponses = {
    /**
     * Successful Response
     */
    200: RentalSessionGet;
};

export type StartRentalSessionRentalSessionsSessionIdStartPatchResponse = StartRentalSessionRentalSessionsSessionIdStartPatchResponses[keyof StartRentalSessionRentalSessionsSessionIdStartPatchResponses];

export type AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: {
        /**
         * With Strike
         *
         * A flag indicating whether to issue a strike.
         */
        with_strike?: boolean;
        /**
         * Strike Reason
         *
         * The reason for the strike.
         */
        strike_reason?: string;
    };
    url: '/rental-sessions/{session_id}/return';
};

export type AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchError = AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchErrors[keyof AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchErrors];

export type AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchResponses = {
    /**
     * Successful Response
     */
    200: RentalSessionGet;
};

export type AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchResponse = AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchResponses[keyof AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchResponses];

export type GetRentalSessionRentalSessionsSessionIdGetData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/rental-sessions/{session_id}';
};

export type GetRentalSessionRentalSessionsSessionIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRentalSessionRentalSessionsSessionIdGetError = GetRentalSessionRentalSessionsSessionIdGetErrors[keyof GetRentalSessionRentalSessionsSessionIdGetErrors];

export type GetRentalSessionRentalSessionsSessionIdGetResponses = {
    /**
     * Successful Response
     */
    200: RentalSessionGet;
};

export type GetRentalSessionRentalSessionsSessionIdGetResponse = GetRentalSessionRentalSessionsSessionIdGetResponses[keyof GetRentalSessionRentalSessionsSessionIdGetResponses];

export type UpdateRentalSessionRentalSessionsSessionIdPatchData = {
    body: RentalSessionPatch;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/rental-sessions/{session_id}';
};

export type UpdateRentalSessionRentalSessionsSessionIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateRentalSessionRentalSessionsSessionIdPatchError = UpdateRentalSessionRentalSessionsSessionIdPatchErrors[keyof UpdateRentalSessionRentalSessionsSessionIdPatchErrors];

export type UpdateRentalSessionRentalSessionsSessionIdPatchResponses = {
    /**
     * Successful Response
     */
    200: RentalSessionGet;
};

export type UpdateRentalSessionRentalSessionsSessionIdPatchResponse = UpdateRentalSessionRentalSessionsSessionIdPatchResponses[keyof UpdateRentalSessionRentalSessionsSessionIdPatchResponses];

export type GetRentalSessionsRentalSessionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Is Reserved
         *
         * флаг, показывать заявки
         */
        is_reserved?: boolean;
        /**
         * Is Canceled
         *
         * Флаг, показывать отмененные
         */
        is_canceled?: boolean;
        /**
         * Is Dismissed
         *
         * Флаг, показывать отклоненные
         */
        is_dismissed?: boolean;
        /**
         * Is Overdue
         *
         * Флаг, показывать просроченные
         */
        is_overdue?: boolean;
        /**
         * Is Returned
         *
         * Флаг, показывать вернутые
         */
        is_returned?: boolean;
        /**
         * Is Active
         *
         * Флаг, показывать активные
         */
        is_active?: boolean;
        /**
         * Is Expired
         *
         * Флаг, показывать просроченные
         */
        is_expired?: boolean;
        /**
         * Item Type Id
         *
         * ID типа предмета
         */
        item_type_id?: number;
        /**
         * User Id
         *
         * User_id для получения сессий
         */
        user_id?: number;
    };
    url: '/rental-sessions';
};

export type GetRentalSessionsRentalSessionsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRentalSessionsRentalSessionsGetError = GetRentalSessionsRentalSessionsGetErrors[keyof GetRentalSessionsRentalSessionsGetErrors];

export type GetRentalSessionsRentalSessionsGetResponses = {
    /**
     * Response Get Rental Sessions Rental Sessions Get
     *
     * Successful Response
     */
    200: Array<RentalSessionGet>;
};

export type GetRentalSessionsRentalSessionsGetResponse = GetRentalSessionsRentalSessionsGetResponses[keyof GetRentalSessionsRentalSessionsGetResponses];

export type GetMySessionsRentalSessionsUserMeGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Is Reserved
         *
         * флаг, показывать заявки
         */
        is_reserved?: boolean;
        /**
         * Is Canceled
         *
         * Флаг, показывать отмененные
         */
        is_canceled?: boolean;
        /**
         * Is Dismissed
         *
         * Флаг, показывать отклоненные
         */
        is_dismissed?: boolean;
        /**
         * Is Overdue
         *
         * Флаг, показывать просроченные
         */
        is_overdue?: boolean;
        /**
         * Is Returned
         *
         * Флаг, показывать вернутые
         */
        is_returned?: boolean;
        /**
         * Is Active
         *
         * Флаг, показывать активные
         */
        is_active?: boolean;
        /**
         * Is Expired
         *
         * Флаг, показывать просроченные
         */
        is_expired?: boolean;
        /**
         * Item Type Id
         *
         * ID типа предмета
         */
        item_type_id?: number;
    };
    url: '/rental-sessions/user/me';
};

export type GetMySessionsRentalSessionsUserMeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMySessionsRentalSessionsUserMeGetError = GetMySessionsRentalSessionsUserMeGetErrors[keyof GetMySessionsRentalSessionsUserMeGetErrors];

export type GetMySessionsRentalSessionsUserMeGetResponses = {
    /**
     * Response Get My Sessions Rental Sessions User Me Get
     *
     * Successful Response
     */
    200: Array<RentalSessionGet>;
};

export type GetMySessionsRentalSessionsUserMeGetResponse = GetMySessionsRentalSessionsUserMeGetResponses[keyof GetMySessionsRentalSessionsUserMeGetResponses];

export type CancelRentalSessionRentalSessionsSessionIdCancelDeleteData = {
    body?: never;
    path: {
        /**
         * Session Id
         */
        session_id: number;
    };
    query?: never;
    url: '/rental-sessions/{session_id}/cancel';
};

export type CancelRentalSessionRentalSessionsSessionIdCancelDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelRentalSessionRentalSessionsSessionIdCancelDeleteError = CancelRentalSessionRentalSessionsSessionIdCancelDeleteErrors[keyof CancelRentalSessionRentalSessionsSessionIdCancelDeleteErrors];

export type CancelRentalSessionRentalSessionsSessionIdCancelDeleteResponses = {
    /**
     * Successful Response
     */
    200: RentalSessionGet;
};

export type CancelRentalSessionRentalSessionsSessionIdCancelDeleteResponse = CancelRentalSessionRentalSessionsSessionIdCancelDeleteResponses[keyof CancelRentalSessionRentalSessionsSessionIdCancelDeleteResponses];

export type DeleteItemTypeItemtypeIdDeleteData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/itemtype/{id}';
};

export type DeleteItemTypeItemtypeIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteItemTypeItemtypeIdDeleteError = DeleteItemTypeItemtypeIdDeleteErrors[keyof DeleteItemTypeItemtypeIdDeleteErrors];

export type DeleteItemTypeItemtypeIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type DeleteItemTypeItemtypeIdDeleteResponse = DeleteItemTypeItemtypeIdDeleteResponses[keyof DeleteItemTypeItemtypeIdDeleteResponses];

export type GetItemTypeItemtypeIdGetData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/itemtype/{id}';
};

export type GetItemTypeItemtypeIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemTypeItemtypeIdGetError = GetItemTypeItemtypeIdGetErrors[keyof GetItemTypeItemtypeIdGetErrors];

export type GetItemTypeItemtypeIdGetResponses = {
    /**
     * Successful Response
     */
    200: ItemTypeGet;
};

export type GetItemTypeItemtypeIdGetResponse = GetItemTypeItemtypeIdGetResponses[keyof GetItemTypeItemtypeIdGetResponses];

export type UpdateItemTypeItemtypeIdPatchData = {
    body: ItemTypePost;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/itemtype/{id}';
};

export type UpdateItemTypeItemtypeIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateItemTypeItemtypeIdPatchError = UpdateItemTypeItemtypeIdPatchErrors[keyof UpdateItemTypeItemtypeIdPatchErrors];

export type UpdateItemTypeItemtypeIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ItemTypeGet;
};

export type UpdateItemTypeItemtypeIdPatchResponse = UpdateItemTypeItemtypeIdPatchResponses[keyof UpdateItemTypeItemtypeIdPatchResponses];

export type GetItemsTypesItemtypeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/itemtype';
};

export type GetItemsTypesItemtypeGetResponses = {
    /**
     * Response Get Items Types Itemtype Get
     *
     * Successful Response
     */
    200: Array<ItemTypeGet>;
};

export type GetItemsTypesItemtypeGetResponse = GetItemsTypesItemtypeGetResponses[keyof GetItemsTypesItemtypeGetResponses];

export type CreateItemTypeItemtypePostData = {
    body: ItemTypePost;
    path?: never;
    query?: never;
    url: '/itemtype';
};

export type CreateItemTypeItemtypePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateItemTypeItemtypePostError = CreateItemTypeItemtypePostErrors[keyof CreateItemTypeItemtypePostErrors];

export type CreateItemTypeItemtypePostResponses = {
    /**
     * Successful Response
     */
    200: ItemTypeGet;
};

export type CreateItemTypeItemtypePostResponse = CreateItemTypeItemtypePostResponses[keyof CreateItemTypeItemtypePostResponses];

export type MakeItemTypeAvailableItemtypeAvailableIdPatchData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query: {
        /**
         * Count
         */
        count: number;
    };
    url: '/itemtype/available/{id}';
};

export type MakeItemTypeAvailableItemtypeAvailableIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MakeItemTypeAvailableItemtypeAvailableIdPatchError = MakeItemTypeAvailableItemtypeAvailableIdPatchErrors[keyof MakeItemTypeAvailableItemtypeAvailableIdPatchErrors];

export type MakeItemTypeAvailableItemtypeAvailableIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ItemTypeAvailable;
};

export type MakeItemTypeAvailableItemtypeAvailableIdPatchResponse = MakeItemTypeAvailableItemtypeAvailableIdPatchResponses[keyof MakeItemTypeAvailableItemtypeAvailableIdPatchResponses];

export type GetStrikesStrikeGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Id
         */
        user_id?: number | null;
        /**
         * Admin Id
         */
        admin_id?: number | null;
        /**
         * Session Id
         */
        session_id?: number | null;
        /**
         * From Date
         */
        from_date?: string | null;
        /**
         * To Date
         */
        to_date?: string | null;
    };
    url: '/strike';
};

export type GetStrikesStrikeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetStrikesStrikeGetError = GetStrikesStrikeGetErrors[keyof GetStrikesStrikeGetErrors];

export type GetStrikesStrikeGetResponses = {
    /**
     * Response Get Strikes Strike Get
     *
     * Successful Response
     */
    200: Array<StrikeGet>;
};

export type GetStrikesStrikeGetResponse = GetStrikesStrikeGetResponses[keyof GetStrikesStrikeGetResponses];

export type CreateStrikeStrikePostData = {
    body: StrikePost;
    path?: never;
    query?: never;
    url: '/strike';
};

export type CreateStrikeStrikePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateStrikeStrikePostError = CreateStrikeStrikePostErrors[keyof CreateStrikeStrikePostErrors];

export type CreateStrikeStrikePostResponses = {
    /**
     * Successful Response
     */
    200: StrikeGet;
};

export type CreateStrikeStrikePostResponse = CreateStrikeStrikePostResponses[keyof CreateStrikeStrikePostResponses];

export type GetUserStrikesStrikeUserUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/strike/user/{user_id}';
};

export type GetUserStrikesStrikeUserUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserStrikesStrikeUserUserIdGetError = GetUserStrikesStrikeUserUserIdGetErrors[keyof GetUserStrikesStrikeUserUserIdGetErrors];

export type GetUserStrikesStrikeUserUserIdGetResponses = {
    /**
     * Response Get User Strikes Strike User  User Id  Get
     *
     * Successful Response
     */
    200: Array<StrikeGet>;
};

export type GetUserStrikesStrikeUserUserIdGetResponse = GetUserStrikesStrikeUserUserIdGetResponses[keyof GetUserStrikesStrikeUserUserIdGetResponses];

export type DeleteStrikeStrikeIdDeleteData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/strike/{id}';
};

export type DeleteStrikeStrikeIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteStrikeStrikeIdDeleteError = DeleteStrikeStrikeIdDeleteErrors[keyof DeleteStrikeStrikeIdDeleteErrors];

export type DeleteStrikeStrikeIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type DeleteStrikeStrikeIdDeleteResponse = DeleteStrikeStrikeIdDeleteResponses[keyof DeleteStrikeStrikeIdDeleteResponses];
