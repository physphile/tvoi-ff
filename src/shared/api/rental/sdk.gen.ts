// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchData, AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchErrors, AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchResponses, CancelRentalSessionRentalSessionsSessionIdCancelDeleteData, CancelRentalSessionRentalSessionsSessionIdCancelDeleteErrors, CancelRentalSessionRentalSessionsSessionIdCancelDeleteResponses, CreateItemItemPostData, CreateItemItemPostErrors, CreateItemItemPostResponses, CreateItemTypeItemtypePostData, CreateItemTypeItemtypePostErrors, CreateItemTypeItemtypePostResponses, CreateRentalSessionRentalSessionsItemTypeIdPostData, CreateRentalSessionRentalSessionsItemTypeIdPostErrors, CreateRentalSessionRentalSessionsItemTypeIdPostResponses, CreateStrikeStrikePostData, CreateStrikeStrikePostErrors, CreateStrikeStrikePostResponses, DeleteItemItemIdDeleteData, DeleteItemItemIdDeleteErrors, DeleteItemItemIdDeleteResponses, DeleteItemTypeItemtypeIdDeleteData, DeleteItemTypeItemtypeIdDeleteErrors, DeleteItemTypeItemtypeIdDeleteResponses, DeleteStrikeStrikeIdDeleteData, DeleteStrikeStrikeIdDeleteErrors, DeleteStrikeStrikeIdDeleteResponses, GetEventsEventGetData, GetEventsEventGetErrors, GetEventsEventGetResponses, GetItemItemIdGetData, GetItemItemIdGetErrors, GetItemItemIdGetResponses, GetItemsItemGetData, GetItemsItemGetErrors, GetItemsItemGetResponses, GetItemsTypesItemtypeGetData, GetItemsTypesItemtypeGetResponses, GetItemTypeItemtypeIdGetData, GetItemTypeItemtypeIdGetErrors, GetItemTypeItemtypeIdGetResponses, GetMySessionsRentalSessionsUserMeGetData, GetMySessionsRentalSessionsUserMeGetErrors, GetMySessionsRentalSessionsUserMeGetResponses, GetRentalSessionRentalSessionsSessionIdGetData, GetRentalSessionRentalSessionsSessionIdGetErrors, GetRentalSessionRentalSessionsSessionIdGetResponses, GetRentalSessionsRentalSessionsGetData, GetRentalSessionsRentalSessionsGetErrors, GetRentalSessionsRentalSessionsGetResponses, GetStrikesStrikeGetData, GetStrikesStrikeGetErrors, GetStrikesStrikeGetResponses, GetUserStrikesStrikeUserUserIdGetData, GetUserStrikesStrikeUserUserIdGetErrors, GetUserStrikesStrikeUserUserIdGetResponses, MakeItemTypeAvailableItemtypeAvailableIdPatchData, MakeItemTypeAvailableItemtypeAvailableIdPatchErrors, MakeItemTypeAvailableItemtypeAvailableIdPatchResponses, StartRentalSessionRentalSessionsSessionIdStartPatchData, StartRentalSessionRentalSessionsSessionIdStartPatchErrors, StartRentalSessionRentalSessionsSessionIdStartPatchResponses, UpdateItemItemIdPatchData, UpdateItemItemIdPatchErrors, UpdateItemItemIdPatchResponses, UpdateItemTypeItemtypeIdPatchData, UpdateItemTypeItemtypeIdPatchErrors, UpdateItemTypeItemtypeIdPatchResponses, UpdateRentalSessionRentalSessionsSessionIdPatchData, UpdateRentalSessionRentalSessionsSessionIdPatchErrors, UpdateRentalSessionRentalSessionsSessionIdPatchResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Events
 *
 * Retrieves a list of events, with optional filtering.
 *
 * Scopes: `["rental.event.view"]`
 *
 * - **admin_id**: Filter events by admin ID.
 * - **session_id**: Filter events by session ID.
 *
 * Returns a list of events.
 */
export const getEventsEventGet = <ThrowOnError extends boolean = false>(options?: Options<GetEventsEventGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventsEventGetResponses, GetEventsEventGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/event',
        ...options
    });
};

/**
 * Get Items
 *
 * Retrieves a list of items. If `type_id` is specified, only items of that type are returned.
 *
 * - **type_id**: The ID of the item type (optional).
 *
 * Returns a list of items.
 */
export const getItemsItemGet = <ThrowOnError extends boolean = false>(options?: Options<GetItemsItemGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetItemsItemGetResponses, GetItemsItemGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/item',
        ...options
    });
};

/**
 * Create Item
 *
 * Creates a new item.
 *
 * Scopes: `["rental.item.create"]`
 *
 * - **item**: The data for the new item.
 *
 * Returns the created item.
 *
 * Raises **ObjectNotFound** if the item type with the specified `type_id` is not found.
 */
export const createItemItemPost = <ThrowOnError extends boolean = false>(options: Options<CreateItemItemPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateItemItemPostResponses, CreateItemItemPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Item
 *
 * Deletes an item by its ID.
 *
 * Scopes: `["rental.item.delete"]`
 *
 * - **id**: The ID of the item.
 *
 * Returns a status response.
 *
 * Raises **ObjectNotFound** if the item with the specified ID is not found.
 */
export const deleteItemItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteItemItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteItemItemIdDeleteResponses, DeleteItemItemIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/item/{id}',
        ...options
    });
};

/**
 * Get Item
 *
 * Получает предмет по его идентификатору.
 */
export const getItemItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemItemIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetItemItemIdGetResponses, GetItemItemIdGetErrors, ThrowOnError>({
        url: '/item/{id}',
        ...options
    });
};

/**
 * Update Item
 *
 * Updates the availability status of an item by its ID.
 *
 * Scopes: `["rental.item.patch"]`
 *
 * - **id**: The ID of the item.
 * - **is_available**: The new availability status for the item.
 *
 * Returns the updated item.
 *
 * Raises **ObjectNotFound** if the item with the specified ID is not found.
 */
export const updateItemItemIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateItemItemIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateItemItemIdPatchResponses, UpdateItemItemIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/item/{id}',
        ...options
    });
};

/**
 * Create Rental Session
 *
 * Создает новую сессию аренды для указанного типа предмета.
 *
 * Cкоупы: `["rental.session.create"]`
 *
 * :param item_type_id: Идентификатор типа предмета.
 * :raises NoneAvailable: Если нет доступных предметов указанного типа.
 * :raises SessionExists: Если у пользователя уже есть сессия с указанным типом предмета.
 */
export const createRentalSessionRentalSessionsItemTypeIdPost = <ThrowOnError extends boolean = false>(options: Options<CreateRentalSessionRentalSessionsItemTypeIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateRentalSessionRentalSessionsItemTypeIdPostResponses, CreateRentalSessionRentalSessionsItemTypeIdPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions/{item_type_id}',
        ...options
    });
};

/**
 * Start Rental Session
 *
 * Starts a rental session, changing its status to ACTIVE.
 *
 * Scopes: `["rental.session.admin"]`
 *
 * - **session_id**: The ID of the rental session to start.
 *
 * Returns the updated rental session.
 *
 * Raises **ObjectNotFound** if the session with the specified ID is not found.
 */
export const startRentalSessionRentalSessionsSessionIdStartPatch = <ThrowOnError extends boolean = false>(options: Options<StartRentalSessionRentalSessionsSessionIdStartPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<StartRentalSessionRentalSessionsSessionIdStartPatchResponses, StartRentalSessionRentalSessionsSessionIdStartPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions/{session_id}/start',
        ...options
    });
};

/**
 * Accept End Rental Session
 *
 * Ends a rental session, changing its status to RETURNED. Issues a strike if specified.
 *
 * Scopes: `["rental.session.admin"]`
 *
 * - **session_id**: The ID of the rental session to end.
 * - **with_strike**: A flag indicating whether to issue a strike.
 * - **strike_reason**: The reason for the strike.
 *
 * Returns the updated rental session.
 *
 * Raises:
 * - **ObjectNotFound**: If the session with the specified ID is not found.
 * - **InactiveSession**: If the session is not active.
 */
export const acceptEndRentalSessionRentalSessionsSessionIdReturnPatch = <ThrowOnError extends boolean = false>(options: Options<AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchResponses, AcceptEndRentalSessionRentalSessionsSessionIdReturnPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions/{session_id}/return',
        ...options
    });
};

/**
 * Get Rental Session
 */
export const getRentalSessionRentalSessionsSessionIdGet = <ThrowOnError extends boolean = false>(options: Options<GetRentalSessionRentalSessionsSessionIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRentalSessionRentalSessionsSessionIdGetResponses, GetRentalSessionRentalSessionsSessionIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions/{session_id}',
        ...options
    });
};

/**
 * Update Rental Session
 *
 * Updates the information of a rental session.
 *
 * Scopes: `["rental.session.admin"]`
 *
 * - **session_id**: The ID of the rental session to update.
 * - **update_data**: The data to update the session with.
 *
 * Returns the updated rental session.
 *
 * Raises **ObjectNotFound** if the session with the specified ID is not found.
 */
export const updateRentalSessionRentalSessionsSessionIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateRentalSessionRentalSessionsSessionIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateRentalSessionRentalSessionsSessionIdPatchResponses, UpdateRentalSessionRentalSessionsSessionIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions/{session_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Rental Sessions
 *
 * Retrieves a list of rental sessions with optional status filtering.
 *
 * Scopes: `["rental.session.admin"]`
 *
 * - **is_reserved**: Filter by reserved sessions.
 * - **is_canceled**: Filter by canceled sessions.
 * - **is_dismissed**: Filter by dismissed sessions.
 * - **is_overdue**: Filter by overdue sessions.
 * - **is_returned**: Filter by returned sessions.
 * - **is_active**: Filter by active sessions.
 * - **is_expired**: Filter by expired sessions.
 * - **user_id**: User_id to get sessions
 * Returns a list of rental sessions.
 */
export const getRentalSessionsRentalSessionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetRentalSessionsRentalSessionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRentalSessionsRentalSessionsGetResponses, GetRentalSessionsRentalSessionsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions',
        ...options
    });
};

/**
 * Get My Sessions
 *
 * Retrieves a list of rental sessions for the user with optional status filtering.
 *
 * - **is_reserved**: Filter by reserved sessions.
 * - **is_canceled**: Filter by canceled sessions.
 * - **is_dismissed**: Filter by dismissed sessions.
 * - **is_overdue**: Filter by overdue sessions.
 * - **is_returned**: Filter by returned sessions.
 * - **is_active**: Filter by active sessions.
 * - **is_expired**: Filter by expired sessions.
 * Returns a list of rental sessions.
 */
export const getMySessionsRentalSessionsUserMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetMySessionsRentalSessionsUserMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMySessionsRentalSessionsUserMeGetResponses, GetMySessionsRentalSessionsUserMeGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions/user/me',
        ...options
    });
};

/**
 * Cancel Rental Session
 *
 * Cancels a session in the RESERVED status. Can only be canceled by the user who created it.
 *
 * - **session_id**: The ID of the rental session to cancel.
 *
 * Returns the canceled rental session.
 *
 * Raises **ForbiddenAction** if the user is not the owner or the session is not in RESERVED status.
 */
export const cancelRentalSessionRentalSessionsSessionIdCancelDelete = <ThrowOnError extends boolean = false>(options: Options<CancelRentalSessionRentalSessionsSessionIdCancelDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<CancelRentalSessionRentalSessionsSessionIdCancelDeleteResponses, CancelRentalSessionRentalSessionsSessionIdCancelDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/rental-sessions/{session_id}/cancel',
        ...options
    });
};

/**
 * Delete Item Type
 *
 * Deletes an item type by its ID.
 *
 * Scopes: `["rental.item_type.delete"]`
 *
 * - **id**: The ID of the item type.
 *
 * Returns a status response.
 *
 * Raises **ObjectNotFound** if the item type with the specified ID is not found.
 *
 * Raises **ForbiddenAction** if the item type with the specified ID has items.
 */
export const deleteItemTypeItemtypeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteItemTypeItemtypeIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteItemTypeItemtypeIdDeleteResponses, DeleteItemTypeItemtypeIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/itemtype/{id}',
        ...options
    });
};

/**
 * Get Item Type
 *
 * Retrieves information about an item type by its ID.
 *
 * - **id**: The ID of the item type.
 *
 * Returns the item type information.
 *
 * Raises **ObjectNotFound** if the item type with the specified ID is not found.
 */
export const getItemTypeItemtypeIdGet = <ThrowOnError extends boolean = false>(options: Options<GetItemTypeItemtypeIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetItemTypeItemtypeIdGetResponses, GetItemTypeItemtypeIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/itemtype/{id}',
        ...options
    });
};

/**
 * Update Item Type
 *
 * Updates the information of an item type by its ID.
 *
 * Scopes: `["rental.item_type.update"]`
 *
 * - **id**: The ID of the item type.
 * - **item_type_info**: The data to update the item type with.
 *
 * Returns the updated item type.
 *
 * Raises **ObjectNotFound** if the item type with the specified ID is not found.
 */
export const updateItemTypeItemtypeIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateItemTypeItemtypeIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateItemTypeItemtypeIdPatchResponses, UpdateItemTypeItemtypeIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/itemtype/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Items Types
 *
 * Retrieves a list of all item types.
 *
 * Returns a list of all item types.
 *
 * Raises **ObjectNotFound** if no item types are found.
 */
export const getItemsTypesItemtypeGet = <ThrowOnError extends boolean = false>(options?: Options<GetItemsTypesItemtypeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetItemsTypesItemtypeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/itemtype',
        ...options
    });
};

/**
 * Create Item Type
 *
 * Creates a new item type.
 *
 * Scopes: `["rental.item_type.create"]`
 *
 * - **item_type_info**: The data for the new item type.
 *
 * Returns the created item type.
 */
export const createItemTypeItemtypePost = <ThrowOnError extends boolean = false>(options: Options<CreateItemTypeItemtypePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateItemTypeItemtypePostResponses, CreateItemTypeItemtypePostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/itemtype',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Make Item Type Available
 *
 * Делает один предмет доступным по ID типа предмета.
 *
 * Скоупы: `["rental.item_type.update"]`
 *
 * - **id**: ID типа предмета.
 * - **count**: Абсолютное количество предметов, которые нужно сделать доступными.
 * Если доступных меньше, делает больше доступных. Если доступных больше, делает меньше доступных.
 * Если нет возможности сделать count доступных, делает доступным максимально возможное количество.
 * Возвращает id всех возвращенных предметов и их количество.
 *
 *
 *
 * Вызывает **ObjectNotFound**, если тип предмета с указанным ID не найден.
 */
export const makeItemTypeAvailableItemtypeAvailableIdPatch = <ThrowOnError extends boolean = false>(options: Options<MakeItemTypeAvailableItemtypeAvailableIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<MakeItemTypeAvailableItemtypeAvailableIdPatchResponses, MakeItemTypeAvailableItemtypeAvailableIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/itemtype/available/{id}',
        ...options
    });
};

/**
 * Get Strikes
 *
 * Retrieves a list of strikes with optional filtering.
 *
 * Scopes: `["rental.strike.read"]`
 *
 * - **admin_id**: Filter strikes by admin ID.
 * - **session_id**: Filter strikes by session ID.
 * - **from_date**: Filter strikes created after this date.
 * - **to_date**: Filter strikes created before this date.
 *
 * Returns a list of strikes.
 *
 * Raises **DateRangeError** if only one of `from_date` or `to_date` is provided.
 */
export const getStrikesStrikeGet = <ThrowOnError extends boolean = false>(options?: Options<GetStrikesStrikeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStrikesStrikeGetResponses, GetStrikesStrikeGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/strike',
        ...options
    });
};

/**
 * Create Strike
 *
 * Creates a new strike.
 *
 * Scopes: `["rental.strike.create"]`
 *
 * - **strike_info**: The data for the new strike.
 *
 * Returns the created strike.
 *
 * If session does not exist returns ObjectNotFound.
 */
export const createStrikeStrikePost = <ThrowOnError extends boolean = false>(options: Options<CreateStrikeStrikePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStrikeStrikePostResponses, CreateStrikeStrikePostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/strike',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Strikes
 *
 * Retrieves a list of strikes for a specific user.
 *
 * - **user_id**: The ID of the user.
 *
 * Returns a list of strikes.
 */
export const getUserStrikesStrikeUserUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserStrikesStrikeUserUserIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserStrikesStrikeUserUserIdGetResponses, GetUserStrikesStrikeUserUserIdGetErrors, ThrowOnError>({
        url: '/strike/user/{user_id}',
        ...options
    });
};

/**
 * Delete Strike
 *
 * Deletes a strike by its ID.
 *
 * Scopes: `["rental.strike.delete"]`
 *
 * - **id**: The ID of the strike to delete.
 *
 * Returns a status response.
 *
 * Raises **ObjectNotFound** if the strike with the specified ID is not found.
 */
export const deleteStrikeStrikeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteStrikeStrikeIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStrikeStrikeIdDeleteResponses, DeleteStrikeStrikeIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/strike/{id}',
        ...options
    });
};
