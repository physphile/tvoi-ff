// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { createButtonCategoryCategoryIdButtonPost, createCategoryCategoryPost, getButtonCategoryCategoryIdButtonButtonIdGet, getButtonsCategoryCategoryIdButtonGet, getCategoriesCategoryGet, getCategoryCategoryCategoryIdGet, getServiceServiceButtonIdGet, type Options, removeButtonCategoryCategoryIdButtonButtonIdDelete, removeCategoryCategoryCategoryIdDelete, updateButtonCategoryCategoryIdButtonButtonIdPatch, updateCategoryCategoryCategoryIdPatch } from '../sdk.gen';
import type { CreateButtonCategoryCategoryIdButtonPostData, CreateButtonCategoryCategoryIdButtonPostError, CreateButtonCategoryCategoryIdButtonPostResponse, CreateCategoryCategoryPostData, CreateCategoryCategoryPostError, CreateCategoryCategoryPostResponse, GetButtonCategoryCategoryIdButtonButtonIdGetData, GetButtonsCategoryCategoryIdButtonGetData, GetCategoriesCategoryGetData, GetCategoryCategoryCategoryIdGetData, GetServiceServiceButtonIdGetData, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteError, RemoveCategoryCategoryCategoryIdDeleteData, RemoveCategoryCategoryCategoryIdDeleteError, UpdateButtonCategoryCategoryIdButtonButtonIdPatchData, UpdateButtonCategoryCategoryIdButtonButtonIdPatchError, UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponse, UpdateCategoryCategoryCategoryIdPatchData, UpdateCategoryCategoryCategoryIdPatchError, UpdateCategoryCategoryCategoryIdPatchResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getButtonsCategoryCategoryIdButtonGetQueryKey = (options: Options<GetButtonsCategoryCategoryIdButtonGetData>) => createQueryKey('getButtonsCategoryCategoryIdButtonGet', options);

/**
 * Get Buttons
 *
 * Показать все кнопки в категории
 *
 * Необходимые scopes: `-`
 */
export const getButtonsCategoryCategoryIdButtonGetOptions = (options: Options<GetButtonsCategoryCategoryIdButtonGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getButtonsCategoryCategoryIdButtonGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getButtonsCategoryCategoryIdButtonGetQueryKey(options)
    });
};

/**
 * Create Button
 *
 * Создать кнопку
 *
 * Необходимые scopes: `services.button.create`
 */
export const createButtonCategoryCategoryIdButtonPostMutation = (options?: Partial<Options<CreateButtonCategoryCategoryIdButtonPostData>>): UseMutationOptions<CreateButtonCategoryCategoryIdButtonPostResponse, CreateButtonCategoryCategoryIdButtonPostError, Options<CreateButtonCategoryCategoryIdButtonPostData>> => {
    const mutationOptions: UseMutationOptions<CreateButtonCategoryCategoryIdButtonPostResponse, CreateButtonCategoryCategoryIdButtonPostError, Options<CreateButtonCategoryCategoryIdButtonPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createButtonCategoryCategoryIdButtonPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Remove Button
 *
 * Удалить кнопку
 *
 * Необходимые scopes: `services.button.remove`
 */
export const removeButtonCategoryCategoryIdButtonButtonIdDeleteMutation = (options?: Partial<Options<RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData>>): UseMutationOptions<unknown, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteError, Options<RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteError, Options<RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await removeButtonCategoryCategoryIdButtonButtonIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getButtonCategoryCategoryIdButtonButtonIdGetQueryKey = (options: Options<GetButtonCategoryCategoryIdButtonButtonIdGetData>) => createQueryKey('getButtonCategoryCategoryIdButtonButtonIdGet', options);

/**
 * Get Button
 *
 * Показать одну кнопку
 *
 * Необходимые scopes: `-`
 */
export const getButtonCategoryCategoryIdButtonButtonIdGetOptions = (options: Options<GetButtonCategoryCategoryIdButtonButtonIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getButtonCategoryCategoryIdButtonButtonIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getButtonCategoryCategoryIdButtonButtonIdGetQueryKey(options)
    });
};

/**
 * Update Button
 *
 * Обновить кнопку
 *
 * Необходимые scopes: `services.button.update`
 */
export const updateButtonCategoryCategoryIdButtonButtonIdPatchMutation = (options?: Partial<Options<UpdateButtonCategoryCategoryIdButtonButtonIdPatchData>>): UseMutationOptions<UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponse, UpdateButtonCategoryCategoryIdButtonButtonIdPatchError, Options<UpdateButtonCategoryCategoryIdButtonButtonIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponse, UpdateButtonCategoryCategoryIdButtonButtonIdPatchError, Options<UpdateButtonCategoryCategoryIdButtonButtonIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateButtonCategoryCategoryIdButtonButtonIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCategoriesCategoryGetQueryKey = (options?: Options<GetCategoriesCategoryGetData>) => createQueryKey('getCategoriesCategoryGet', options);

/**
 * Get Categories
 *
 * Показывает список категорий
 *
 * Необходимые scopes: `-`
 */
export const getCategoriesCategoryGetOptions = (options?: Options<GetCategoriesCategoryGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCategoriesCategoryGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCategoriesCategoryGetQueryKey(options)
    });
};

/**
 * Create Category
 *
 * Создает категорию
 *
 * Необходимые scopes: `services.category.create`
 */
export const createCategoryCategoryPostMutation = (options?: Partial<Options<CreateCategoryCategoryPostData>>): UseMutationOptions<CreateCategoryCategoryPostResponse, CreateCategoryCategoryPostError, Options<CreateCategoryCategoryPostData>> => {
    const mutationOptions: UseMutationOptions<CreateCategoryCategoryPostResponse, CreateCategoryCategoryPostError, Options<CreateCategoryCategoryPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createCategoryCategoryPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Remove Category
 *
 * Удаляет категорию и все кнопки в ней
 *
 * Необходимые scopes: `services.category.delete`
 */
export const removeCategoryCategoryCategoryIdDeleteMutation = (options?: Partial<Options<RemoveCategoryCategoryCategoryIdDeleteData>>): UseMutationOptions<unknown, RemoveCategoryCategoryCategoryIdDeleteError, Options<RemoveCategoryCategoryCategoryIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, RemoveCategoryCategoryCategoryIdDeleteError, Options<RemoveCategoryCategoryCategoryIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await removeCategoryCategoryCategoryIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCategoryCategoryCategoryIdGetQueryKey = (options: Options<GetCategoryCategoryCategoryIdGetData>) => createQueryKey('getCategoryCategoryCategoryIdGet', options);

/**
 * Get Category
 *
 * Показывает категорию
 *
 * Необходимые scopes: `-`
 */
export const getCategoryCategoryCategoryIdGetOptions = (options: Options<GetCategoryCategoryCategoryIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCategoryCategoryCategoryIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCategoryCategoryCategoryIdGetQueryKey(options)
    });
};

/**
 * Update Category
 *
 * Обновляет категорию
 *
 * Необходимые scopes: `services.category.update`
 */
export const updateCategoryCategoryCategoryIdPatchMutation = (options?: Partial<Options<UpdateCategoryCategoryCategoryIdPatchData>>): UseMutationOptions<UpdateCategoryCategoryCategoryIdPatchResponse, UpdateCategoryCategoryCategoryIdPatchError, Options<UpdateCategoryCategoryCategoryIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateCategoryCategoryCategoryIdPatchResponse, UpdateCategoryCategoryCategoryIdPatchError, Options<UpdateCategoryCategoryCategoryIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateCategoryCategoryCategoryIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getServiceServiceButtonIdGetQueryKey = (options: Options<GetServiceServiceButtonIdGetData>) => createQueryKey('getServiceServiceButtonIdGet', options);

/**
 * Get Service
 *
 * Показать одну кнопку
 *
 * Необходимые scopes: `-`
 *
 * TODO: Переделать ручку, сделав сервис независимым от кнопки
 */
export const getServiceServiceButtonIdGetOptions = (options: Options<GetServiceServiceButtonIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getServiceServiceButtonIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getServiceServiceButtonIdGetQueryKey(options)
    });
};
