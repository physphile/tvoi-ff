// This file is auto-generated by @hey-api/openapi-ts

import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
	type Options,
	createButtonCategoryCategoryIdButtonPost,
	createCategoryCategoryPost,
	getButtonCategoryCategoryIdButtonButtonIdGet,
	getButtonsCategoryCategoryIdButtonGet,
	getCategoriesCategoryGet,
	getCategoryCategoryCategoryIdGet,
	getServiceServiceButtonIdGet,
	removeButtonCategoryCategoryIdButtonButtonIdDelete,
	removeCategoryCategoryCategoryIdDelete,
	updateButtonCategoryCategoryIdButtonButtonIdPatch,
	updateCategoryCategoryCategoryIdPatch,
} from '../sdk.gen';
import type {
	CreateButtonCategoryCategoryIdButtonPostData,
	CreateButtonCategoryCategoryIdButtonPostError,
	CreateButtonCategoryCategoryIdButtonPostResponse,
	CreateCategoryCategoryPostData,
	CreateCategoryCategoryPostError,
	CreateCategoryCategoryPostResponse,
	GetButtonCategoryCategoryIdButtonButtonIdGetData,
	GetButtonsCategoryCategoryIdButtonGetData,
	GetCategoriesCategoryGetData,
	GetCategoryCategoryCategoryIdGetData,
	GetServiceServiceButtonIdGetData,
	RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData,
	RemoveButtonCategoryCategoryIdButtonButtonIdDeleteError,
	RemoveCategoryCategoryCategoryIdDeleteData,
	RemoveCategoryCategoryCategoryIdDeleteError,
	UpdateButtonCategoryCategoryIdButtonButtonIdPatchData,
	UpdateButtonCategoryCategoryIdButtonButtonIdPatchError,
	UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponse,
	UpdateCategoryCategoryCategoryIdPatchData,
	UpdateCategoryCategoryCategoryIdPatchError,
	UpdateCategoryCategoryCategoryIdPatchResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const getButtonsCategoryCategoryIdButtonGetQueryKey = (
	options: Options<GetButtonsCategoryCategoryIdButtonGetData>
) => createQueryKey('getButtonsCategoryCategoryIdButtonGet', options);

export const getButtonsCategoryCategoryIdButtonGetOptions = (
	options: Options<GetButtonsCategoryCategoryIdButtonGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getButtonsCategoryCategoryIdButtonGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getButtonsCategoryCategoryIdButtonGetQueryKey(options),
	});
};

export const createButtonCategoryCategoryIdButtonPostQueryKey = (
	options: Options<CreateButtonCategoryCategoryIdButtonPostData>
) => createQueryKey('createButtonCategoryCategoryIdButtonPost', options);

export const createButtonCategoryCategoryIdButtonPostOptions = (
	options: Options<CreateButtonCategoryCategoryIdButtonPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createButtonCategoryCategoryIdButtonPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createButtonCategoryCategoryIdButtonPostQueryKey(options),
	});
};

export const createButtonCategoryCategoryIdButtonPostMutation = (
	options?: Partial<Options<CreateButtonCategoryCategoryIdButtonPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateButtonCategoryCategoryIdButtonPostResponse,
		CreateButtonCategoryCategoryIdButtonPostError,
		Options<CreateButtonCategoryCategoryIdButtonPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createButtonCategoryCategoryIdButtonPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const removeButtonCategoryCategoryIdButtonButtonIdDeleteMutation = (
	options?: Partial<Options<RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		RemoveButtonCategoryCategoryIdButtonButtonIdDeleteError,
		Options<RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await removeButtonCategoryCategoryIdButtonButtonIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getButtonCategoryCategoryIdButtonButtonIdGetQueryKey = (
	options: Options<GetButtonCategoryCategoryIdButtonButtonIdGetData>
) => createQueryKey('getButtonCategoryCategoryIdButtonButtonIdGet', options);

export const getButtonCategoryCategoryIdButtonButtonIdGetOptions = (
	options: Options<GetButtonCategoryCategoryIdButtonButtonIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getButtonCategoryCategoryIdButtonButtonIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getButtonCategoryCategoryIdButtonButtonIdGetQueryKey(options),
	});
};

export const updateButtonCategoryCategoryIdButtonButtonIdPatchMutation = (
	options?: Partial<Options<UpdateButtonCategoryCategoryIdButtonButtonIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponse,
		UpdateButtonCategoryCategoryIdButtonButtonIdPatchError,
		Options<UpdateButtonCategoryCategoryIdButtonButtonIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateButtonCategoryCategoryIdButtonButtonIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getCategoriesCategoryGetQueryKey = (options?: Options<GetCategoriesCategoryGetData>) =>
	createQueryKey('getCategoriesCategoryGet', options);

export const getCategoriesCategoryGetOptions = (
	options?: Options<GetCategoriesCategoryGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCategoriesCategoryGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getCategoriesCategoryGetQueryKey(options),
	});
};

export const createCategoryCategoryPostQueryKey = (
	options: Options<CreateCategoryCategoryPostData>
) => createQueryKey('createCategoryCategoryPost', options);

export const createCategoryCategoryPostOptions = (
	options: Options<CreateCategoryCategoryPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createCategoryCategoryPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createCategoryCategoryPostQueryKey(options),
	});
};

export const createCategoryCategoryPostMutation = (
	options?: Partial<Options<CreateCategoryCategoryPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateCategoryCategoryPostResponse,
		CreateCategoryCategoryPostError,
		Options<CreateCategoryCategoryPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createCategoryCategoryPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const removeCategoryCategoryCategoryIdDeleteMutation = (
	options?: Partial<Options<RemoveCategoryCategoryCategoryIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		RemoveCategoryCategoryCategoryIdDeleteError,
		Options<RemoveCategoryCategoryCategoryIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await removeCategoryCategoryCategoryIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getCategoryCategoryCategoryIdGetQueryKey = (
	options: Options<GetCategoryCategoryCategoryIdGetData>
) => createQueryKey('getCategoryCategoryCategoryIdGet', options);

export const getCategoryCategoryCategoryIdGetOptions = (
	options: Options<GetCategoryCategoryCategoryIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCategoryCategoryCategoryIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getCategoryCategoryCategoryIdGetQueryKey(options),
	});
};

export const updateCategoryCategoryCategoryIdPatchMutation = (
	options?: Partial<Options<UpdateCategoryCategoryCategoryIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		UpdateCategoryCategoryCategoryIdPatchResponse,
		UpdateCategoryCategoryCategoryIdPatchError,
		Options<UpdateCategoryCategoryCategoryIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateCategoryCategoryCategoryIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getServiceServiceButtonIdGetQueryKey = (
	options: Options<GetServiceServiceButtonIdGetData>
) => createQueryKey('getServiceServiceButtonIdGet', options);

export const getServiceServiceButtonIdGetOptions = (
	options: Options<GetServiceServiceButtonIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getServiceServiceButtonIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getServiceServiceButtonIdGetQueryKey(options),
	});
};
