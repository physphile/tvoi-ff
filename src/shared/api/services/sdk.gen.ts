// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateButtonCategoryCategoryIdButtonPostData, CreateButtonCategoryCategoryIdButtonPostErrors, CreateButtonCategoryCategoryIdButtonPostResponses, CreateCategoryCategoryPostData, CreateCategoryCategoryPostErrors, CreateCategoryCategoryPostResponses, GetButtonCategoryCategoryIdButtonButtonIdGetData, GetButtonCategoryCategoryIdButtonButtonIdGetErrors, GetButtonCategoryCategoryIdButtonButtonIdGetResponses, GetButtonsCategoryCategoryIdButtonGetData, GetButtonsCategoryCategoryIdButtonGetErrors, GetButtonsCategoryCategoryIdButtonGetResponses, GetCategoriesCategoryGetData, GetCategoriesCategoryGetErrors, GetCategoriesCategoryGetResponses, GetCategoryCategoryCategoryIdGetData, GetCategoryCategoryCategoryIdGetErrors, GetCategoryCategoryCategoryIdGetResponses, GetServiceServiceButtonIdGetData, GetServiceServiceButtonIdGetErrors, GetServiceServiceButtonIdGetResponses, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteErrors, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteResponses, RemoveCategoryCategoryCategoryIdDeleteData, RemoveCategoryCategoryCategoryIdDeleteErrors, RemoveCategoryCategoryCategoryIdDeleteResponses, UpdateButtonCategoryCategoryIdButtonButtonIdPatchData, UpdateButtonCategoryCategoryIdButtonButtonIdPatchErrors, UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponses, UpdateCategoryCategoryCategoryIdPatchData, UpdateCategoryCategoryCategoryIdPatchErrors, UpdateCategoryCategoryCategoryIdPatchResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Buttons
 *
 * Показать все кнопки в категории
 *
 * Необходимые scopes: `-`
 */
export const getButtonsCategoryCategoryIdButtonGet = <ThrowOnError extends boolean = false>(options: Options<GetButtonsCategoryCategoryIdButtonGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetButtonsCategoryCategoryIdButtonGetResponses, GetButtonsCategoryCategoryIdButtonGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/button',
        ...options
    });
};

/**
 * Create Button
 *
 * Создать кнопку
 *
 * Необходимые scopes: `services.button.create`
 */
export const createButtonCategoryCategoryIdButtonPost = <ThrowOnError extends boolean = false>(options: Options<CreateButtonCategoryCategoryIdButtonPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateButtonCategoryCategoryIdButtonPostResponses, CreateButtonCategoryCategoryIdButtonPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/button',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Button
 *
 * Удалить кнопку
 *
 * Необходимые scopes: `services.button.remove`
 */
export const removeButtonCategoryCategoryIdButtonButtonIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveButtonCategoryCategoryIdButtonButtonIdDeleteResponses, RemoveButtonCategoryCategoryIdButtonButtonIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/button/{button_id}',
        ...options
    });
};

/**
 * Get Button
 *
 * Показать одну кнопку
 *
 * Необходимые scopes: `-`
 */
export const getButtonCategoryCategoryIdButtonButtonIdGet = <ThrowOnError extends boolean = false>(options: Options<GetButtonCategoryCategoryIdButtonButtonIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetButtonCategoryCategoryIdButtonButtonIdGetResponses, GetButtonCategoryCategoryIdButtonButtonIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/button/{button_id}',
        ...options
    });
};

/**
 * Update Button
 *
 * Обновить кнопку
 *
 * Необходимые scopes: `services.button.update`
 */
export const updateButtonCategoryCategoryIdButtonButtonIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateButtonCategoryCategoryIdButtonButtonIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponses, UpdateButtonCategoryCategoryIdButtonButtonIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/button/{button_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Categories
 *
 * Показывает список категорий
 *
 * Необходимые scopes: `-`
 */
export const getCategoriesCategoryGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesCategoryGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoriesCategoryGetResponses, GetCategoriesCategoryGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category',
        ...options
    });
};

/**
 * Create Category
 *
 * Создает категорию
 *
 * Необходимые scopes: `services.category.create`
 */
export const createCategoryCategoryPost = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryCategoryPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCategoryCategoryPostResponses, CreateCategoryCategoryPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Category
 *
 * Удаляет категорию и все кнопки в ней
 *
 * Необходимые scopes: `services.category.delete`
 */
export const removeCategoryCategoryCategoryIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveCategoryCategoryCategoryIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveCategoryCategoryCategoryIdDeleteResponses, RemoveCategoryCategoryCategoryIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}',
        ...options
    });
};

/**
 * Get Category
 *
 * Показывает категорию
 *
 * Необходимые scopes: `-`
 */
export const getCategoryCategoryCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoryCategoryCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCategoryCategoryCategoryIdGetResponses, GetCategoryCategoryCategoryIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}',
        ...options
    });
};

/**
 * Update Category
 *
 * Обновляет категорию
 *
 * Необходимые scopes: `services.category.update`
 */
export const updateCategoryCategoryCategoryIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCategoryCategoryCategoryIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateCategoryCategoryCategoryIdPatchResponses, UpdateCategoryCategoryCategoryIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Service
 *
 * Показать одну кнопку
 *
 * Необходимые scopes: `-`
 *
 * TODO: Переделать ручку, сделав сервис независимым от кнопки
 */
export const getServiceServiceButtonIdGet = <ThrowOnError extends boolean = false>(options: Options<GetServiceServiceButtonIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetServiceServiceButtonIdGetResponses, GetServiceServiceButtonIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/service/{button_id}',
        ...options
    });
};
