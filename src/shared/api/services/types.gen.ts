// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}/services` | (string & {});
};

/**
 * ButtonCreate
 */
export type ButtonCreate = {
    /**
     * Icon
     *
     * Иконка кнопки
     */
    icon: string;
    /**
     * Name
     *
     * Название кнопки
     */
    name: string;
    /**
     * Link
     *
     * Ссылка, на которую перенаправляет кнопка
     */
    link: string;
    /**
     * Тип открываемой ссылки (Ссылка приложения/Браузер в приложении/Браузер
     */
    type: Type;
    /**
     * Is Hidden
     *
     * Спрятана ли кнопка от пользователя
     */
    is_hidden?: boolean;
    /**
     * Required Scopes
     *
     * Какие скоупы нужны, чтобы кнопка была доступна
     */
    required_scopes?: Array<string> | null;
    /**
     * Optional Scopes
     *
     * Какиеп скоупы желательны
     */
    optional_scopes?: Array<string> | null;
};

/**
 * ButtonGet
 */
export type ButtonGet = {
    /**
     * Id
     *
     * Айди кнопки
     */
    id: number;
    /**
     * Icon
     *
     * Иконка кнопки
     */
    icon: string | null;
    /**
     * Name
     *
     * Название кнопки
     */
    name: string | null;
    /**
     * Link
     *
     * Ссылка, на которую перенаправляет кнопка
     */
    link: string | null;
    /**
     * Order
     *
     * Порядок, в котором отображаются кнопки
     */
    order: number | null;
    /**
     * Тип открываемой ссылки (Ссылка приложения/Браузер в приложении/Браузер
     */
    type: Type | null;
    /**
     * Доступна ли запрашиваемая кнопка
     */
    view?: ButtonView | null;
    /**
     * Required Scopes
     */
    required_scopes?: Array<string> | null;
    /**
     * Optional Scopes
     */
    optional_scopes?: Array<string> | null;
    /**
     * Scopes
     *
     * Скоупы, которые можно запросить
     */
    scopes?: Array<string> | null;
};

/**
 * ButtonUpdate
 */
export type ButtonUpdate = {
    /**
     * Category Id
     *
     * Айди категории
     */
    category_id?: number | null;
    /**
     * Icon
     *
     * Иконка кнопки
     */
    icon?: string | null;
    /**
     * Name
     *
     * Название кнопки
     */
    name?: string | null;
    /**
     * Order
     *
     * Порядок, в котором отображаются кнопки
     */
    order?: number | null;
    /**
     * Link
     *
     * Ссылка, на которую перенаправляет кнопка
     */
    link?: string | null;
    /**
     * Тип открываемой ссылки (Ссылка приложения/Браузер в приложении/Браузер
     */
    type?: Type | null;
    /**
     * Is Hidden
     *
     * Спрятана ли кнопка от пользователя
     */
    is_hidden?: boolean | null;
    /**
     * Required Scopes
     *
     * Какие скоупы нужны, чтобы кнопка была доступна
     */
    required_scopes?: Array<string> | null;
    /**
     * Optional Scopes
     *
     * Какие скоупы желательны
     */
    optional_scopes?: Array<string> | null;
};

/**
 * ButtonView
 */
export type ButtonView = 'active' | 'blocked' | 'hidden';

/**
 * ButtonsGet
 */
export type ButtonsGet = {
    /**
     * Buttons
     */
    buttons?: Array<ButtonGet> | null;
};

/**
 * CategoryCreate
 */
export type CategoryCreate = {
    /**
     * Type
     *
     * Тип отображения категории
     */
    type: string;
    /**
     * Name
     *
     * Имя категории
     */
    name: string;
    /**
     * Scopes
     *
     * Каким пользователям будет видна категория
     */
    scopes?: Array<string> | null;
};

/**
 * CategoryGet
 */
export type CategoryGet = {
    /**
     * Id
     */
    id: number;
    /**
     * Order
     */
    order: number;
    /**
     * Type
     */
    type?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Buttons
     */
    buttons?: Array<ButtonGet> | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
};

/**
 * CategoryUpdate
 */
export type CategoryUpdate = {
    /**
     * Order
     *
     * На какую позицию перенести категорию
     */
    order?: number | null;
    /**
     * Type
     *
     * Тип отображения категории
     */
    type?: string | null;
    /**
     * Name
     *
     * Имя категории
     */
    name?: string | null;
    /**
     * Scopes
     *
     * Каким пользователям будет видна категория
     */
    scopes?: Array<string> | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Type
 */
export type Type = 'inapp' | 'internal' | 'external';

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GetButtonsCategoryCategoryIdButtonGetData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}/button';
};

export type GetButtonsCategoryCategoryIdButtonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetButtonsCategoryCategoryIdButtonGetError = GetButtonsCategoryCategoryIdButtonGetErrors[keyof GetButtonsCategoryCategoryIdButtonGetErrors];

export type GetButtonsCategoryCategoryIdButtonGetResponses = {
    /**
     * Successful Response
     */
    200: ButtonsGet;
};

export type GetButtonsCategoryCategoryIdButtonGetResponse = GetButtonsCategoryCategoryIdButtonGetResponses[keyof GetButtonsCategoryCategoryIdButtonGetResponses];

export type CreateButtonCategoryCategoryIdButtonPostData = {
    body: ButtonCreate;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}/button';
};

export type CreateButtonCategoryCategoryIdButtonPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateButtonCategoryCategoryIdButtonPostError = CreateButtonCategoryCategoryIdButtonPostErrors[keyof CreateButtonCategoryCategoryIdButtonPostErrors];

export type CreateButtonCategoryCategoryIdButtonPostResponses = {
    /**
     * Successful Response
     */
    200: ButtonGet;
};

export type CreateButtonCategoryCategoryIdButtonPostResponse = CreateButtonCategoryCategoryIdButtonPostResponses[keyof CreateButtonCategoryCategoryIdButtonPostResponses];

export type RemoveButtonCategoryCategoryIdButtonButtonIdDeleteData = {
    body?: never;
    path: {
        /**
         * Button Id
         */
        button_id: number;
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}/button/{button_id}';
};

export type RemoveButtonCategoryCategoryIdButtonButtonIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveButtonCategoryCategoryIdButtonButtonIdDeleteError = RemoveButtonCategoryCategoryIdButtonButtonIdDeleteErrors[keyof RemoveButtonCategoryCategoryIdButtonButtonIdDeleteErrors];

export type RemoveButtonCategoryCategoryIdButtonButtonIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetButtonCategoryCategoryIdButtonButtonIdGetData = {
    body?: never;
    path: {
        /**
         * Button Id
         */
        button_id: number;
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}/button/{button_id}';
};

export type GetButtonCategoryCategoryIdButtonButtonIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetButtonCategoryCategoryIdButtonButtonIdGetError = GetButtonCategoryCategoryIdButtonButtonIdGetErrors[keyof GetButtonCategoryCategoryIdButtonButtonIdGetErrors];

export type GetButtonCategoryCategoryIdButtonButtonIdGetResponses = {
    /**
     * Successful Response
     */
    200: ButtonGet;
};

export type GetButtonCategoryCategoryIdButtonButtonIdGetResponse = GetButtonCategoryCategoryIdButtonButtonIdGetResponses[keyof GetButtonCategoryCategoryIdButtonButtonIdGetResponses];

export type UpdateButtonCategoryCategoryIdButtonButtonIdPatchData = {
    body: ButtonUpdate;
    path: {
        /**
         * Button Id
         */
        button_id: number;
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}/button/{button_id}';
};

export type UpdateButtonCategoryCategoryIdButtonButtonIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateButtonCategoryCategoryIdButtonButtonIdPatchError = UpdateButtonCategoryCategoryIdButtonButtonIdPatchErrors[keyof UpdateButtonCategoryCategoryIdButtonButtonIdPatchErrors];

export type UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ButtonUpdate;
};

export type UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponse = UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponses[keyof UpdateButtonCategoryCategoryIdButtonButtonIdPatchResponses];

export type GetCategoriesCategoryGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Info
         */
        info?: Array<'buttons'>;
    };
    url: '/category';
};

export type GetCategoriesCategoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoriesCategoryGetError = GetCategoriesCategoryGetErrors[keyof GetCategoriesCategoryGetErrors];

export type GetCategoriesCategoryGetResponses = {
    /**
     * Response Get Categories Category Get
     *
     * Successful Response
     */
    200: Array<CategoryGet>;
};

export type GetCategoriesCategoryGetResponse = GetCategoriesCategoryGetResponses[keyof GetCategoriesCategoryGetResponses];

export type CreateCategoryCategoryPostData = {
    body: CategoryCreate;
    path?: never;
    query?: never;
    url: '/category';
};

export type CreateCategoryCategoryPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCategoryCategoryPostError = CreateCategoryCategoryPostErrors[keyof CreateCategoryCategoryPostErrors];

export type CreateCategoryCategoryPostResponses = {
    /**
     * Successful Response
     */
    200: CategoryGet;
};

export type CreateCategoryCategoryPostResponse = CreateCategoryCategoryPostResponses[keyof CreateCategoryCategoryPostResponses];

export type RemoveCategoryCategoryCategoryIdDeleteData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}';
};

export type RemoveCategoryCategoryCategoryIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveCategoryCategoryCategoryIdDeleteError = RemoveCategoryCategoryCategoryIdDeleteErrors[keyof RemoveCategoryCategoryCategoryIdDeleteErrors];

export type RemoveCategoryCategoryCategoryIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCategoryCategoryCategoryIdGetData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}';
};

export type GetCategoryCategoryCategoryIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryCategoryCategoryIdGetError = GetCategoryCategoryCategoryIdGetErrors[keyof GetCategoryCategoryCategoryIdGetErrors];

export type GetCategoryCategoryCategoryIdGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryGet;
};

export type GetCategoryCategoryCategoryIdGetResponse = GetCategoryCategoryCategoryIdGetResponses[keyof GetCategoryCategoryCategoryIdGetResponses];

export type UpdateCategoryCategoryCategoryIdPatchData = {
    body: CategoryUpdate;
    path: {
        /**
         * Category Id
         */
        category_id: number;
    };
    query?: never;
    url: '/category/{category_id}';
};

export type UpdateCategoryCategoryCategoryIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCategoryCategoryCategoryIdPatchError = UpdateCategoryCategoryCategoryIdPatchErrors[keyof UpdateCategoryCategoryCategoryIdPatchErrors];

export type UpdateCategoryCategoryCategoryIdPatchResponses = {
    /**
     * Successful Response
     */
    200: CategoryUpdate;
};

export type UpdateCategoryCategoryCategoryIdPatchResponse = UpdateCategoryCategoryCategoryIdPatchResponses[keyof UpdateCategoryCategoryCategoryIdPatchResponses];

export type GetServiceServiceButtonIdGetData = {
    body?: never;
    path: {
        /**
         * Button Id
         */
        button_id: number;
    };
    query?: never;
    url: '/service/{button_id}';
};

export type GetServiceServiceButtonIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetServiceServiceButtonIdGetError = GetServiceServiceButtonIdGetErrors[keyof GetServiceServiceButtonIdGetErrors];

export type GetServiceServiceButtonIdGetResponses = {
    /**
     * Successful Response
     */
    200: ButtonGet;
};

export type GetServiceServiceButtonIdGetResponse = GetServiceServiceButtonIdGetResponses[keyof GetServiceServiceButtonIdGetResponses];
