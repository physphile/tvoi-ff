// This file is auto-generated by @hey-api/openapi-ts

import {
	type InfiniteData,
	type UseMutationOptions,
	infiniteQueryOptions,
	queryOptions,
} from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
	type Options,
	commentEventEventEventIdCommentPost,
	commentLecturerLecturerLecturerIdCommentPost,
	createEventEventPost,
	createEventsEventBulkPost,
	createGroupGroupPost,
	createLecturerLecturerPost,
	createRoomRoomPost,
	deleteCommentEventEventIdCommentIdDelete,
	deleteCommentLecturerLecturerIdCommentIdDelete,
	deleteEventEventIdDelete,
	deleteEventsEventBulkDelete,
	deleteGroupGroupIdDelete,
	deleteLecturerLecturerIdDelete,
	deletePhotoLecturerLecturerIdPhotoIdDelete,
	deleteRoomRoomIdDelete,
	getAllLecturerCommentsLecturerLecturerIdCommentGet,
	getCommentEventEventIdCommentIdGet,
	getCommentLecturerLecturerIdCommentIdGet,
	getEventByIdEventIdGet,
	getEventCommentsEventEventIdCommentGet,
	getEventsEventGet,
	getGroupByIdGroupIdGet,
	getGroupsGroupGet,
	getLecturerByIdLecturerIdGet,
	getLecturerPhotosLecturerLecturerIdPhotoGet,
	getLecturersLecturerGet,
	getPhotoLecturerLecturerIdPhotoIdGet,
	getRoomByIdRoomIdGet,
	getRoomsRoomGet,
	getUnreviewedCommentsEventEventIdCommentReviewGet,
	getUnreviewedCommentsLecturerLecturerIdCommentReviewGet,
	getUnreviewedPhotosLecturerPhotoReviewGet,
	patchEventEventIdPatch,
	patchGroupGroupIdPatch,
	patchLecturerLecturerIdPatch,
	patchRoomRoomIdPatch,
	reviewCommentEventEventIdCommentIdReviewPost,
	reviewCommentLecturerLecturerIdCommentIdReviewPost,
	reviewPhotoLecturerPhotoReviewIdPost,
	updateCommentEventEventIdCommentIdPatch,
	updateCommentLecturerLecturerLecturerIdCommentIdPatch,
	uploadPhotoLecturerLecturerIdPhotoPost,
} from '../sdk.gen';
import type {
	CommentEventEventEventIdCommentPostData,
	CommentEventEventEventIdCommentPostError,
	CommentEventEventEventIdCommentPostResponse,
	CommentLecturerLecturerLecturerIdCommentPostData,
	CommentLecturerLecturerLecturerIdCommentPostError,
	CommentLecturerLecturerLecturerIdCommentPostResponse,
	CreateEventEventPostData,
	CreateEventEventPostError,
	CreateEventEventPostResponse,
	CreateEventsEventBulkPostData,
	CreateEventsEventBulkPostError,
	CreateEventsEventBulkPostResponse,
	CreateGroupGroupPostData,
	CreateGroupGroupPostError,
	CreateGroupGroupPostResponse,
	CreateLecturerLecturerPostData,
	CreateLecturerLecturerPostError,
	CreateLecturerLecturerPostResponse,
	CreateRoomRoomPostData,
	CreateRoomRoomPostError,
	CreateRoomRoomPostResponse,
	DeleteCommentEventEventIdCommentIdDeleteData,
	DeleteCommentEventEventIdCommentIdDeleteError,
	DeleteCommentLecturerLecturerIdCommentIdDeleteData,
	DeleteCommentLecturerLecturerIdCommentIdDeleteError,
	DeleteEventEventIdDeleteData,
	DeleteEventEventIdDeleteError,
	DeleteEventsEventBulkDeleteData,
	DeleteEventsEventBulkDeleteError,
	DeleteGroupGroupIdDeleteData,
	DeleteGroupGroupIdDeleteError,
	DeleteLecturerLecturerIdDeleteData,
	DeleteLecturerLecturerIdDeleteError,
	DeletePhotoLecturerLecturerIdPhotoIdDeleteData,
	DeletePhotoLecturerLecturerIdPhotoIdDeleteError,
	DeleteRoomRoomIdDeleteData,
	DeleteRoomRoomIdDeleteError,
	GetAllLecturerCommentsLecturerLecturerIdCommentGetData,
	GetAllLecturerCommentsLecturerLecturerIdCommentGetError,
	GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse,
	GetCommentEventEventIdCommentIdGetData,
	GetCommentLecturerLecturerIdCommentIdGetData,
	GetEventByIdEventIdGetData,
	GetEventCommentsEventEventIdCommentGetData,
	GetEventCommentsEventEventIdCommentGetError,
	GetEventCommentsEventEventIdCommentGetResponse,
	GetEventsEventGetData,
	GetEventsEventGetError,
	GetEventsEventGetResponse,
	GetGroupByIdGroupIdGetData,
	GetGroupsGroupGetData,
	GetGroupsGroupGetError,
	GetGroupsGroupGetResponse,
	GetLecturerByIdLecturerIdGetData,
	GetLecturerPhotosLecturerLecturerIdPhotoGetData,
	GetLecturerPhotosLecturerLecturerIdPhotoGetError,
	GetLecturerPhotosLecturerLecturerIdPhotoGetResponse,
	GetLecturersLecturerGetData,
	GetLecturersLecturerGetError,
	GetLecturersLecturerGetResponse,
	GetPhotoLecturerLecturerIdPhotoIdGetData,
	GetRoomByIdRoomIdGetData,
	GetRoomsRoomGetData,
	GetRoomsRoomGetError,
	GetRoomsRoomGetResponse,
	GetUnreviewedCommentsEventEventIdCommentReviewGetData,
	GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData,
	GetUnreviewedPhotosLecturerPhotoReviewGetData,
	GetUnreviewedPhotosLecturerPhotoReviewGetError,
	GetUnreviewedPhotosLecturerPhotoReviewGetResponse,
	PatchEventEventIdPatchData,
	PatchEventEventIdPatchError,
	PatchEventEventIdPatchResponse,
	PatchGroupGroupIdPatchData,
	PatchGroupGroupIdPatchError,
	PatchGroupGroupIdPatchResponse,
	PatchLecturerLecturerIdPatchData,
	PatchLecturerLecturerIdPatchError,
	PatchLecturerLecturerIdPatchResponse,
	PatchRoomRoomIdPatchData,
	PatchRoomRoomIdPatchError,
	PatchRoomRoomIdPatchResponse,
	ReviewCommentEventEventIdCommentIdReviewPostData,
	ReviewCommentEventEventIdCommentIdReviewPostError,
	ReviewCommentEventEventIdCommentIdReviewPostResponse,
	ReviewCommentLecturerLecturerIdCommentIdReviewPostData,
	ReviewCommentLecturerLecturerIdCommentIdReviewPostError,
	ReviewCommentLecturerLecturerIdCommentIdReviewPostResponse,
	ReviewPhotoLecturerPhotoReviewIdPostData,
	ReviewPhotoLecturerPhotoReviewIdPostError,
	ReviewPhotoLecturerPhotoReviewIdPostResponse,
	UpdateCommentEventEventIdCommentIdPatchData,
	UpdateCommentEventEventIdCommentIdPatchError,
	UpdateCommentEventEventIdCommentIdPatchResponse,
	UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData,
	UpdateCommentLecturerLecturerLecturerIdCommentIdPatchError,
	UpdateCommentLecturerLecturerLecturerIdCommentIdPatchResponse,
	UploadPhotoLecturerLecturerIdPhotoPostData,
	UploadPhotoLecturerLecturerIdPhotoPostError,
	UploadPhotoLecturerLecturerIdPhotoPostResponse,
} from '../types.gen';

export const deleteLecturerLecturerIdDeleteMutation = (
	options?: Partial<Options<DeleteLecturerLecturerIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteLecturerLecturerIdDeleteError,
		Options<DeleteLecturerLecturerIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteLecturerLecturerIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const getLecturerByIdLecturerIdGetQueryKey = (
	options: Options<GetLecturerByIdLecturerIdGetData>
) => createQueryKey('getLecturerByIdLecturerIdGet', options);

export const getLecturerByIdLecturerIdGetOptions = (
	options: Options<GetLecturerByIdLecturerIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getLecturerByIdLecturerIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getLecturerByIdLecturerIdGetQueryKey(options),
	});
};

export const patchLecturerLecturerIdPatchMutation = (
	options?: Partial<Options<PatchLecturerLecturerIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchLecturerLecturerIdPatchResponse,
		PatchLecturerLecturerIdPatchError,
		Options<PatchLecturerLecturerIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchLecturerLecturerIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getLecturersLecturerGetQueryKey = (options?: Options<GetLecturersLecturerGetData>) =>
	createQueryKey('getLecturersLecturerGet', options);

export const getLecturersLecturerGetOptions = (options?: Options<GetLecturersLecturerGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getLecturersLecturerGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getLecturersLecturerGetQueryKey(options),
	});
};

const createInfiniteParams = <
	K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
	queryKey: QueryKey<Options>,
	page: K
) => {
	const params = queryKey[0];
	if (page.body) {
		params.body = {
			...(queryKey[0].body as any),
			...(page.body as any),
		};
	}
	if (page.headers) {
		params.headers = {
			...queryKey[0].headers,
			...page.headers,
		};
	}
	if (page.path) {
		params.path = {
			...(queryKey[0].path as any),
			...(page.path as any),
		};
	}
	if (page.query) {
		params.query = {
			...(queryKey[0].query as any),
			...(page.query as any),
		};
	}
	return params as unknown as typeof page;
};

export const getLecturersLecturerGetInfiniteQueryKey = (
	options?: Options<GetLecturersLecturerGetData>
): QueryKey<Options<GetLecturersLecturerGetData>> =>
	createQueryKey('getLecturersLecturerGet', options, true);

export const getLecturersLecturerGetInfiniteOptions = (
	options?: Options<GetLecturersLecturerGetData>
) => {
	return infiniteQueryOptions<
		GetLecturersLecturerGetResponse,
		GetLecturersLecturerGetError,
		InfiniteData<GetLecturersLecturerGetResponse>,
		QueryKey<Options<GetLecturersLecturerGetData>>,
		| number
		| Pick<QueryKey<Options<GetLecturersLecturerGetData>>[0], 'body' | 'headers' | 'path' | 'query'>
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetLecturersLecturerGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getLecturersLecturerGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getLecturersLecturerGetInfiniteQueryKey(options),
		}
	);
};

export const createLecturerLecturerPostQueryKey = (
	options: Options<CreateLecturerLecturerPostData>
) => createQueryKey('createLecturerLecturerPost', options);

export const createLecturerLecturerPostOptions = (
	options: Options<CreateLecturerLecturerPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createLecturerLecturerPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createLecturerLecturerPostQueryKey(options),
	});
};

export const createLecturerLecturerPostMutation = (
	options?: Partial<Options<CreateLecturerLecturerPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateLecturerLecturerPostResponse,
		CreateLecturerLecturerPostError,
		Options<CreateLecturerLecturerPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createLecturerLecturerPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getAllLecturerCommentsLecturerLecturerIdCommentGetQueryKey = (
	options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>
) => createQueryKey('getAllLecturerCommentsLecturerLecturerIdCommentGet', options);

export const getAllLecturerCommentsLecturerLecturerIdCommentGetOptions = (
	options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAllLecturerCommentsLecturerLecturerIdCommentGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getAllLecturerCommentsLecturerLecturerIdCommentGetQueryKey(options),
	});
};

export const getAllLecturerCommentsLecturerLecturerIdCommentGetInfiniteQueryKey = (
	options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>
): QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>> =>
	createQueryKey('getAllLecturerCommentsLecturerLecturerIdCommentGet', options, true);

export const getAllLecturerCommentsLecturerLecturerIdCommentGetInfiniteOptions = (
	options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>
) => {
	return infiniteQueryOptions<
		GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse,
		GetAllLecturerCommentsLecturerLecturerIdCommentGetError,
		InfiniteData<GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse>,
		QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>>,
		| number
		| Pick<
				QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>>[0],
				'body' | 'headers' | 'path' | 'query'
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getAllLecturerCommentsLecturerLecturerIdCommentGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getAllLecturerCommentsLecturerLecturerIdCommentGetInfiniteQueryKey(options),
		}
	);
};

export const commentLecturerLecturerLecturerIdCommentPostQueryKey = (
	options: Options<CommentLecturerLecturerLecturerIdCommentPostData>
) => createQueryKey('commentLecturerLecturerLecturerIdCommentPost', options);

export const commentLecturerLecturerLecturerIdCommentPostOptions = (
	options: Options<CommentLecturerLecturerLecturerIdCommentPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await commentLecturerLecturerLecturerIdCommentPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: commentLecturerLecturerLecturerIdCommentPostQueryKey(options),
	});
};

export const commentLecturerLecturerLecturerIdCommentPostMutation = (
	options?: Partial<Options<CommentLecturerLecturerLecturerIdCommentPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CommentLecturerLecturerLecturerIdCommentPostResponse,
		CommentLecturerLecturerLecturerIdCommentPostError,
		Options<CommentLecturerLecturerLecturerIdCommentPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await commentLecturerLecturerLecturerIdCommentPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteCommentLecturerLecturerIdCommentIdDeleteMutation = (
	options?: Partial<Options<DeleteCommentLecturerLecturerIdCommentIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteCommentLecturerLecturerIdCommentIdDeleteError,
		Options<DeleteCommentLecturerLecturerIdCommentIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteCommentLecturerLecturerIdCommentIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getCommentLecturerLecturerIdCommentIdGetQueryKey = (
	options: Options<GetCommentLecturerLecturerIdCommentIdGetData>
) => createQueryKey('getCommentLecturerLecturerIdCommentIdGet', options);

export const getCommentLecturerLecturerIdCommentIdGetOptions = (
	options: Options<GetCommentLecturerLecturerIdCommentIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCommentLecturerLecturerIdCommentIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getCommentLecturerLecturerIdCommentIdGetQueryKey(options),
	});
};

export const updateCommentLecturerLecturerLecturerIdCommentIdPatchMutation = (
	options?: Partial<Options<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		UpdateCommentLecturerLecturerLecturerIdCommentIdPatchResponse,
		UpdateCommentLecturerLecturerLecturerIdCommentIdPatchError,
		Options<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateCommentLecturerLecturerLecturerIdCommentIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getUnreviewedCommentsLecturerLecturerIdCommentReviewGetQueryKey = (
	options: Options<GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData>
) => createQueryKey('getUnreviewedCommentsLecturerLecturerIdCommentReviewGet', options);

export const getUnreviewedCommentsLecturerLecturerIdCommentReviewGetOptions = (
	options: Options<GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getUnreviewedCommentsLecturerLecturerIdCommentReviewGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getUnreviewedCommentsLecturerLecturerIdCommentReviewGetQueryKey(options),
	});
};

export const reviewCommentLecturerLecturerIdCommentIdReviewPostQueryKey = (
	options: Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData>
) => createQueryKey('reviewCommentLecturerLecturerIdCommentIdReviewPost', options);

export const reviewCommentLecturerLecturerIdCommentIdReviewPostOptions = (
	options: Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await reviewCommentLecturerLecturerIdCommentIdReviewPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: reviewCommentLecturerLecturerIdCommentIdReviewPostQueryKey(options),
	});
};

export const reviewCommentLecturerLecturerIdCommentIdReviewPostMutation = (
	options?: Partial<Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		ReviewCommentLecturerLecturerIdCommentIdReviewPostResponse,
		ReviewCommentLecturerLecturerIdCommentIdReviewPostError,
		Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await reviewCommentLecturerLecturerIdCommentIdReviewPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getLecturerPhotosLecturerLecturerIdPhotoGetQueryKey = (
	options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>
) => createQueryKey('getLecturerPhotosLecturerLecturerIdPhotoGet', options);

export const getLecturerPhotosLecturerLecturerIdPhotoGetOptions = (
	options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getLecturerPhotosLecturerLecturerIdPhotoGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getLecturerPhotosLecturerLecturerIdPhotoGetQueryKey(options),
	});
};

export const getLecturerPhotosLecturerLecturerIdPhotoGetInfiniteQueryKey = (
	options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>
): QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>> =>
	createQueryKey('getLecturerPhotosLecturerLecturerIdPhotoGet', options, true);

export const getLecturerPhotosLecturerLecturerIdPhotoGetInfiniteOptions = (
	options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>
) => {
	return infiniteQueryOptions<
		GetLecturerPhotosLecturerLecturerIdPhotoGetResponse,
		GetLecturerPhotosLecturerLecturerIdPhotoGetError,
		InfiniteData<GetLecturerPhotosLecturerLecturerIdPhotoGetResponse>,
		QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>>,
		| number
		| Pick<
				QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>>[0],
				'body' | 'headers' | 'path' | 'query'
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getLecturerPhotosLecturerLecturerIdPhotoGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getLecturerPhotosLecturerLecturerIdPhotoGetInfiniteQueryKey(options),
		}
	);
};

export const uploadPhotoLecturerLecturerIdPhotoPostQueryKey = (
	options: Options<UploadPhotoLecturerLecturerIdPhotoPostData>
) => createQueryKey('uploadPhotoLecturerLecturerIdPhotoPost', options);

export const uploadPhotoLecturerLecturerIdPhotoPostOptions = (
	options: Options<UploadPhotoLecturerLecturerIdPhotoPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await uploadPhotoLecturerLecturerIdPhotoPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: uploadPhotoLecturerLecturerIdPhotoPostQueryKey(options),
	});
};

export const uploadPhotoLecturerLecturerIdPhotoPostMutation = (
	options?: Partial<Options<UploadPhotoLecturerLecturerIdPhotoPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		UploadPhotoLecturerLecturerIdPhotoPostResponse,
		UploadPhotoLecturerLecturerIdPhotoPostError,
		Options<UploadPhotoLecturerLecturerIdPhotoPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await uploadPhotoLecturerLecturerIdPhotoPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deletePhotoLecturerLecturerIdPhotoIdDeleteMutation = (
	options?: Partial<Options<DeletePhotoLecturerLecturerIdPhotoIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeletePhotoLecturerLecturerIdPhotoIdDeleteError,
		Options<DeletePhotoLecturerLecturerIdPhotoIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deletePhotoLecturerLecturerIdPhotoIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getPhotoLecturerLecturerIdPhotoIdGetQueryKey = (
	options: Options<GetPhotoLecturerLecturerIdPhotoIdGetData>
) => createQueryKey('getPhotoLecturerLecturerIdPhotoIdGet', options);

export const getPhotoLecturerLecturerIdPhotoIdGetOptions = (
	options: Options<GetPhotoLecturerLecturerIdPhotoIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getPhotoLecturerLecturerIdPhotoIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getPhotoLecturerLecturerIdPhotoIdGetQueryKey(options),
	});
};

export const getUnreviewedPhotosLecturerPhotoReviewGetQueryKey = (
	options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>
) => createQueryKey('getUnreviewedPhotosLecturerPhotoReviewGet', options);

export const getUnreviewedPhotosLecturerPhotoReviewGetOptions = (
	options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getUnreviewedPhotosLecturerPhotoReviewGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getUnreviewedPhotosLecturerPhotoReviewGetQueryKey(options),
	});
};

export const getUnreviewedPhotosLecturerPhotoReviewGetInfiniteQueryKey = (
	options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>
): QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>> =>
	createQueryKey('getUnreviewedPhotosLecturerPhotoReviewGet', options, true);

export const getUnreviewedPhotosLecturerPhotoReviewGetInfiniteOptions = (
	options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>
) => {
	return infiniteQueryOptions<
		GetUnreviewedPhotosLecturerPhotoReviewGetResponse,
		GetUnreviewedPhotosLecturerPhotoReviewGetError,
		InfiniteData<GetUnreviewedPhotosLecturerPhotoReviewGetResponse>,
		QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>>,
		| number
		| Pick<
				QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>>[0],
				'body' | 'headers' | 'path' | 'query'
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getUnreviewedPhotosLecturerPhotoReviewGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getUnreviewedPhotosLecturerPhotoReviewGetInfiniteQueryKey(options),
		}
	);
};

export const reviewPhotoLecturerPhotoReviewIdPostQueryKey = (
	options: Options<ReviewPhotoLecturerPhotoReviewIdPostData>
) => createQueryKey('reviewPhotoLecturerPhotoReviewIdPost', options);

export const reviewPhotoLecturerPhotoReviewIdPostOptions = (
	options: Options<ReviewPhotoLecturerPhotoReviewIdPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await reviewPhotoLecturerPhotoReviewIdPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: reviewPhotoLecturerPhotoReviewIdPostQueryKey(options),
	});
};

export const reviewPhotoLecturerPhotoReviewIdPostMutation = (
	options?: Partial<Options<ReviewPhotoLecturerPhotoReviewIdPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		ReviewPhotoLecturerPhotoReviewIdPostResponse,
		ReviewPhotoLecturerPhotoReviewIdPostError,
		Options<ReviewPhotoLecturerPhotoReviewIdPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await reviewPhotoLecturerPhotoReviewIdPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteGroupGroupIdDeleteMutation = (
	options?: Partial<Options<DeleteGroupGroupIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteGroupGroupIdDeleteError,
		Options<DeleteGroupGroupIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteGroupGroupIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getGroupByIdGroupIdGetQueryKey = (options: Options<GetGroupByIdGroupIdGetData>) =>
	createQueryKey('getGroupByIdGroupIdGet', options);

export const getGroupByIdGroupIdGetOptions = (options: Options<GetGroupByIdGroupIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getGroupByIdGroupIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getGroupByIdGroupIdGetQueryKey(options),
	});
};

export const patchGroupGroupIdPatchMutation = (
	options?: Partial<Options<PatchGroupGroupIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchGroupGroupIdPatchResponse,
		PatchGroupGroupIdPatchError,
		Options<PatchGroupGroupIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchGroupGroupIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getGroupsGroupGetQueryKey = (options?: Options<GetGroupsGroupGetData>) =>
	createQueryKey('getGroupsGroupGet', options);

export const getGroupsGroupGetOptions = (options?: Options<GetGroupsGroupGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getGroupsGroupGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getGroupsGroupGetQueryKey(options),
	});
};

export const getGroupsGroupGetInfiniteQueryKey = (
	options?: Options<GetGroupsGroupGetData>
): QueryKey<Options<GetGroupsGroupGetData>> => createQueryKey('getGroupsGroupGet', options, true);

export const getGroupsGroupGetInfiniteOptions = (options?: Options<GetGroupsGroupGetData>) => {
	return infiniteQueryOptions<
		GetGroupsGroupGetResponse,
		GetGroupsGroupGetError,
		InfiniteData<GetGroupsGroupGetResponse>,
		QueryKey<Options<GetGroupsGroupGetData>>,
		| number
		| Pick<QueryKey<Options<GetGroupsGroupGetData>>[0], 'body' | 'headers' | 'path' | 'query'>
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetGroupsGroupGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getGroupsGroupGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getGroupsGroupGetInfiniteQueryKey(options),
		}
	);
};

export const createGroupGroupPostQueryKey = (options: Options<CreateGroupGroupPostData>) =>
	createQueryKey('createGroupGroupPost', options);

export const createGroupGroupPostOptions = (options: Options<CreateGroupGroupPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createGroupGroupPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createGroupGroupPostQueryKey(options),
	});
};

export const createGroupGroupPostMutation = (
	options?: Partial<Options<CreateGroupGroupPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateGroupGroupPostResponse,
		CreateGroupGroupPostError,
		Options<CreateGroupGroupPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createGroupGroupPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteRoomRoomIdDeleteMutation = (
	options?: Partial<Options<DeleteRoomRoomIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteRoomRoomIdDeleteError,
		Options<DeleteRoomRoomIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteRoomRoomIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getRoomByIdRoomIdGetQueryKey = (options: Options<GetRoomByIdRoomIdGetData>) =>
	createQueryKey('getRoomByIdRoomIdGet', options);

export const getRoomByIdRoomIdGetOptions = (options: Options<GetRoomByIdRoomIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getRoomByIdRoomIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getRoomByIdRoomIdGetQueryKey(options),
	});
};

export const patchRoomRoomIdPatchMutation = (
	options?: Partial<Options<PatchRoomRoomIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchRoomRoomIdPatchResponse,
		PatchRoomRoomIdPatchError,
		Options<PatchRoomRoomIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchRoomRoomIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getRoomsRoomGetQueryKey = (options?: Options<GetRoomsRoomGetData>) =>
	createQueryKey('getRoomsRoomGet', options);

export const getRoomsRoomGetOptions = (options?: Options<GetRoomsRoomGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getRoomsRoomGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getRoomsRoomGetQueryKey(options),
	});
};

export const getRoomsRoomGetInfiniteQueryKey = (
	options?: Options<GetRoomsRoomGetData>
): QueryKey<Options<GetRoomsRoomGetData>> => createQueryKey('getRoomsRoomGet', options, true);

export const getRoomsRoomGetInfiniteOptions = (options?: Options<GetRoomsRoomGetData>) => {
	return infiniteQueryOptions<
		GetRoomsRoomGetResponse,
		GetRoomsRoomGetError,
		InfiniteData<GetRoomsRoomGetResponse>,
		QueryKey<Options<GetRoomsRoomGetData>>,
		number | Pick<QueryKey<Options<GetRoomsRoomGetData>>[0], 'body' | 'headers' | 'path' | 'query'>
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetRoomsRoomGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getRoomsRoomGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getRoomsRoomGetInfiniteQueryKey(options),
		}
	);
};

export const createRoomRoomPostQueryKey = (options: Options<CreateRoomRoomPostData>) =>
	createQueryKey('createRoomRoomPost', options);

export const createRoomRoomPostOptions = (options: Options<CreateRoomRoomPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createRoomRoomPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createRoomRoomPostQueryKey(options),
	});
};

export const createRoomRoomPostMutation = (options?: Partial<Options<CreateRoomRoomPostData>>) => {
	const mutationOptions: UseMutationOptions<
		CreateRoomRoomPostResponse,
		CreateRoomRoomPostError,
		Options<CreateRoomRoomPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createRoomRoomPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteEventEventIdDeleteMutation = (
	options?: Partial<Options<DeleteEventEventIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteEventEventIdDeleteError,
		Options<DeleteEventEventIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteEventEventIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getEventByIdEventIdGetQueryKey = (options: Options<GetEventByIdEventIdGetData>) =>
	createQueryKey('getEventByIdEventIdGet', options);

export const getEventByIdEventIdGetOptions = (options: Options<GetEventByIdEventIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getEventByIdEventIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getEventByIdEventIdGetQueryKey(options),
	});
};

export const patchEventEventIdPatchMutation = (
	options?: Partial<Options<PatchEventEventIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchEventEventIdPatchResponse,
		PatchEventEventIdPatchError,
		Options<PatchEventEventIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchEventEventIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getEventsEventGetQueryKey = (options?: Options<GetEventsEventGetData>) =>
	createQueryKey('getEventsEventGet', options);

export const getEventsEventGetOptions = (options?: Options<GetEventsEventGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getEventsEventGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getEventsEventGetQueryKey(options),
	});
};

export const getEventsEventGetInfiniteQueryKey = (
	options?: Options<GetEventsEventGetData>
): QueryKey<Options<GetEventsEventGetData>> => createQueryKey('getEventsEventGet', options, true);

export const getEventsEventGetInfiniteOptions = (options?: Options<GetEventsEventGetData>) => {
	return infiniteQueryOptions<
		GetEventsEventGetResponse,
		GetEventsEventGetError,
		InfiniteData<GetEventsEventGetResponse>,
		QueryKey<Options<GetEventsEventGetData>>,
		| string
		| null
		| Pick<QueryKey<Options<GetEventsEventGetData>>[0], 'body' | 'headers' | 'path' | 'query'>
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetEventsEventGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									start: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getEventsEventGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getEventsEventGetInfiniteQueryKey(options),
		}
	);
};

export const createEventEventPostQueryKey = (options: Options<CreateEventEventPostData>) =>
	createQueryKey('createEventEventPost', options);

export const createEventEventPostOptions = (options: Options<CreateEventEventPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createEventEventPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createEventEventPostQueryKey(options),
	});
};

export const createEventEventPostMutation = (
	options?: Partial<Options<CreateEventEventPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateEventEventPostResponse,
		CreateEventEventPostError,
		Options<CreateEventEventPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createEventEventPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteEventsEventBulkDeleteMutation = (
	options?: Partial<Options<DeleteEventsEventBulkDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteEventsEventBulkDeleteError,
		Options<DeleteEventsEventBulkDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteEventsEventBulkDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const createEventsEventBulkPostQueryKey = (
	options: Options<CreateEventsEventBulkPostData>
) => createQueryKey('createEventsEventBulkPost', options);

export const createEventsEventBulkPostOptions = (
	options: Options<CreateEventsEventBulkPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createEventsEventBulkPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createEventsEventBulkPostQueryKey(options),
	});
};

export const createEventsEventBulkPostMutation = (
	options?: Partial<Options<CreateEventsEventBulkPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateEventsEventBulkPostResponse,
		CreateEventsEventBulkPostError,
		Options<CreateEventsEventBulkPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createEventsEventBulkPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getEventCommentsEventEventIdCommentGetQueryKey = (
	options: Options<GetEventCommentsEventEventIdCommentGetData>
) => createQueryKey('getEventCommentsEventEventIdCommentGet', options);

export const getEventCommentsEventEventIdCommentGetOptions = (
	options: Options<GetEventCommentsEventEventIdCommentGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getEventCommentsEventEventIdCommentGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getEventCommentsEventEventIdCommentGetQueryKey(options),
	});
};

export const getEventCommentsEventEventIdCommentGetInfiniteQueryKey = (
	options: Options<GetEventCommentsEventEventIdCommentGetData>
): QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>> =>
	createQueryKey('getEventCommentsEventEventIdCommentGet', options, true);

export const getEventCommentsEventEventIdCommentGetInfiniteOptions = (
	options: Options<GetEventCommentsEventEventIdCommentGetData>
) => {
	return infiniteQueryOptions<
		GetEventCommentsEventEventIdCommentGetResponse,
		GetEventCommentsEventEventIdCommentGetError,
		InfiniteData<GetEventCommentsEventEventIdCommentGetResponse>,
		QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>>,
		| number
		| Pick<
				QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>>[0],
				'body' | 'headers' | 'path' | 'query'
		  >
	>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<
					QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>>[0],
					'body' | 'headers' | 'path' | 'query'
				> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									offset: pageParam,
								},
							};
				const params = createInfiniteParams(queryKey, page);
				const { data } = await getEventCommentsEventEventIdCommentGet({
					...options,
					...params,
					signal,
					throwOnError: true,
				});
				return data;
			},
			queryKey: getEventCommentsEventEventIdCommentGetInfiniteQueryKey(options),
		}
	);
};

export const commentEventEventEventIdCommentPostQueryKey = (
	options: Options<CommentEventEventEventIdCommentPostData>
) => createQueryKey('commentEventEventEventIdCommentPost', options);

export const commentEventEventEventIdCommentPostOptions = (
	options: Options<CommentEventEventEventIdCommentPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await commentEventEventEventIdCommentPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: commentEventEventEventIdCommentPostQueryKey(options),
	});
};

export const commentEventEventEventIdCommentPostMutation = (
	options?: Partial<Options<CommentEventEventEventIdCommentPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CommentEventEventEventIdCommentPostResponse,
		CommentEventEventEventIdCommentPostError,
		Options<CommentEventEventEventIdCommentPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await commentEventEventEventIdCommentPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteCommentEventEventIdCommentIdDeleteMutation = (
	options?: Partial<Options<DeleteCommentEventEventIdCommentIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteCommentEventEventIdCommentIdDeleteError,
		Options<DeleteCommentEventEventIdCommentIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteCommentEventEventIdCommentIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getCommentEventEventIdCommentIdGetQueryKey = (
	options: Options<GetCommentEventEventIdCommentIdGetData>
) => createQueryKey('getCommentEventEventIdCommentIdGet', options);

export const getCommentEventEventIdCommentIdGetOptions = (
	options: Options<GetCommentEventEventIdCommentIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCommentEventEventIdCommentIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getCommentEventEventIdCommentIdGetQueryKey(options),
	});
};

export const updateCommentEventEventIdCommentIdPatchMutation = (
	options?: Partial<Options<UpdateCommentEventEventIdCommentIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		UpdateCommentEventEventIdCommentIdPatchResponse,
		UpdateCommentEventEventIdCommentIdPatchError,
		Options<UpdateCommentEventEventIdCommentIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateCommentEventEventIdCommentIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getUnreviewedCommentsEventEventIdCommentReviewGetQueryKey = (
	options: Options<GetUnreviewedCommentsEventEventIdCommentReviewGetData>
) => createQueryKey('getUnreviewedCommentsEventEventIdCommentReviewGet', options);

export const getUnreviewedCommentsEventEventIdCommentReviewGetOptions = (
	options: Options<GetUnreviewedCommentsEventEventIdCommentReviewGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getUnreviewedCommentsEventEventIdCommentReviewGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getUnreviewedCommentsEventEventIdCommentReviewGetQueryKey(options),
	});
};

export const reviewCommentEventEventIdCommentIdReviewPostQueryKey = (
	options: Options<ReviewCommentEventEventIdCommentIdReviewPostData>
) => createQueryKey('reviewCommentEventEventIdCommentIdReviewPost', options);

export const reviewCommentEventEventIdCommentIdReviewPostOptions = (
	options: Options<ReviewCommentEventEventIdCommentIdReviewPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await reviewCommentEventEventIdCommentIdReviewPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: reviewCommentEventEventIdCommentIdReviewPostQueryKey(options),
	});
};

export const reviewCommentEventEventIdCommentIdReviewPostMutation = (
	options?: Partial<Options<ReviewCommentEventEventIdCommentIdReviewPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		ReviewCommentEventEventIdCommentIdReviewPostResponse,
		ReviewCommentEventEventIdCommentIdReviewPostError,
		Options<ReviewCommentEventEventIdCommentIdReviewPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await reviewCommentEventEventIdCommentIdReviewPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};
