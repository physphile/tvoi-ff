// This file is auto-generated by @hey-api/openapi-ts

import { type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { commentEventEventEventIdCommentPost, commentLecturerLecturerLecturerIdCommentPost, createEventEventPost, createEventsEventBulkPost, createGroupGroupPost, createLecturerLecturerPost, createRepeatingEventEventRepeatingPost, createRoomRoomPost, deleteCommentEventEventIdCommentIdDelete, deleteCommentLecturerLecturerIdCommentIdDelete, deleteEventEventIdDelete, deleteEventsEventBulkDelete, deleteGroupGroupIdDelete, deleteLecturerLecturerIdDelete, deletePhotoLecturerLecturerIdPhotoIdDelete, deleteRoomRoomIdDelete, getAllLecturerCommentsLecturerLecturerIdCommentGet, getCommentEventEventIdCommentIdGet, getCommentLecturerLecturerIdCommentIdGet, getEventByIdEventIdGet, getEventCommentsEventEventIdCommentGet, getEventsEventGet, getGroupByIdGroupIdGet, getGroupsGroupGet, getLecturerByIdLecturerIdGet, getLecturerPhotosLecturerLecturerIdPhotoGet, getLecturersLecturerGet, getPhotoLecturerLecturerIdPhotoIdGet, getRoomByIdRoomIdGet, getRoomsRoomGet, getUnreviewedCommentsEventEventIdCommentReviewGet, getUnreviewedCommentsLecturerLecturerIdCommentReviewGet, getUnreviewedPhotosLecturerPhotoReviewGet, type Options, patchEventByNameEventPatchNamePatch, patchEventEventIdPatch, patchGroupGroupIdPatch, patchLecturerLecturerIdPatch, patchRoomRoomIdPatch, reviewCommentEventEventIdCommentIdReviewPost, reviewCommentLecturerLecturerIdCommentIdReviewPost, reviewPhotoLecturerPhotoReviewIdPost, updateCommentEventEventIdCommentIdPatch, updateCommentLecturerLecturerLecturerIdCommentIdPatch, uploadPhotoLecturerLecturerIdPhotoPost } from '../sdk.gen';
import type { CommentEventEventEventIdCommentPostData, CommentEventEventEventIdCommentPostError, CommentEventEventEventIdCommentPostResponse, CommentLecturerLecturerLecturerIdCommentPostData, CommentLecturerLecturerLecturerIdCommentPostError, CommentLecturerLecturerLecturerIdCommentPostResponse, CreateEventEventPostData, CreateEventEventPostError, CreateEventEventPostResponse, CreateEventsEventBulkPostData, CreateEventsEventBulkPostError, CreateEventsEventBulkPostResponse, CreateGroupGroupPostData, CreateGroupGroupPostError, CreateGroupGroupPostResponse, CreateLecturerLecturerPostData, CreateLecturerLecturerPostError, CreateLecturerLecturerPostResponse, CreateRepeatingEventEventRepeatingPostData, CreateRepeatingEventEventRepeatingPostError, CreateRepeatingEventEventRepeatingPostResponse, CreateRoomRoomPostData, CreateRoomRoomPostError, CreateRoomRoomPostResponse, DeleteCommentEventEventIdCommentIdDeleteData, DeleteCommentEventEventIdCommentIdDeleteError, DeleteCommentLecturerLecturerIdCommentIdDeleteData, DeleteCommentLecturerLecturerIdCommentIdDeleteError, DeleteEventEventIdDeleteData, DeleteEventEventIdDeleteError, DeleteEventsEventBulkDeleteData, DeleteEventsEventBulkDeleteError, DeleteGroupGroupIdDeleteData, DeleteGroupGroupIdDeleteError, DeleteLecturerLecturerIdDeleteData, DeleteLecturerLecturerIdDeleteError, DeletePhotoLecturerLecturerIdPhotoIdDeleteData, DeletePhotoLecturerLecturerIdPhotoIdDeleteError, DeleteRoomRoomIdDeleteData, DeleteRoomRoomIdDeleteError, GetAllLecturerCommentsLecturerLecturerIdCommentGetData, GetAllLecturerCommentsLecturerLecturerIdCommentGetError, GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse, GetCommentEventEventIdCommentIdGetData, GetCommentLecturerLecturerIdCommentIdGetData, GetEventByIdEventIdGetData, GetEventCommentsEventEventIdCommentGetData, GetEventCommentsEventEventIdCommentGetError, GetEventCommentsEventEventIdCommentGetResponse, GetEventsEventGetData, GetEventsEventGetError, GetEventsEventGetResponse, GetGroupByIdGroupIdGetData, GetGroupsGroupGetData, GetGroupsGroupGetError, GetGroupsGroupGetResponse, GetLecturerByIdLecturerIdGetData, GetLecturerPhotosLecturerLecturerIdPhotoGetData, GetLecturerPhotosLecturerLecturerIdPhotoGetError, GetLecturerPhotosLecturerLecturerIdPhotoGetResponse, GetLecturersLecturerGetData, GetLecturersLecturerGetError, GetLecturersLecturerGetResponse, GetPhotoLecturerLecturerIdPhotoIdGetData, GetRoomByIdRoomIdGetData, GetRoomsRoomGetData, GetRoomsRoomGetError, GetRoomsRoomGetResponse, GetUnreviewedCommentsEventEventIdCommentReviewGetData, GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData, GetUnreviewedPhotosLecturerPhotoReviewGetData, GetUnreviewedPhotosLecturerPhotoReviewGetError, GetUnreviewedPhotosLecturerPhotoReviewGetResponse, PatchEventByNameEventPatchNamePatchData, PatchEventByNameEventPatchNamePatchError, PatchEventByNameEventPatchNamePatchResponse, PatchEventEventIdPatchData, PatchEventEventIdPatchError, PatchEventEventIdPatchResponse, PatchGroupGroupIdPatchData, PatchGroupGroupIdPatchError, PatchGroupGroupIdPatchResponse, PatchLecturerLecturerIdPatchData, PatchLecturerLecturerIdPatchError, PatchLecturerLecturerIdPatchResponse, PatchRoomRoomIdPatchData, PatchRoomRoomIdPatchError, PatchRoomRoomIdPatchResponse, ReviewCommentEventEventIdCommentIdReviewPostData, ReviewCommentEventEventIdCommentIdReviewPostError, ReviewCommentEventEventIdCommentIdReviewPostResponse, ReviewCommentLecturerLecturerIdCommentIdReviewPostData, ReviewCommentLecturerLecturerIdCommentIdReviewPostError, ReviewCommentLecturerLecturerIdCommentIdReviewPostResponse, ReviewPhotoLecturerPhotoReviewIdPostData, ReviewPhotoLecturerPhotoReviewIdPostError, ReviewPhotoLecturerPhotoReviewIdPostResponse, UpdateCommentEventEventIdCommentIdPatchData, UpdateCommentEventEventIdCommentIdPatchError, UpdateCommentEventEventIdCommentIdPatchResponse, UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData, UpdateCommentLecturerLecturerLecturerIdCommentIdPatchError, UpdateCommentLecturerLecturerLecturerIdCommentIdPatchResponse, UploadPhotoLecturerLecturerIdPhotoPostData, UploadPhotoLecturerLecturerIdPhotoPostError, UploadPhotoLecturerLecturerIdPhotoPostResponse } from '../types.gen';

/**
 * Delete Lecturer
 */
export const deleteLecturerLecturerIdDeleteMutation = (options?: Partial<Options<DeleteLecturerLecturerIdDeleteData>>): UseMutationOptions<unknown, DeleteLecturerLecturerIdDeleteError, Options<DeleteLecturerLecturerIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteLecturerLecturerIdDeleteError, Options<DeleteLecturerLecturerIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteLecturerLecturerIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getLecturerByIdLecturerIdGetQueryKey = (options: Options<GetLecturerByIdLecturerIdGetData>) => createQueryKey('getLecturerByIdLecturerIdGet', options);

/**
 * Get Lecturer By Id
 */
export const getLecturerByIdLecturerIdGetOptions = (options: Options<GetLecturerByIdLecturerIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLecturerByIdLecturerIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLecturerByIdLecturerIdGetQueryKey(options)
    });
};

/**
 * Patch Lecturer
 */
export const patchLecturerLecturerIdPatchMutation = (options?: Partial<Options<PatchLecturerLecturerIdPatchData>>): UseMutationOptions<PatchLecturerLecturerIdPatchResponse, PatchLecturerLecturerIdPatchError, Options<PatchLecturerLecturerIdPatchData>> => {
    const mutationOptions: UseMutationOptions<PatchLecturerLecturerIdPatchResponse, PatchLecturerLecturerIdPatchError, Options<PatchLecturerLecturerIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchLecturerLecturerIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLecturersLecturerGetQueryKey = (options?: Options<GetLecturersLecturerGetData>) => createQueryKey('getLecturersLecturerGet', options);

/**
 * Get Lecturers
 */
export const getLecturersLecturerGetOptions = (options?: Options<GetLecturersLecturerGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLecturersLecturerGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLecturersLecturerGetQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getLecturersLecturerGetInfiniteQueryKey = (options?: Options<GetLecturersLecturerGetData>): QueryKey<Options<GetLecturersLecturerGetData>> => createQueryKey('getLecturersLecturerGet', options, true);

/**
 * Get Lecturers
 */
export const getLecturersLecturerGetInfiniteOptions = (options?: Options<GetLecturersLecturerGetData>) => {
    return infiniteQueryOptions<GetLecturersLecturerGetResponse, GetLecturersLecturerGetError, InfiniteData<GetLecturersLecturerGetResponse>, QueryKey<Options<GetLecturersLecturerGetData>>, number | Pick<QueryKey<Options<GetLecturersLecturerGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetLecturersLecturerGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getLecturersLecturerGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLecturersLecturerGetInfiniteQueryKey(options)
    });
};

/**
 * Create Lecturer
 */
export const createLecturerLecturerPostMutation = (options?: Partial<Options<CreateLecturerLecturerPostData>>): UseMutationOptions<CreateLecturerLecturerPostResponse, CreateLecturerLecturerPostError, Options<CreateLecturerLecturerPostData>> => {
    const mutationOptions: UseMutationOptions<CreateLecturerLecturerPostResponse, CreateLecturerLecturerPostError, Options<CreateLecturerLecturerPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createLecturerLecturerPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllLecturerCommentsLecturerLecturerIdCommentGetQueryKey = (options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>) => createQueryKey('getAllLecturerCommentsLecturerLecturerIdCommentGet', options);

/**
 * Get All Lecturer Comments
 *
 * @deprecated
 */
export const getAllLecturerCommentsLecturerLecturerIdCommentGetOptions = (options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllLecturerCommentsLecturerLecturerIdCommentGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllLecturerCommentsLecturerLecturerIdCommentGetQueryKey(options)
    });
};

export const getAllLecturerCommentsLecturerLecturerIdCommentGetInfiniteQueryKey = (options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>): QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>> => createQueryKey('getAllLecturerCommentsLecturerLecturerIdCommentGet', options, true);

/**
 * Get All Lecturer Comments
 *
 * @deprecated
 */
export const getAllLecturerCommentsLecturerLecturerIdCommentGetInfiniteOptions = (options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>) => {
    return infiniteQueryOptions<GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse, GetAllLecturerCommentsLecturerLecturerIdCommentGetError, InfiniteData<GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse>, QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>>, number | Pick<QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAllLecturerCommentsLecturerLecturerIdCommentGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllLecturerCommentsLecturerLecturerIdCommentGetInfiniteQueryKey(options)
    });
};

/**
 * Comment Lecturer
 *
 * @deprecated
 */
export const commentLecturerLecturerLecturerIdCommentPostMutation = (options?: Partial<Options<CommentLecturerLecturerLecturerIdCommentPostData>>): UseMutationOptions<CommentLecturerLecturerLecturerIdCommentPostResponse, CommentLecturerLecturerLecturerIdCommentPostError, Options<CommentLecturerLecturerLecturerIdCommentPostData>> => {
    const mutationOptions: UseMutationOptions<CommentLecturerLecturerLecturerIdCommentPostResponse, CommentLecturerLecturerLecturerIdCommentPostError, Options<CommentLecturerLecturerLecturerIdCommentPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await commentLecturerLecturerLecturerIdCommentPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Comment
 *
 * @deprecated
 */
export const deleteCommentLecturerLecturerIdCommentIdDeleteMutation = (options?: Partial<Options<DeleteCommentLecturerLecturerIdCommentIdDeleteData>>): UseMutationOptions<unknown, DeleteCommentLecturerLecturerIdCommentIdDeleteError, Options<DeleteCommentLecturerLecturerIdCommentIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteCommentLecturerLecturerIdCommentIdDeleteError, Options<DeleteCommentLecturerLecturerIdCommentIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteCommentLecturerLecturerIdCommentIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCommentLecturerLecturerIdCommentIdGetQueryKey = (options: Options<GetCommentLecturerLecturerIdCommentIdGetData>) => createQueryKey('getCommentLecturerLecturerIdCommentIdGet', options);

/**
 * Get Comment
 *
 * @deprecated
 */
export const getCommentLecturerLecturerIdCommentIdGetOptions = (options: Options<GetCommentLecturerLecturerIdCommentIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommentLecturerLecturerIdCommentIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommentLecturerLecturerIdCommentIdGetQueryKey(options)
    });
};

/**
 * Update Comment Lecturer
 *
 * @deprecated
 */
export const updateCommentLecturerLecturerLecturerIdCommentIdPatchMutation = (options?: Partial<Options<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData>>): UseMutationOptions<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchResponse, UpdateCommentLecturerLecturerLecturerIdCommentIdPatchError, Options<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchResponse, UpdateCommentLecturerLecturerLecturerIdCommentIdPatchError, Options<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateCommentLecturerLecturerLecturerIdCommentIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUnreviewedCommentsLecturerLecturerIdCommentReviewGetQueryKey = (options: Options<GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData>) => createQueryKey('getUnreviewedCommentsLecturerLecturerIdCommentReviewGet', options);

/**
 * Get Unreviewed Comments
 *
 * @deprecated
 */
export const getUnreviewedCommentsLecturerLecturerIdCommentReviewGetOptions = (options: Options<GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUnreviewedCommentsLecturerLecturerIdCommentReviewGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUnreviewedCommentsLecturerLecturerIdCommentReviewGetQueryKey(options)
    });
};

/**
 * Review Comment
 *
 * @deprecated
 */
export const reviewCommentLecturerLecturerIdCommentIdReviewPostMutation = (options?: Partial<Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData>>): UseMutationOptions<ReviewCommentLecturerLecturerIdCommentIdReviewPostResponse, ReviewCommentLecturerLecturerIdCommentIdReviewPostError, Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData>> => {
    const mutationOptions: UseMutationOptions<ReviewCommentLecturerLecturerIdCommentIdReviewPostResponse, ReviewCommentLecturerLecturerIdCommentIdReviewPostError, Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await reviewCommentLecturerLecturerIdCommentIdReviewPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLecturerPhotosLecturerLecturerIdPhotoGetQueryKey = (options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>) => createQueryKey('getLecturerPhotosLecturerLecturerIdPhotoGet', options);

/**
 * Get Lecturer Photos
 */
export const getLecturerPhotosLecturerLecturerIdPhotoGetOptions = (options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLecturerPhotosLecturerLecturerIdPhotoGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLecturerPhotosLecturerLecturerIdPhotoGetQueryKey(options)
    });
};

export const getLecturerPhotosLecturerLecturerIdPhotoGetInfiniteQueryKey = (options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>): QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>> => createQueryKey('getLecturerPhotosLecturerLecturerIdPhotoGet', options, true);

/**
 * Get Lecturer Photos
 */
export const getLecturerPhotosLecturerLecturerIdPhotoGetInfiniteOptions = (options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>) => {
    return infiniteQueryOptions<GetLecturerPhotosLecturerLecturerIdPhotoGetResponse, GetLecturerPhotosLecturerLecturerIdPhotoGetError, InfiniteData<GetLecturerPhotosLecturerLecturerIdPhotoGetResponse>, QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>>, number | Pick<QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getLecturerPhotosLecturerLecturerIdPhotoGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLecturerPhotosLecturerLecturerIdPhotoGetInfiniteQueryKey(options)
    });
};

/**
 * Upload Photo
 *
 * Загрузить фотографию преподавателя из локального файла
 *
 * Пример загрузки файла на питоне
 * ```python
 * lecturer_id = 123
 * root = 'https://timetable.api.test.profcomff.com'
 *
 * with open('./x.png', 'rb') as f:
 * data = f.read()
 * requests.post(url=f'{root}/timetable/lecturer/{lecturer_id}/photo', files={"photo": data})
 * ```
 */
export const uploadPhotoLecturerLecturerIdPhotoPostMutation = (options?: Partial<Options<UploadPhotoLecturerLecturerIdPhotoPostData>>): UseMutationOptions<UploadPhotoLecturerLecturerIdPhotoPostResponse, UploadPhotoLecturerLecturerIdPhotoPostError, Options<UploadPhotoLecturerLecturerIdPhotoPostData>> => {
    const mutationOptions: UseMutationOptions<UploadPhotoLecturerLecturerIdPhotoPostResponse, UploadPhotoLecturerLecturerIdPhotoPostError, Options<UploadPhotoLecturerLecturerIdPhotoPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await uploadPhotoLecturerLecturerIdPhotoPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Photo
 */
export const deletePhotoLecturerLecturerIdPhotoIdDeleteMutation = (options?: Partial<Options<DeletePhotoLecturerLecturerIdPhotoIdDeleteData>>): UseMutationOptions<unknown, DeletePhotoLecturerLecturerIdPhotoIdDeleteError, Options<DeletePhotoLecturerLecturerIdPhotoIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeletePhotoLecturerLecturerIdPhotoIdDeleteError, Options<DeletePhotoLecturerLecturerIdPhotoIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deletePhotoLecturerLecturerIdPhotoIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPhotoLecturerLecturerIdPhotoIdGetQueryKey = (options: Options<GetPhotoLecturerLecturerIdPhotoIdGetData>) => createQueryKey('getPhotoLecturerLecturerIdPhotoIdGet', options);

/**
 * Get Photo
 */
export const getPhotoLecturerLecturerIdPhotoIdGetOptions = (options: Options<GetPhotoLecturerLecturerIdPhotoIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPhotoLecturerLecturerIdPhotoIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPhotoLecturerLecturerIdPhotoIdGetQueryKey(options)
    });
};

export const getUnreviewedPhotosLecturerPhotoReviewGetQueryKey = (options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>) => createQueryKey('getUnreviewedPhotosLecturerPhotoReviewGet', options);

/**
 * Get Unreviewed Photos
 */
export const getUnreviewedPhotosLecturerPhotoReviewGetOptions = (options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUnreviewedPhotosLecturerPhotoReviewGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUnreviewedPhotosLecturerPhotoReviewGetQueryKey(options)
    });
};

export const getUnreviewedPhotosLecturerPhotoReviewGetInfiniteQueryKey = (options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>): QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>> => createQueryKey('getUnreviewedPhotosLecturerPhotoReviewGet', options, true);

/**
 * Get Unreviewed Photos
 */
export const getUnreviewedPhotosLecturerPhotoReviewGetInfiniteOptions = (options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>) => {
    return infiniteQueryOptions<GetUnreviewedPhotosLecturerPhotoReviewGetResponse, GetUnreviewedPhotosLecturerPhotoReviewGetError, InfiniteData<GetUnreviewedPhotosLecturerPhotoReviewGetResponse>, QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>>, number | Pick<QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetUnreviewedPhotosLecturerPhotoReviewGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getUnreviewedPhotosLecturerPhotoReviewGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUnreviewedPhotosLecturerPhotoReviewGetInfiniteQueryKey(options)
    });
};

/**
 * Review Photo
 */
export const reviewPhotoLecturerPhotoReviewIdPostMutation = (options?: Partial<Options<ReviewPhotoLecturerPhotoReviewIdPostData>>): UseMutationOptions<ReviewPhotoLecturerPhotoReviewIdPostResponse, ReviewPhotoLecturerPhotoReviewIdPostError, Options<ReviewPhotoLecturerPhotoReviewIdPostData>> => {
    const mutationOptions: UseMutationOptions<ReviewPhotoLecturerPhotoReviewIdPostResponse, ReviewPhotoLecturerPhotoReviewIdPostError, Options<ReviewPhotoLecturerPhotoReviewIdPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await reviewPhotoLecturerPhotoReviewIdPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Group
 */
export const deleteGroupGroupIdDeleteMutation = (options?: Partial<Options<DeleteGroupGroupIdDeleteData>>): UseMutationOptions<unknown, DeleteGroupGroupIdDeleteError, Options<DeleteGroupGroupIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteGroupGroupIdDeleteError, Options<DeleteGroupGroupIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteGroupGroupIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getGroupByIdGroupIdGetQueryKey = (options: Options<GetGroupByIdGroupIdGetData>) => createQueryKey('getGroupByIdGroupIdGet', options);

/**
 * Get Group By Id
 */
export const getGroupByIdGroupIdGetOptions = (options: Options<GetGroupByIdGroupIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGroupByIdGroupIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getGroupByIdGroupIdGetQueryKey(options)
    });
};

/**
 * Patch Group
 */
export const patchGroupGroupIdPatchMutation = (options?: Partial<Options<PatchGroupGroupIdPatchData>>): UseMutationOptions<PatchGroupGroupIdPatchResponse, PatchGroupGroupIdPatchError, Options<PatchGroupGroupIdPatchData>> => {
    const mutationOptions: UseMutationOptions<PatchGroupGroupIdPatchResponse, PatchGroupGroupIdPatchError, Options<PatchGroupGroupIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchGroupGroupIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getGroupsGroupGetQueryKey = (options?: Options<GetGroupsGroupGetData>) => createQueryKey('getGroupsGroupGet', options);

/**
 * Get Groups
 */
export const getGroupsGroupGetOptions = (options?: Options<GetGroupsGroupGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGroupsGroupGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getGroupsGroupGetQueryKey(options)
    });
};

export const getGroupsGroupGetInfiniteQueryKey = (options?: Options<GetGroupsGroupGetData>): QueryKey<Options<GetGroupsGroupGetData>> => createQueryKey('getGroupsGroupGet', options, true);

/**
 * Get Groups
 */
export const getGroupsGroupGetInfiniteOptions = (options?: Options<GetGroupsGroupGetData>) => {
    return infiniteQueryOptions<GetGroupsGroupGetResponse, GetGroupsGroupGetError, InfiniteData<GetGroupsGroupGetResponse>, QueryKey<Options<GetGroupsGroupGetData>>, number | Pick<QueryKey<Options<GetGroupsGroupGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetGroupsGroupGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getGroupsGroupGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getGroupsGroupGetInfiniteQueryKey(options)
    });
};

/**
 * Create Group
 */
export const createGroupGroupPostMutation = (options?: Partial<Options<CreateGroupGroupPostData>>): UseMutationOptions<CreateGroupGroupPostResponse, CreateGroupGroupPostError, Options<CreateGroupGroupPostData>> => {
    const mutationOptions: UseMutationOptions<CreateGroupGroupPostResponse, CreateGroupGroupPostError, Options<CreateGroupGroupPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createGroupGroupPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Room
 */
export const deleteRoomRoomIdDeleteMutation = (options?: Partial<Options<DeleteRoomRoomIdDeleteData>>): UseMutationOptions<unknown, DeleteRoomRoomIdDeleteError, Options<DeleteRoomRoomIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteRoomRoomIdDeleteError, Options<DeleteRoomRoomIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteRoomRoomIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRoomByIdRoomIdGetQueryKey = (options: Options<GetRoomByIdRoomIdGetData>) => createQueryKey('getRoomByIdRoomIdGet', options);

/**
 * Get Room By Id
 */
export const getRoomByIdRoomIdGetOptions = (options: Options<GetRoomByIdRoomIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRoomByIdRoomIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRoomByIdRoomIdGetQueryKey(options)
    });
};

/**
 * Patch Room
 */
export const patchRoomRoomIdPatchMutation = (options?: Partial<Options<PatchRoomRoomIdPatchData>>): UseMutationOptions<PatchRoomRoomIdPatchResponse, PatchRoomRoomIdPatchError, Options<PatchRoomRoomIdPatchData>> => {
    const mutationOptions: UseMutationOptions<PatchRoomRoomIdPatchResponse, PatchRoomRoomIdPatchError, Options<PatchRoomRoomIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchRoomRoomIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRoomsRoomGetQueryKey = (options?: Options<GetRoomsRoomGetData>) => createQueryKey('getRoomsRoomGet', options);

/**
 * Get Rooms
 */
export const getRoomsRoomGetOptions = (options?: Options<GetRoomsRoomGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRoomsRoomGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRoomsRoomGetQueryKey(options)
    });
};

export const getRoomsRoomGetInfiniteQueryKey = (options?: Options<GetRoomsRoomGetData>): QueryKey<Options<GetRoomsRoomGetData>> => createQueryKey('getRoomsRoomGet', options, true);

/**
 * Get Rooms
 */
export const getRoomsRoomGetInfiniteOptions = (options?: Options<GetRoomsRoomGetData>) => {
    return infiniteQueryOptions<GetRoomsRoomGetResponse, GetRoomsRoomGetError, InfiniteData<GetRoomsRoomGetResponse>, QueryKey<Options<GetRoomsRoomGetData>>, number | Pick<QueryKey<Options<GetRoomsRoomGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetRoomsRoomGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getRoomsRoomGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRoomsRoomGetInfiniteQueryKey(options)
    });
};

/**
 * Create Room
 */
export const createRoomRoomPostMutation = (options?: Partial<Options<CreateRoomRoomPostData>>): UseMutationOptions<CreateRoomRoomPostResponse, CreateRoomRoomPostError, Options<CreateRoomRoomPostData>> => {
    const mutationOptions: UseMutationOptions<CreateRoomRoomPostResponse, CreateRoomRoomPostError, Options<CreateRoomRoomPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createRoomRoomPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Event
 */
export const deleteEventEventIdDeleteMutation = (options?: Partial<Options<DeleteEventEventIdDeleteData>>): UseMutationOptions<unknown, DeleteEventEventIdDeleteError, Options<DeleteEventEventIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteEventEventIdDeleteError, Options<DeleteEventEventIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteEventEventIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEventByIdEventIdGetQueryKey = (options: Options<GetEventByIdEventIdGetData>) => createQueryKey('getEventByIdEventIdGet', options);

/**
 * Get Event By Id
 */
export const getEventByIdEventIdGetOptions = (options: Options<GetEventByIdEventIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEventByIdEventIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventByIdEventIdGetQueryKey(options)
    });
};

/**
 * Patch Event
 */
export const patchEventEventIdPatchMutation = (options?: Partial<Options<PatchEventEventIdPatchData>>): UseMutationOptions<PatchEventEventIdPatchResponse, PatchEventEventIdPatchError, Options<PatchEventEventIdPatchData>> => {
    const mutationOptions: UseMutationOptions<PatchEventEventIdPatchResponse, PatchEventEventIdPatchError, Options<PatchEventEventIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchEventEventIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEventsEventGetQueryKey = (options?: Options<GetEventsEventGetData>) => createQueryKey('getEventsEventGet', options);

/**
 * Get Events
 */
export const getEventsEventGetOptions = (options?: Options<GetEventsEventGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEventsEventGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventsEventGetQueryKey(options)
    });
};

export const getEventsEventGetInfiniteQueryKey = (options?: Options<GetEventsEventGetData>): QueryKey<Options<GetEventsEventGetData>> => createQueryKey('getEventsEventGet', options, true);

/**
 * Get Events
 */
export const getEventsEventGetInfiniteOptions = (options?: Options<GetEventsEventGetData>) => {
    return infiniteQueryOptions<GetEventsEventGetResponse, GetEventsEventGetError, InfiniteData<GetEventsEventGetResponse>, QueryKey<Options<GetEventsEventGetData>>, string | null | Pick<QueryKey<Options<GetEventsEventGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetEventsEventGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    start: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getEventsEventGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventsEventGetInfiniteQueryKey(options)
    });
};

/**
 * Create Event
 */
export const createEventEventPostMutation = (options?: Partial<Options<CreateEventEventPostData>>): UseMutationOptions<CreateEventEventPostResponse, CreateEventEventPostError, Options<CreateEventEventPostData>> => {
    const mutationOptions: UseMutationOptions<CreateEventEventPostResponse, CreateEventEventPostError, Options<CreateEventEventPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createEventEventPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create Repeating Event
 */
export const createRepeatingEventEventRepeatingPostMutation = (options?: Partial<Options<CreateRepeatingEventEventRepeatingPostData>>): UseMutationOptions<CreateRepeatingEventEventRepeatingPostResponse, CreateRepeatingEventEventRepeatingPostError, Options<CreateRepeatingEventEventRepeatingPostData>> => {
    const mutationOptions: UseMutationOptions<CreateRepeatingEventEventRepeatingPostResponse, CreateRepeatingEventEventRepeatingPostError, Options<CreateRepeatingEventEventRepeatingPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createRepeatingEventEventRepeatingPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Events
 */
export const deleteEventsEventBulkDeleteMutation = (options?: Partial<Options<DeleteEventsEventBulkDeleteData>>): UseMutationOptions<unknown, DeleteEventsEventBulkDeleteError, Options<DeleteEventsEventBulkDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteEventsEventBulkDeleteError, Options<DeleteEventsEventBulkDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteEventsEventBulkDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create Events
 */
export const createEventsEventBulkPostMutation = (options?: Partial<Options<CreateEventsEventBulkPostData>>): UseMutationOptions<CreateEventsEventBulkPostResponse, CreateEventsEventBulkPostError, Options<CreateEventsEventBulkPostData>> => {
    const mutationOptions: UseMutationOptions<CreateEventsEventBulkPostResponse, CreateEventsEventBulkPostError, Options<CreateEventsEventBulkPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createEventsEventBulkPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Batch update events by name
 */
export const patchEventByNameEventPatchNamePatchMutation = (options?: Partial<Options<PatchEventByNameEventPatchNamePatchData>>): UseMutationOptions<PatchEventByNameEventPatchNamePatchResponse, PatchEventByNameEventPatchNamePatchError, Options<PatchEventByNameEventPatchNamePatchData>> => {
    const mutationOptions: UseMutationOptions<PatchEventByNameEventPatchNamePatchResponse, PatchEventByNameEventPatchNamePatchError, Options<PatchEventByNameEventPatchNamePatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchEventByNameEventPatchNamePatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEventCommentsEventEventIdCommentGetQueryKey = (options: Options<GetEventCommentsEventEventIdCommentGetData>) => createQueryKey('getEventCommentsEventEventIdCommentGet', options);

/**
 * Get Event Comments
 */
export const getEventCommentsEventEventIdCommentGetOptions = (options: Options<GetEventCommentsEventEventIdCommentGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEventCommentsEventEventIdCommentGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventCommentsEventEventIdCommentGetQueryKey(options)
    });
};

export const getEventCommentsEventEventIdCommentGetInfiniteQueryKey = (options: Options<GetEventCommentsEventEventIdCommentGetData>): QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>> => createQueryKey('getEventCommentsEventEventIdCommentGet', options, true);

/**
 * Get Event Comments
 */
export const getEventCommentsEventEventIdCommentGetInfiniteOptions = (options: Options<GetEventCommentsEventEventIdCommentGetData>) => {
    return infiniteQueryOptions<GetEventCommentsEventEventIdCommentGetResponse, GetEventCommentsEventEventIdCommentGetError, InfiniteData<GetEventCommentsEventEventIdCommentGetResponse>, QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>>, number | Pick<QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetEventCommentsEventEventIdCommentGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getEventCommentsEventEventIdCommentGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEventCommentsEventEventIdCommentGetInfiniteQueryKey(options)
    });
};

/**
 * Comment Event
 */
export const commentEventEventEventIdCommentPostMutation = (options?: Partial<Options<CommentEventEventEventIdCommentPostData>>): UseMutationOptions<CommentEventEventEventIdCommentPostResponse, CommentEventEventEventIdCommentPostError, Options<CommentEventEventEventIdCommentPostData>> => {
    const mutationOptions: UseMutationOptions<CommentEventEventEventIdCommentPostResponse, CommentEventEventEventIdCommentPostError, Options<CommentEventEventEventIdCommentPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await commentEventEventEventIdCommentPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Comment
 */
export const deleteCommentEventEventIdCommentIdDeleteMutation = (options?: Partial<Options<DeleteCommentEventEventIdCommentIdDeleteData>>): UseMutationOptions<unknown, DeleteCommentEventEventIdCommentIdDeleteError, Options<DeleteCommentEventEventIdCommentIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteCommentEventEventIdCommentIdDeleteError, Options<DeleteCommentEventEventIdCommentIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteCommentEventEventIdCommentIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCommentEventEventIdCommentIdGetQueryKey = (options: Options<GetCommentEventEventIdCommentIdGetData>) => createQueryKey('getCommentEventEventIdCommentIdGet', options);

/**
 * Get Comment
 */
export const getCommentEventEventIdCommentIdGetOptions = (options: Options<GetCommentEventEventIdCommentIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommentEventEventIdCommentIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommentEventEventIdCommentIdGetQueryKey(options)
    });
};

/**
 * Update Comment
 */
export const updateCommentEventEventIdCommentIdPatchMutation = (options?: Partial<Options<UpdateCommentEventEventIdCommentIdPatchData>>): UseMutationOptions<UpdateCommentEventEventIdCommentIdPatchResponse, UpdateCommentEventEventIdCommentIdPatchError, Options<UpdateCommentEventEventIdCommentIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateCommentEventEventIdCommentIdPatchResponse, UpdateCommentEventEventIdCommentIdPatchError, Options<UpdateCommentEventEventIdCommentIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateCommentEventEventIdCommentIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUnreviewedCommentsEventEventIdCommentReviewGetQueryKey = (options: Options<GetUnreviewedCommentsEventEventIdCommentReviewGetData>) => createQueryKey('getUnreviewedCommentsEventEventIdCommentReviewGet', options);

/**
 * Get Unreviewed Comments
 */
export const getUnreviewedCommentsEventEventIdCommentReviewGetOptions = (options: Options<GetUnreviewedCommentsEventEventIdCommentReviewGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUnreviewedCommentsEventEventIdCommentReviewGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUnreviewedCommentsEventEventIdCommentReviewGetQueryKey(options)
    });
};

/**
 * Review Comment
 */
export const reviewCommentEventEventIdCommentIdReviewPostMutation = (options?: Partial<Options<ReviewCommentEventEventIdCommentIdReviewPostData>>): UseMutationOptions<ReviewCommentEventEventIdCommentIdReviewPostResponse, ReviewCommentEventEventIdCommentIdReviewPostError, Options<ReviewCommentEventEventIdCommentIdReviewPostData>> => {
    const mutationOptions: UseMutationOptions<ReviewCommentEventEventIdCommentIdReviewPostResponse, ReviewCommentEventEventIdCommentIdReviewPostError, Options<ReviewCommentEventEventIdCommentIdReviewPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await reviewCommentEventEventIdCommentIdReviewPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
