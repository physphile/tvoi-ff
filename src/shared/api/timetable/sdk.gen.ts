// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	type Options as ClientOptions,
	type TDataShape,
	formDataBodySerializer,
} from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
	CommentEventEventEventIdCommentPostData,
	CommentEventEventEventIdCommentPostError,
	CommentEventEventEventIdCommentPostResponse,
	CommentLecturerLecturerLecturerIdCommentPostData,
	CommentLecturerLecturerLecturerIdCommentPostError,
	CommentLecturerLecturerLecturerIdCommentPostResponse,
	CreateEventEventPostData,
	CreateEventEventPostError,
	CreateEventEventPostResponse,
	CreateEventsEventBulkPostData,
	CreateEventsEventBulkPostError,
	CreateEventsEventBulkPostResponse,
	CreateGroupGroupPostData,
	CreateGroupGroupPostError,
	CreateGroupGroupPostResponse,
	CreateLecturerLecturerPostData,
	CreateLecturerLecturerPostError,
	CreateLecturerLecturerPostResponse,
	CreateRoomRoomPostData,
	CreateRoomRoomPostError,
	CreateRoomRoomPostResponse,
	DeleteCommentEventEventIdCommentIdDeleteData,
	DeleteCommentEventEventIdCommentIdDeleteError,
	DeleteCommentLecturerLecturerIdCommentIdDeleteData,
	DeleteCommentLecturerLecturerIdCommentIdDeleteError,
	DeleteEventEventIdDeleteData,
	DeleteEventEventIdDeleteError,
	DeleteEventsEventBulkDeleteData,
	DeleteEventsEventBulkDeleteError,
	DeleteGroupGroupIdDeleteData,
	DeleteGroupGroupIdDeleteError,
	DeleteLecturerLecturerIdDeleteData,
	DeleteLecturerLecturerIdDeleteError,
	DeletePhotoLecturerLecturerIdPhotoIdDeleteData,
	DeletePhotoLecturerLecturerIdPhotoIdDeleteError,
	DeleteRoomRoomIdDeleteData,
	DeleteRoomRoomIdDeleteError,
	GetAllLecturerCommentsLecturerLecturerIdCommentGetData,
	GetAllLecturerCommentsLecturerLecturerIdCommentGetError,
	GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse,
	GetCommentEventEventIdCommentIdGetData,
	GetCommentEventEventIdCommentIdGetError,
	GetCommentEventEventIdCommentIdGetResponse,
	GetCommentLecturerLecturerIdCommentIdGetData,
	GetCommentLecturerLecturerIdCommentIdGetError,
	GetCommentLecturerLecturerIdCommentIdGetResponse,
	GetEventByIdEventIdGetData,
	GetEventByIdEventIdGetError,
	GetEventByIdEventIdGetResponse,
	GetEventCommentsEventEventIdCommentGetData,
	GetEventCommentsEventEventIdCommentGetError,
	GetEventCommentsEventEventIdCommentGetResponse,
	GetEventsEventGetData,
	GetEventsEventGetError,
	GetEventsEventGetResponse,
	GetGroupByIdGroupIdGetData,
	GetGroupByIdGroupIdGetError,
	GetGroupByIdGroupIdGetResponse,
	GetGroupsGroupGetData,
	GetGroupsGroupGetError,
	GetGroupsGroupGetResponse,
	GetLecturerByIdLecturerIdGetData,
	GetLecturerByIdLecturerIdGetError,
	GetLecturerByIdLecturerIdGetResponse,
	GetLecturerPhotosLecturerLecturerIdPhotoGetData,
	GetLecturerPhotosLecturerLecturerIdPhotoGetError,
	GetLecturerPhotosLecturerLecturerIdPhotoGetResponse,
	GetLecturersLecturerGetData,
	GetLecturersLecturerGetError,
	GetLecturersLecturerGetResponse,
	GetPhotoLecturerLecturerIdPhotoIdGetData,
	GetPhotoLecturerLecturerIdPhotoIdGetError,
	GetPhotoLecturerLecturerIdPhotoIdGetResponse,
	GetRoomByIdRoomIdGetData,
	GetRoomByIdRoomIdGetError,
	GetRoomByIdRoomIdGetResponse,
	GetRoomsRoomGetData,
	GetRoomsRoomGetError,
	GetRoomsRoomGetResponse,
	GetUnreviewedCommentsEventEventIdCommentReviewGetData,
	GetUnreviewedCommentsEventEventIdCommentReviewGetError,
	GetUnreviewedCommentsEventEventIdCommentReviewGetResponse,
	GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData,
	GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetError,
	GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetResponse,
	GetUnreviewedPhotosLecturerPhotoReviewGetData,
	GetUnreviewedPhotosLecturerPhotoReviewGetError,
	GetUnreviewedPhotosLecturerPhotoReviewGetResponse,
	PatchEventEventIdPatchData,
	PatchEventEventIdPatchError,
	PatchEventEventIdPatchResponse,
	PatchGroupGroupIdPatchData,
	PatchGroupGroupIdPatchError,
	PatchGroupGroupIdPatchResponse,
	PatchLecturerLecturerIdPatchData,
	PatchLecturerLecturerIdPatchError,
	PatchLecturerLecturerIdPatchResponse,
	PatchRoomRoomIdPatchData,
	PatchRoomRoomIdPatchError,
	PatchRoomRoomIdPatchResponse,
	ReviewCommentEventEventIdCommentIdReviewPostData,
	ReviewCommentEventEventIdCommentIdReviewPostError,
	ReviewCommentEventEventIdCommentIdReviewPostResponse,
	ReviewCommentLecturerLecturerIdCommentIdReviewPostData,
	ReviewCommentLecturerLecturerIdCommentIdReviewPostError,
	ReviewCommentLecturerLecturerIdCommentIdReviewPostResponse,
	ReviewPhotoLecturerPhotoReviewIdPostData,
	ReviewPhotoLecturerPhotoReviewIdPostError,
	ReviewPhotoLecturerPhotoReviewIdPostResponse,
	UpdateCommentEventEventIdCommentIdPatchData,
	UpdateCommentEventEventIdCommentIdPatchError,
	UpdateCommentEventEventIdCommentIdPatchResponse,
	UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData,
	UpdateCommentLecturerLecturerLecturerIdCommentIdPatchError,
	UpdateCommentLecturerLecturerLecturerIdCommentIdPatchResponse,
	UploadPhotoLecturerLecturerIdPhotoPostData,
	UploadPhotoLecturerLecturerIdPhotoPostError,
	UploadPhotoLecturerLecturerIdPhotoPostResponse,
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Delete Lecturer
 */
export const deleteLecturerLecturerIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteLecturerLecturerIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteLecturerLecturerIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/{id}',
		...options,
	});
};

/**
 * Get Lecturer By Id
 */
export const getLecturerByIdLecturerIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetLecturerByIdLecturerIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetLecturerByIdLecturerIdGetResponse,
		GetLecturerByIdLecturerIdGetError,
		ThrowOnError
	>({
		url: '/lecturer/{id}',
		...options,
	});
};

/**
 * Patch Lecturer
 */
export const patchLecturerLecturerIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<PatchLecturerLecturerIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		PatchLecturerLecturerIdPatchResponse,
		PatchLecturerLecturerIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Lecturers
 */
export const getLecturersLecturerGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetLecturersLecturerGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetLecturersLecturerGetResponse,
		GetLecturersLecturerGetError,
		ThrowOnError
	>({
		url: '/lecturer/',
		...options,
	});
};

/**
 * Create Lecturer
 */
export const createLecturerLecturerPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateLecturerLecturerPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateLecturerLecturerPostResponse,
		CreateLecturerLecturerPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * @deprecated
 * Get All Lecturer Comments
 */
export const getAllLecturerCommentsLecturerLecturerIdCommentGet = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetAllLecturerCommentsLecturerLecturerIdCommentGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetAllLecturerCommentsLecturerLecturerIdCommentGetResponse,
		GetAllLecturerCommentsLecturerLecturerIdCommentGetError,
		ThrowOnError
	>({
		url: '/lecturer/{lecturer_id}/comment/',
		...options,
	});
};

/**
 * @deprecated
 * Comment Lecturer
 */
export const commentLecturerLecturerLecturerIdCommentPost = <ThrowOnError extends boolean = false>(
	options: Options<CommentLecturerLecturerLecturerIdCommentPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CommentLecturerLecturerLecturerIdCommentPostResponse,
		CommentLecturerLecturerLecturerIdCommentPostError,
		ThrowOnError
	>({
		url: '/lecturer/{lecturer_id}/comment/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * @deprecated
 * Delete Comment
 */
export const deleteCommentLecturerLecturerIdCommentIdDelete = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DeleteCommentLecturerLecturerIdCommentIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteCommentLecturerLecturerIdCommentIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/{lecturer_id}/comment/{id}',
		...options,
	});
};

/**
 * @deprecated
 * Get Comment
 */
export const getCommentLecturerLecturerIdCommentIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetCommentLecturerLecturerIdCommentIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetCommentLecturerLecturerIdCommentIdGetResponse,
		GetCommentLecturerLecturerIdCommentIdGetError,
		ThrowOnError
	>({
		url: '/lecturer/{lecturer_id}/comment/{id}',
		...options,
	});
};

/**
 * @deprecated
 * Update Comment Lecturer
 */
export const updateCommentLecturerLecturerLecturerIdCommentIdPatch = <
	ThrowOnError extends boolean = false,
>(
	options: Options<UpdateCommentLecturerLecturerLecturerIdCommentIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		UpdateCommentLecturerLecturerLecturerIdCommentIdPatchResponse,
		UpdateCommentLecturerLecturerLecturerIdCommentIdPatchError,
		ThrowOnError
	>({
		url: '/lecturer/{lecturer_id}/comment/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * @deprecated
 * Get Unreviewed Comments
 */
export const getUnreviewedCommentsLecturerLecturerIdCommentReviewGet = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetResponse,
		GetUnreviewedCommentsLecturerLecturerIdCommentReviewGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/{lecturer_id}/comment/review/',
		...options,
	});
};

/**
 * @deprecated
 * Review Comment
 */
export const reviewCommentLecturerLecturerIdCommentIdReviewPost = <
	ThrowOnError extends boolean = false,
>(
	options: Options<ReviewCommentLecturerLecturerIdCommentIdReviewPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		ReviewCommentLecturerLecturerIdCommentIdReviewPostResponse,
		ReviewCommentLecturerLecturerIdCommentIdReviewPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/{lecturer_id}/comment/{id}/review/',
		...options,
	});
};

/**
 * Get Lecturer Photos
 */
export const getLecturerPhotosLecturerLecturerIdPhotoGet = <ThrowOnError extends boolean = false>(
	options: Options<GetLecturerPhotosLecturerLecturerIdPhotoGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetLecturerPhotosLecturerLecturerIdPhotoGetResponse,
		GetLecturerPhotosLecturerLecturerIdPhotoGetError,
		ThrowOnError
	>({
		url: '/lecturer/{lecturer_id}/photo',
		...options,
	});
};

/**
 * Upload Photo
 * Загрузить фотографию преподавателя из локального файла
 *
 * Пример загрузки файла на питоне
 * ```python
 * lecturer_id = 123
 * root = 'https://timetable.api.test.profcomff.com'
 *
 * with open('./x.png', 'rb') as f:
 * data = f.read()
 * requests.post(url=f'{root}/timetable/lecturer/{lecturer_id}/photo', files={"photo": data})
 * ```
 */
export const uploadPhotoLecturerLecturerIdPhotoPost = <ThrowOnError extends boolean = false>(
	options: Options<UploadPhotoLecturerLecturerIdPhotoPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		UploadPhotoLecturerLecturerIdPhotoPostResponse,
		UploadPhotoLecturerLecturerIdPhotoPostError,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/{lecturer_id}/photo',
		...options,
		headers: {
			'Content-Type': null,
			...options?.headers,
		},
	});
};

/**
 * Delete Photo
 */
export const deletePhotoLecturerLecturerIdPhotoIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeletePhotoLecturerLecturerIdPhotoIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeletePhotoLecturerLecturerIdPhotoIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/{lecturer_id}/photo/{id}',
		...options,
	});
};

/**
 * Get Photo
 */
export const getPhotoLecturerLecturerIdPhotoIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetPhotoLecturerLecturerIdPhotoIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetPhotoLecturerLecturerIdPhotoIdGetResponse,
		GetPhotoLecturerLecturerIdPhotoIdGetError,
		ThrowOnError
	>({
		url: '/lecturer/{lecturer_id}/photo/{id}',
		...options,
	});
};

/**
 * Get Unreviewed Photos
 */
export const getUnreviewedPhotosLecturerPhotoReviewGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetUnreviewedPhotosLecturerPhotoReviewGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetUnreviewedPhotosLecturerPhotoReviewGetResponse,
		GetUnreviewedPhotosLecturerPhotoReviewGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/photo/review',
		...options,
	});
};

/**
 * Review Photo
 */
export const reviewPhotoLecturerPhotoReviewIdPost = <ThrowOnError extends boolean = false>(
	options: Options<ReviewPhotoLecturerPhotoReviewIdPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		ReviewPhotoLecturerPhotoReviewIdPostResponse,
		ReviewPhotoLecturerPhotoReviewIdPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lecturer/photo/review/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Group
 */
export const deleteGroupGroupIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteGroupGroupIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteGroupGroupIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/{id}',
		...options,
	});
};

/**
 * Get Group By Id
 */
export const getGroupByIdGroupIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetGroupByIdGroupIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetGroupByIdGroupIdGetResponse,
		GetGroupByIdGroupIdGetError,
		ThrowOnError
	>({
		url: '/group/{id}',
		...options,
	});
};

/**
 * Patch Group
 */
export const patchGroupGroupIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<PatchGroupGroupIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		PatchGroupGroupIdPatchResponse,
		PatchGroupGroupIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Groups
 */
export const getGroupsGroupGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetGroupsGroupGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetGroupsGroupGetResponse,
		GetGroupsGroupGetError,
		ThrowOnError
	>({
		url: '/group/',
		...options,
	});
};

/**
 * Create Group
 */
export const createGroupGroupPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateGroupGroupPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateGroupGroupPostResponse,
		CreateGroupGroupPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Room
 */
export const deleteRoomRoomIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteRoomRoomIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteRoomRoomIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/room/{id}',
		...options,
	});
};

/**
 * Get Room By Id
 */
export const getRoomByIdRoomIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetRoomByIdRoomIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetRoomByIdRoomIdGetResponse,
		GetRoomByIdRoomIdGetError,
		ThrowOnError
	>({
		url: '/room/{id}',
		...options,
	});
};

/**
 * Patch Room
 */
export const patchRoomRoomIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<PatchRoomRoomIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		PatchRoomRoomIdPatchResponse,
		PatchRoomRoomIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/room/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Rooms
 */
export const getRoomsRoomGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetRoomsRoomGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetRoomsRoomGetResponse,
		GetRoomsRoomGetError,
		ThrowOnError
	>({
		url: '/room/',
		...options,
	});
};

/**
 * Create Room
 */
export const createRoomRoomPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateRoomRoomPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateRoomRoomPostResponse,
		CreateRoomRoomPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/room/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Event
 */
export const deleteEventEventIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteEventEventIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteEventEventIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/{id}',
		...options,
	});
};

/**
 * Get Event By Id
 */
export const getEventByIdEventIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetEventByIdEventIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetEventByIdEventIdGetResponse,
		GetEventByIdEventIdGetError,
		ThrowOnError
	>({
		url: '/event/{id}',
		...options,
	});
};

/**
 * Patch Event
 */
export const patchEventEventIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<PatchEventEventIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		PatchEventEventIdPatchResponse,
		PatchEventEventIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Events
 */
export const getEventsEventGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetEventsEventGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetEventsEventGetResponse,
		GetEventsEventGetError,
		ThrowOnError
	>({
		url: '/event/',
		...options,
	});
};

/**
 * Create Event
 */
export const createEventEventPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateEventEventPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateEventEventPostResponse,
		CreateEventEventPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Events
 */
export const deleteEventsEventBulkDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteEventsEventBulkDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteEventsEventBulkDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/bulk',
		...options,
	});
};

/**
 * Create Events
 */
export const createEventsEventBulkPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateEventsEventBulkPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateEventsEventBulkPostResponse,
		CreateEventsEventBulkPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/bulk',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Event Comments
 */
export const getEventCommentsEventEventIdCommentGet = <ThrowOnError extends boolean = false>(
	options: Options<GetEventCommentsEventEventIdCommentGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetEventCommentsEventEventIdCommentGetResponse,
		GetEventCommentsEventEventIdCommentGetError,
		ThrowOnError
	>({
		url: '/event/{event_id}/comment/',
		...options,
	});
};

/**
 * Comment Event
 */
export const commentEventEventEventIdCommentPost = <ThrowOnError extends boolean = false>(
	options: Options<CommentEventEventEventIdCommentPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CommentEventEventEventIdCommentPostResponse,
		CommentEventEventEventIdCommentPostError,
		ThrowOnError
	>({
		url: '/event/{event_id}/comment/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Comment
 */
export const deleteCommentEventEventIdCommentIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteCommentEventEventIdCommentIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteCommentEventEventIdCommentIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/{event_id}/comment/{id}',
		...options,
	});
};

/**
 * Get Comment
 */
export const getCommentEventEventIdCommentIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetCommentEventEventIdCommentIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetCommentEventEventIdCommentIdGetResponse,
		GetCommentEventEventIdCommentIdGetError,
		ThrowOnError
	>({
		url: '/event/{event_id}/comment/{id}',
		...options,
	});
};

/**
 * Update Comment
 */
export const updateCommentEventEventIdCommentIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<UpdateCommentEventEventIdCommentIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		UpdateCommentEventEventIdCommentIdPatchResponse,
		UpdateCommentEventEventIdCommentIdPatchError,
		ThrowOnError
	>({
		url: '/event/{event_id}/comment/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Unreviewed Comments
 */
export const getUnreviewedCommentsEventEventIdCommentReviewGet = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetUnreviewedCommentsEventEventIdCommentReviewGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetUnreviewedCommentsEventEventIdCommentReviewGetResponse,
		GetUnreviewedCommentsEventEventIdCommentReviewGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/{event_id}/comment/review/',
		...options,
	});
};

/**
 * Review Comment
 */
export const reviewCommentEventEventIdCommentIdReviewPost = <ThrowOnError extends boolean = false>(
	options: Options<ReviewCommentEventEventIdCommentIdReviewPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		ReviewCommentEventEventIdCommentIdReviewPostResponse,
		ReviewCommentEventEventIdCommentIdReviewPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/event/{event_id}/comment/{id}/review/',
		...options,
	});
};
