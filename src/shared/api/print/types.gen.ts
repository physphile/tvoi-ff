// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}/print` | (string & {});
};

/**
 * Body_upload_file_file__pin__post
 */
export type BodyUploadFileFilePinPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * InstantPrintCreate
 */
export type InstantPrintCreate = {
    /**
     * Qr Token
     */
    qr_token: string;
    /**
     * Files
     */
    files: Array<string>;
};

/**
 * PrintOptions
 */
export type PrintOptions = {
    /**
     * Pages
     *
     * Страницы для печати
     */
    pages?: string;
    /**
     * Copies
     *
     * Количество копий для печати
     */
    copies?: number;
    /**
     * Two Sided
     *
     * Включить печать с двух сторон листа
     */
    two_sided?: boolean;
};

/**
 * RebootInput
 */
export type RebootInput = {
    /**
     * Terminal Token
     */
    terminal_token: string;
};

/**
 * ReceiveOutput
 */
export type ReceiveOutput = {
    /**
     * Filename
     *
     * Название файла, который можно запросить по адресу https://app.profcomff.com/print/static/{filename}
     */
    filename: string;
    options: PrintOptions;
};

/**
 * SendInput
 */
export type SendInput = {
    /**
     * Surname
     *
     * Фамилия
     */
    surname?: string | null;
    /**
     * Number
     *
     * Номер профсоюзного или студенческого билетов
     */
    number?: string | null;
    /**
     * Filename
     *
     * Название файла
     */
    filename: string;
    /**
     * Source
     */
    source?: string | null;
    options?: PrintOptions;
};

/**
 * SendInputUpdate
 */
export type SendInputUpdate = {
    options?: PrintOptions | null;
};

/**
 * SendOutput
 */
export type SendOutput = {
    /**
     * Pin
     *
     * Пин-код, который используется для манипуляции файлами
     */
    pin: string;
    options: PrintOptions;
};

/**
 * StatusResponseModel
 */
export type StatusResponseModel = {
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
    /**
     * Ru
     */
    ru: string;
};

/**
 * UpdateInput
 */
export type UpdateInput = {
    /**
     * Terminal Token
     */
    terminal_token: string;
};

/**
 * UpdateUserList
 */
export type UpdateUserList = {
    /**
     * Users
     */
    users: Array<UserCreate>;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Username
     */
    username: string;
    /**
     * Union Number
     */
    union_number: string | null;
    /**
     * Student Number
     */
    student_number: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type CheckUnionMemberIsUnionMemberGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Surname
         */
        surname: string;
        /**
         * Number
         */
        number: string;
        /**
         * V
         */
        v?: string | null;
    };
    url: '/is_union_member';
};

export type CheckUnionMemberIsUnionMemberGetErrors = {
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CheckUnionMemberIsUnionMemberGetError = CheckUnionMemberIsUnionMemberGetErrors[keyof CheckUnionMemberIsUnionMemberGetErrors];

export type CheckUnionMemberIsUnionMemberGetResponses = {
    /**
     * Successful Response
     */
    202: unknown;
};

export type UpdateListIsUnionMemberPostData = {
    body: UpdateUserList;
    path?: never;
    query?: never;
    url: '/is_union_member';
};

export type UpdateListIsUnionMemberPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateListIsUnionMemberPostError = UpdateListIsUnionMemberPostErrors[keyof UpdateListIsUnionMemberPostErrors];

export type UpdateListIsUnionMemberPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SendFilePostData = {
    body: SendInput;
    path?: never;
    query?: never;
    url: '/file';
};

export type SendFilePostErrors = {
    /**
     * Forbidden
     */
    403: StatusResponseModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: StatusResponseModel;
};

export type SendFilePostError = SendFilePostErrors[keyof SendFilePostErrors];

export type SendFilePostResponses = {
    /**
     * Successful Response
     */
    200: SendOutput;
};

export type SendFilePostResponse = SendFilePostResponses[keyof SendFilePostResponses];

export type PrintFileFilePinGetData = {
    body?: never;
    path: {
        /**
         * Pin
         */
        pin: string;
    };
    query?: never;
    url: '/file/{pin}';
};

export type PrintFileFilePinGetErrors = {
    /**
     * Not Found
     */
    404: StatusResponseModel;
    /**
     * Unsupported Media Type
     */
    415: StatusResponseModel;
    /**
     * Requested Range Not Satisfiable
     */
    416: StatusResponseModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PrintFileFilePinGetError = PrintFileFilePinGetErrors[keyof PrintFileFilePinGetErrors];

export type PrintFileFilePinGetResponses = {
    /**
     * Successful Response
     */
    200: ReceiveOutput;
};

export type PrintFileFilePinGetResponse = PrintFileFilePinGetResponses[keyof PrintFileFilePinGetResponses];

export type UpdateFileOptionsFilePinPatchData = {
    body: SendInputUpdate;
    path: {
        /**
         * Pin
         */
        pin: string;
    };
    query?: never;
    url: '/file/{pin}';
};

export type UpdateFileOptionsFilePinPatchErrors = {
    /**
     * Not Found
     */
    404: StatusResponseModel;
    /**
     * Request Entity Too Large
     */
    413: StatusResponseModel;
    /**
     * Requested Range Not Satisfiable
     */
    416: StatusResponseModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateFileOptionsFilePinPatchError = UpdateFileOptionsFilePinPatchErrors[keyof UpdateFileOptionsFilePinPatchErrors];

export type UpdateFileOptionsFilePinPatchResponses = {
    /**
     * Successful Response
     */
    200: SendOutput;
};

export type UpdateFileOptionsFilePinPatchResponse = UpdateFileOptionsFilePinPatchResponses[keyof UpdateFileOptionsFilePinPatchResponses];

export type UploadFileFilePinPostData = {
    body: BodyUploadFileFilePinPost;
    path: {
        /**
         * Pin
         */
        pin: string;
    };
    query?: never;
    url: '/file/{pin}';
};

export type UploadFileFilePinPostErrors = {
    /**
     * Bad Request
     */
    400: StatusResponseModel;
    /**
     * Not Found
     */
    404: StatusResponseModel;
    /**
     * Request Entity Too Large
     */
    413: StatusResponseModel;
    /**
     * Unsupported Media Type
     */
    415: StatusResponseModel;
    /**
     * Requested Range Not Satisfiable
     */
    416: StatusResponseModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadFileFilePinPostError = UploadFileFilePinPostErrors[keyof UploadFileFilePinPostErrors];

export type UploadFileFilePinPostResponses = {
    /**
     * Successful Response
     */
    200: SendOutput;
};

export type UploadFileFilePinPostResponse = UploadFileFilePinPostResponses[keyof UploadFileFilePinPostResponses];

export type InstantPrintQrPostData = {
    body: InstantPrintCreate;
    path?: never;
    query?: never;
    url: '/qr';
};

export type InstantPrintQrPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InstantPrintQrPostError = InstantPrintQrPostErrors[keyof InstantPrintQrPostErrors];

export type InstantPrintQrPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ManualUpdateTerminalAdminUpdatePostData = {
    body: UpdateInput;
    path?: never;
    query?: never;
    url: '/admin/update';
};

export type ManualUpdateTerminalAdminUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ManualUpdateTerminalAdminUpdatePostError = ManualUpdateTerminalAdminUpdatePostErrors[keyof ManualUpdateTerminalAdminUpdatePostErrors];

export type ManualUpdateTerminalAdminUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RebootTerminalAdminRebootPostData = {
    body: RebootInput;
    path?: never;
    query?: never;
    url: '/admin/reboot';
};

export type RebootTerminalAdminRebootPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RebootTerminalAdminRebootPostError = RebootTerminalAdminRebootPostErrors[keyof RebootTerminalAdminRebootPostErrors];

export type RebootTerminalAdminRebootPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
