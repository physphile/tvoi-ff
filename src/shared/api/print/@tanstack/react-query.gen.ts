// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { checkUnionMemberIsUnionMemberGet, instantPrintQrPost, manualUpdateTerminalAdminUpdatePost, type Options, printFileFilePinGet, rebootTerminalAdminRebootPost, sendFilePost, updateFileOptionsFilePinPatch, updateListIsUnionMemberPost, uploadFileFilePinPost } from '../sdk.gen';
import type { CheckUnionMemberIsUnionMemberGetData, InstantPrintQrPostData, InstantPrintQrPostError, ManualUpdateTerminalAdminUpdatePostData, ManualUpdateTerminalAdminUpdatePostError, PrintFileFilePinGetData, RebootTerminalAdminRebootPostData, RebootTerminalAdminRebootPostError, SendFilePostData, SendFilePostError, SendFilePostResponse, UpdateFileOptionsFilePinPatchData, UpdateFileOptionsFilePinPatchError, UpdateFileOptionsFilePinPatchResponse, UpdateListIsUnionMemberPostData, UpdateListIsUnionMemberPostError, UploadFileFilePinPostData, UploadFileFilePinPostError, UploadFileFilePinPostResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const checkUnionMemberIsUnionMemberGetQueryKey = (options: Options<CheckUnionMemberIsUnionMemberGetData>) => createQueryKey('checkUnionMemberIsUnionMemberGet', options);

/**
 * Check Union Member
 *
 * Проверяет наличие пользователя в списке.
 */
export const checkUnionMemberIsUnionMemberGetOptions = (options: Options<CheckUnionMemberIsUnionMemberGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await checkUnionMemberIsUnionMemberGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: checkUnionMemberIsUnionMemberGetQueryKey(options)
    });
};

/**
 * Update List
 *
 * Обновляет данные существующего пользователя или добавляет нового, если его нет.
 */
export const updateListIsUnionMemberPostMutation = (options?: Partial<Options<UpdateListIsUnionMemberPostData>>): UseMutationOptions<unknown, UpdateListIsUnionMemberPostError, Options<UpdateListIsUnionMemberPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, UpdateListIsUnionMemberPostError, Options<UpdateListIsUnionMemberPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateListIsUnionMemberPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Send
 *
 * Получить пин код для загрузки и скачивания файла.
 *
 * Полученный пин-код можно использовать в методах POST и GET `/file/{pin}`.
 */
export const sendFilePostMutation = (options?: Partial<Options<SendFilePostData>>): UseMutationOptions<SendFilePostResponse, SendFilePostError, Options<SendFilePostData>> => {
    const mutationOptions: UseMutationOptions<SendFilePostResponse, SendFilePostError, Options<SendFilePostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await sendFilePost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const printFileFilePinGetQueryKey = (options: Options<PrintFileFilePinGetData>) => createQueryKey('printFileFilePinGet', options);

/**
 * Print File
 *
 * Получить файл для печати.
 *
 * Требует пин-код, полученный в методе POST `/file`. Файл можно скачать
 * бесконечное количество раз в течение 7 дней после загрузки (меняется в
 * настройках сервера).
 */
export const printFileFilePinGetOptions = (options: Options<PrintFileFilePinGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await printFileFilePinGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: printFileFilePinGetQueryKey(options)
    });
};

/**
 * Update File Options
 *
 * Обновляет настройки печати.
 *
 * Требует пин-код, полученный в методе POST `/file`. Обновлять настройки
 * можно бесконечное количество раз. Можно изменять настройки по одной.
 */
export const updateFileOptionsFilePinPatchMutation = (options?: Partial<Options<UpdateFileOptionsFilePinPatchData>>): UseMutationOptions<UpdateFileOptionsFilePinPatchResponse, UpdateFileOptionsFilePinPatchError, Options<UpdateFileOptionsFilePinPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateFileOptionsFilePinPatchResponse, UpdateFileOptionsFilePinPatchError, Options<UpdateFileOptionsFilePinPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateFileOptionsFilePinPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Upload File
 *
 * Загрузить файл на сервер.
 *
 * Требует пин-код, полученный в методе POST `/file`. Файл для пин-кода можно
 * загрузить лишь один раз. Файл должен быть размером до 5 000 000 байт
 * (меняется в настройках сервера).
 */
export const uploadFileFilePinPostMutation = (options?: Partial<Options<UploadFileFilePinPostData>>): UseMutationOptions<UploadFileFilePinPostResponse, UploadFileFilePinPostError, Options<UploadFileFilePinPostData>> => {
    const mutationOptions: UseMutationOptions<UploadFileFilePinPostResponse, UploadFileFilePinPostError, Options<UploadFileFilePinPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await uploadFileFilePinPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Instant Print
 */
export const instantPrintQrPostMutation = (options?: Partial<Options<InstantPrintQrPostData>>): UseMutationOptions<unknown, InstantPrintQrPostError, Options<InstantPrintQrPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, InstantPrintQrPostError, Options<InstantPrintQrPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await instantPrintQrPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Manual Update Terminal
 */
export const manualUpdateTerminalAdminUpdatePostMutation = (options?: Partial<Options<ManualUpdateTerminalAdminUpdatePostData>>): UseMutationOptions<unknown, ManualUpdateTerminalAdminUpdatePostError, Options<ManualUpdateTerminalAdminUpdatePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, ManualUpdateTerminalAdminUpdatePostError, Options<ManualUpdateTerminalAdminUpdatePostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await manualUpdateTerminalAdminUpdatePost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Reboot Terminal
 */
export const rebootTerminalAdminRebootPostMutation = (options?: Partial<Options<RebootTerminalAdminRebootPostData>>): UseMutationOptions<unknown, RebootTerminalAdminRebootPostError, Options<RebootTerminalAdminRebootPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, RebootTerminalAdminRebootPostError, Options<RebootTerminalAdminRebootPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await rebootTerminalAdminRebootPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
