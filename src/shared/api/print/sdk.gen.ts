// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	type Options as ClientOptions,
	type TDataShape,
	formDataBodySerializer,
} from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
	CheckUnionMemberIsUnionMemberGetData,
	CheckUnionMemberIsUnionMemberGetError,
	InstantPrintQrPostData,
	InstantPrintQrPostError,
	ManualUpdateTerminalAdminUpdatePostData,
	ManualUpdateTerminalAdminUpdatePostError,
	PrintFileFilePinGetData,
	PrintFileFilePinGetError,
	PrintFileFilePinGetResponse,
	RebootTerminalAdminRebootPostData,
	RebootTerminalAdminRebootPostError,
	SendFilePostData,
	SendFilePostError,
	SendFilePostResponse,
	UpdateFileOptionsFilePinPatchData,
	UpdateFileOptionsFilePinPatchError,
	UpdateFileOptionsFilePinPatchResponse,
	UpdateListIsUnionMemberPostData,
	UpdateListIsUnionMemberPostError,
	UploadFileFilePinPostData,
	UploadFileFilePinPostError,
	UploadFileFilePinPostResponse,
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Check Union Member
 * Проверяет наличие пользователя в списке.
 */
export const checkUnionMemberIsUnionMemberGet = <ThrowOnError extends boolean = false>(
	options: Options<CheckUnionMemberIsUnionMemberGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		unknown,
		CheckUnionMemberIsUnionMemberGetError,
		ThrowOnError
	>({
		url: '/is_union_member',
		...options,
	});
};

/**
 * Update List
 * Обновляет данные существующего пользователя или добавляет нового, если его нет.
 */
export const updateListIsUnionMemberPost = <ThrowOnError extends boolean = false>(
	options: Options<UpdateListIsUnionMemberPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		unknown,
		UpdateListIsUnionMemberPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/is_union_member',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Send
 * Получить пин код для загрузки и скачивания файла.
 *
 * Полученный пин-код можно использовать в методах POST и GET `/file/{pin}`.
 */
export const sendFilePost = <ThrowOnError extends boolean = false>(
	options: Options<SendFilePostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		SendFilePostResponse,
		SendFilePostError,
		ThrowOnError
	>({
		url: '/file',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Print File
 * Получить файл для печати.
 *
 * Требует пин-код, полученный в методе POST `/file`. Файл можно скачать
 * бесконечное количество раз в течение 7 дней после загрузки (меняется в
 * настройках сервера).
 */
export const printFileFilePinGet = <ThrowOnError extends boolean = false>(
	options: Options<PrintFileFilePinGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		PrintFileFilePinGetResponse,
		PrintFileFilePinGetError,
		ThrowOnError
	>({
		url: '/file/{pin}',
		...options,
	});
};

/**
 * Update File Options
 * Обновляет настройки печати.
 *
 * Требует пин-код, полученный в методе POST `/file`. Обновлять настройки
 * можно бесконечное количество раз. Можно изменять настройки по одной.
 */
export const updateFileOptionsFilePinPatch = <ThrowOnError extends boolean = false>(
	options: Options<UpdateFileOptionsFilePinPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		UpdateFileOptionsFilePinPatchResponse,
		UpdateFileOptionsFilePinPatchError,
		ThrowOnError
	>({
		url: '/file/{pin}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Upload File
 * Загрузить файл на сервер.
 *
 * Требует пин-код, полученный в методе POST `/file`. Файл для пин-кода можно
 * загрузить лишь один раз. Файл должен быть размером до 5 000 000 байт
 * (меняется в настройках сервера).
 */
export const uploadFileFilePinPost = <ThrowOnError extends boolean = false>(
	options: Options<UploadFileFilePinPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		UploadFileFilePinPostResponse,
		UploadFileFilePinPostError,
		ThrowOnError
	>({
		...formDataBodySerializer,
		url: '/file/{pin}',
		...options,
		headers: {
			'Content-Type': null,
			...options?.headers,
		},
	});
};

/**
 * Instant Print
 */
export const instantPrintQrPost = <ThrowOnError extends boolean = false>(
	options: Options<InstantPrintQrPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<unknown, InstantPrintQrPostError, ThrowOnError>({
		url: '/qr',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Manual Update Terminal
 */
export const manualUpdateTerminalAdminUpdatePost = <ThrowOnError extends boolean = false>(
	options: Options<ManualUpdateTerminalAdminUpdatePostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		unknown,
		ManualUpdateTerminalAdminUpdatePostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/admin/update',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Reboot Terminal
 */
export const rebootTerminalAdminRebootPost = <ThrowOnError extends boolean = false>(
	options: Options<RebootTerminalAdminRebootPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		unknown,
		RebootTerminalAdminRebootPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/admin/reboot',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};
