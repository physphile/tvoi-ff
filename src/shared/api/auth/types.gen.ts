// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}/auth` | (string & {});
};

/**
 * Body_token_openid_token_post
 */
export type BodyTokenOpenidTokenPost = {
    /**
     * Grant Type
     */
    grant_type: string;
    /**
     * Client Id
     */
    client_id: string;
    /**
     * Client Secret
     */
    client_secret?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Refresh Token
     */
    refresh_token?: string | null;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Password
     */
    password?: string | null;
};

/**
 * EmailChange
 */
export type EmailChange = {
    /**
     * Email
     */
    email: string;
};

/**
 * EmailLogin
 */
export type EmailLogin = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * EmailRegister
 */
export type EmailRegister = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * GetOuterAccount
 */
export type GetOuterAccount = {
    /**
     * Username
     */
    username: string;
};

/**
 * Group
 */
export type Group = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Parent Id
     */
    parent_id?: number | null;
};

/**
 * GroupGet
 */
export type GroupGet = {
    /**
     * Users
     */
    users?: Array<number> | null;
    /**
     * Scopes
     */
    scopes?: Array<PinchedScope> | null;
    /**
     * Indirect Scopes
     */
    indirect_scopes?: Array<PinchedScope> | null;
    /**
     * Child
     */
    child?: Array<Group> | null;
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Parent Id
     */
    parent_id?: number | null;
};

/**
 * GroupPatch
 */
export type GroupPatch = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Parent Id
     */
    parent_id?: number | null;
    /**
     * Scopes
     */
    scopes?: Array<number> | null;
};

/**
 * GroupPost
 */
export type GroupPost = {
    /**
     * Name
     */
    name: string;
    /**
     * Parent Id
     */
    parent_id?: number | null;
    /**
     * Scopes
     */
    scopes: Array<number>;
};

/**
 * GroupsGet
 */
export type GroupsGet = {
    /**
     * Items
     */
    items: Array<GroupGet>;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LinkOuterAccount
 */
export type LinkOuterAccount = {
    /**
     * Username
     */
    username: string;
};

/**
 * PinchedScope
 */
export type PinchedScope = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
};

/**
 * PostTokenResponse
 */
export type PostTokenResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type: string;
    /**
     * Expires In
     */
    expires_in: number;
    /**
     * Refresh Token
     */
    refresh_token: string;
};

/**
 * RequestResetForgottenPassword
 */
export type RequestResetForgottenPassword = {
    /**
     * Email
     */
    email: string;
};

/**
 * ResetForgottenPassword
 */
export type ResetForgottenPassword = {
    /**
     * New Password
     */
    new_password: string;
};

/**
 * ResetPassword
 */
export type ResetPassword = {
    /**
     * Password
     */
    password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * ScopeGet
 */
export type ScopeGet = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Comment
     */
    comment?: string | null;
};

/**
 * ScopePatch
 */
export type ScopePatch = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Comment
     */
    comment?: string | null;
};

/**
 * ScopePost
 */
export type ScopePost = {
    /**
     * Name
     */
    name: string;
    /**
     * Comment
     */
    comment?: string | null;
};

/**
 * SessionPatch
 */
export type SessionPatch = {
    /**
     * Session Name
     */
    session_name?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
};

/**
 * SessionPost
 */
export type SessionPost = {
    /**
     * Session Name
     */
    session_name?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string>;
    /**
     * Expires
     */
    expires?: string | null;
    /**
     * Is Unbounded
     */
    is_unbounded?: boolean | null;
};

/**
 * StatusResponseModel
 */
export type StatusResponseModel = {
    /**
     * Status
     */
    status: string;
    /**
     * Message
     */
    message: string;
    /**
     * Ru
     */
    ru: string;
};

/**
 * UrlSchema
 */
export type UrlSchema = {
    /**
     * Url
     */
    url: string;
};

/**
 * User
 */
export type User = {
    /**
     * Id
     */
    id: number;
};

/**
 * UserGet
 */
export type UserGet = {
    /**
     * Auth Methods
     */
    auth_methods?: Array<string> | null;
    /**
     * Session Scopes
     */
    session_scopes?: Array<PinchedScope> | null;
    /**
     * User Scopes
     */
    user_scopes?: Array<PinchedScope> | null;
    /**
     * Indirect Groups
     */
    indirect_groups?: Array<number> | null;
    /**
     * Groups
     */
    groups?: Array<number> | null;
    /**
     * Id
     */
    id: number;
    /**
     * Email
     */
    email?: string | null;
};

/**
 * UserPatch
 */
export type UserPatch = {
    /**
     * Groups
     */
    groups: Array<number>;
};

/**
 * UsersGet
 */
export type UsersGet = {
    /**
     * Items
     */
    items: Array<UserGet>;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * Session
 */
export type AuthBackendAuthMethodSessionSession = {
    /**
     * Token
     */
    token: string;
    /**
     * Expires
     */
    expires: string;
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id: number;
    /**
     * Session Scopes
     */
    session_scopes: Array<string>;
};

/**
 * OauthResponseSchema
 */
export type AuthBackendAuthPluginsAuthenticAuthenticAuthOauthResponseSchema = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * Id Token
     */
    id_token?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * OauthResponseSchema
 */
export type AuthBackendAuthPluginsGithubGithubAuthOauthResponseSchema = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * Id Token
     */
    id_token?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * OauthResponseSchema
 */
export type AuthBackendAuthPluginsGoogleGoogleAuthOauthResponseSchema = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * State
     */
    state?: string | null;
    /**
     * Id Token
     */
    id_token?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * OauthResponseSchema
 */
export type AuthBackendAuthPluginsLkmsuLkmsuAuthOauthResponseSchema = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * Id Token
     */
    id_token?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * OauthResponseSchema
 */
export type AuthBackendAuthPluginsTelegramTelegramAuthOauthResponseSchema = {
    /**
     * Id Token
     */
    id_token?: string | null;
    /**
     * Id
     */
    id?: string | null;
    /**
     * First Name
     */
    first_name?: string | null;
    /**
     * Last Name
     */
    last_name?: string | null;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Photo Url
     */
    photo_url?: string | null;
    /**
     * Auth Date
     */
    auth_date?: string | null;
    /**
     * Hash
     */
    hash?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * OauthResponseSchema
 */
export type AuthBackendAuthPluginsVkVkAuthOauthResponseSchema = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * Id Token
     */
    id_token?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * OauthResponseSchema
 */
export type AuthBackendAuthPluginsYandexYandexAuthOauthResponseSchema = {
    /**
     * Code
     */
    code?: string | null;
    /**
     * Id Token
     */
    id_token?: string | null;
    /**
     * Scopes
     */
    scopes?: Array<string> | null;
    /**
     * Session Name
     */
    session_name?: string | null;
};

/**
 * Session
 */
export type AuthBackendSchemasModelsSession = {
    /**
     * Session Name
     */
    session_name?: string | null;
    /**
     * Token
     */
    token?: string | null;
    /**
     * Expires
     */
    expires?: string | null;
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id: number;
    /**
     * Is Unbounded
     */
    is_unbounded?: boolean | null;
    /**
     * Session Scopes
     */
    session_scopes?: Array<string> | null;
    /**
     * Last Activity
     */
    last_activity: string;
};

export type DeleteGroupGroupIdDeleteData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/group/{id}';
};

export type DeleteGroupGroupIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteGroupGroupIdDeleteError = DeleteGroupGroupIdDeleteErrors[keyof DeleteGroupGroupIdDeleteErrors];

export type DeleteGroupGroupIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetGroupGroupIdGetData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: {
        /**
         * Info
         */
        info?: Array<'child' | 'scopes' | 'indirect_scopes' | 'users'>;
    };
    url: '/group/{id}';
};

export type GetGroupGroupIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetGroupGroupIdGetError = GetGroupGroupIdGetErrors[keyof GetGroupGroupIdGetErrors];

export type GetGroupGroupIdGetResponses = {
    /**
     * Successful Response
     */
    200: GroupGet;
};

export type GetGroupGroupIdGetResponse = GetGroupGroupIdGetResponses[keyof GetGroupGroupIdGetResponses];

export type PatchGroupGroupIdPatchData = {
    body: GroupPatch;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/group/{id}';
};

export type PatchGroupGroupIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchGroupGroupIdPatchError = PatchGroupGroupIdPatchErrors[keyof PatchGroupGroupIdPatchErrors];

export type PatchGroupGroupIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Group;
};

export type PatchGroupGroupIdPatchResponse = PatchGroupGroupIdPatchResponses[keyof PatchGroupGroupIdPatchResponses];

export type GetGroupsGroupGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Info
         */
        info?: Array<'' | 'scopes' | 'indirect_scopes' | 'child' | 'users'>;
    };
    url: '/group';
};

export type GetGroupsGroupGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetGroupsGroupGetError = GetGroupsGroupGetErrors[keyof GetGroupsGroupGetErrors];

export type GetGroupsGroupGetResponses = {
    /**
     * Successful Response
     */
    200: GroupsGet;
};

export type GetGroupsGroupGetResponse = GetGroupsGroupGetResponses[keyof GetGroupsGroupGetResponses];

export type CreateGroupGroupPostData = {
    body: GroupPost;
    path?: never;
    query?: never;
    url: '/group';
};

export type CreateGroupGroupPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateGroupGroupPostError = CreateGroupGroupPostErrors[keyof CreateGroupGroupPostErrors];

export type CreateGroupGroupPostResponses = {
    /**
     * Successful Response
     */
    200: Group;
};

export type CreateGroupGroupPostResponse = CreateGroupGroupPostResponses[keyof CreateGroupGroupPostResponses];

export type GetScopesScopeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/scope';
};

export type GetScopesScopeGetResponses = {
    /**
     * Response Get Scopes Scope Get
     *
     * Successful Response
     */
    200: Array<ScopeGet>;
};

export type GetScopesScopeGetResponse = GetScopesScopeGetResponses[keyof GetScopesScopeGetResponses];

export type CreateScopeScopePostData = {
    body: ScopePost;
    path?: never;
    query?: never;
    url: '/scope';
};

export type CreateScopeScopePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateScopeScopePostError = CreateScopeScopePostErrors[keyof CreateScopeScopePostErrors];

export type CreateScopeScopePostResponses = {
    /**
     * Successful Response
     */
    200: ScopeGet;
};

export type CreateScopeScopePostResponse = CreateScopeScopePostResponses[keyof CreateScopeScopePostResponses];

export type DeleteScopeScopeIdDeleteData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/scope/{id}';
};

export type DeleteScopeScopeIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteScopeScopeIdDeleteError = DeleteScopeScopeIdDeleteErrors[keyof DeleteScopeScopeIdDeleteErrors];

export type DeleteScopeScopeIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type DeleteScopeScopeIdDeleteResponse = DeleteScopeScopeIdDeleteResponses[keyof DeleteScopeScopeIdDeleteResponses];

export type GetScopeScopeIdGetData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/scope/{id}';
};

export type GetScopeScopeIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScopeScopeIdGetError = GetScopeScopeIdGetErrors[keyof GetScopeScopeIdGetErrors];

export type GetScopeScopeIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScopeGet;
};

export type GetScopeScopeIdGetResponse = GetScopeScopeIdGetResponses[keyof GetScopeScopeIdGetResponses];

export type UpdateScopeScopeIdPatchData = {
    body: ScopePatch;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/scope/{id}';
};

export type UpdateScopeScopeIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateScopeScopeIdPatchError = UpdateScopeScopeIdPatchErrors[keyof UpdateScopeScopeIdPatchErrors];

export type UpdateScopeScopeIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ScopeGet;
};

export type UpdateScopeScopeIdPatchResponse = UpdateScopeScopeIdPatchResponses[keyof UpdateScopeScopeIdPatchResponses];

export type DeleteUserUserUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type DeleteUserUserUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserUserUserIdDeleteError = DeleteUserUserUserIdDeleteErrors[keyof DeleteUserUserUserIdDeleteErrors];

export type DeleteUserUserUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetUserUserUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: {
        /**
         * Info
         */
        info?: Array<'groups' | 'indirect_groups' | 'scopes' | 'auth_methods'>;
    };
    url: '/user/{user_id}';
};

export type GetUserUserUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserUserUserIdGetError = GetUserUserUserIdGetErrors[keyof GetUserUserUserIdGetErrors];

export type GetUserUserUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserGet;
};

export type GetUserUserUserIdGetResponse = GetUserUserUserIdGetResponses[keyof GetUserUserUserIdGetResponses];

export type PatchUserUserUserIdPatchData = {
    body: UserPatch;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/user/{user_id}';
};

export type PatchUserUserUserIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUserUserUserIdPatchError = PatchUserUserUserIdPatchErrors[keyof PatchUserUserUserIdPatchErrors];

export type PatchUserUserUserIdPatchResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type PatchUserUserUserIdPatchResponse = PatchUserUserUserIdPatchResponses[keyof PatchUserUserUserIdPatchResponses];

export type GetUsersUserGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Info
         */
        info?: Array<'groups' | 'indirect_groups' | 'scopes' | ''>;
    };
    url: '/user';
};

export type GetUsersUserGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersUserGetError = GetUsersUserGetErrors[keyof GetUsersUserGetErrors];

export type GetUsersUserGetResponses = {
    /**
     * Successful Response
     */
    200: UsersGet;
};

export type GetUsersUserGetResponse = GetUsersUserGetResponses[keyof GetUsersUserGetResponses];

export type LogoutLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/logout';
};

export type LogoutLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type LogoutLogoutPostResponse = LogoutLogoutPostResponses[keyof LogoutLogoutPostResponses];

export type MeMeGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Info
         */
        info?: Array<'groups' | 'indirect_groups' | 'session_scopes' | 'user_scopes' | 'auth_methods'>;
    };
    url: '/me';
};

export type MeMeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MeMeGetError = MeMeGetErrors[keyof MeMeGetErrors];

export type MeMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserGet;
};

export type MeMeGetResponse = MeMeGetResponses[keyof MeMeGetResponses];

export type DeleteSessionsSessionDeleteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Delete Current
         */
        delete_current?: boolean;
    };
    url: '/session';
};

export type DeleteSessionsSessionDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSessionsSessionDeleteError = DeleteSessionsSessionDeleteErrors[keyof DeleteSessionsSessionDeleteErrors];

export type DeleteSessionsSessionDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSessionsSessionGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Info
         */
        info?: Array<'session_scopes' | 'token' | 'expires'>;
    };
    url: '/session';
};

export type GetSessionsSessionGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSessionsSessionGetError = GetSessionsSessionGetErrors[keyof GetSessionsSessionGetErrors];

export type GetSessionsSessionGetResponses = {
    /**
     * Response Get Sessions Session Get
     *
     * Successful Response
     */
    200: Array<AuthBackendSchemasModelsSession>;
};

export type GetSessionsSessionGetResponse = GetSessionsSessionGetResponses[keyof GetSessionsSessionGetResponses];

export type CreateSessionSessionPostData = {
    body: SessionPost;
    path?: never;
    query?: never;
    url: '/session';
};

export type CreateSessionSessionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSessionSessionPostError = CreateSessionSessionPostErrors[keyof CreateSessionSessionPostErrors];

export type CreateSessionSessionPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendSchemasModelsSession;
};

export type CreateSessionSessionPostResponse = CreateSessionSessionPostResponses[keyof CreateSessionSessionPostResponses];

export type DeleteSessionSessionTokenDeleteData = {
    body?: never;
    path: {
        /**
         * Token
         */
        token: string;
    };
    query?: never;
    url: '/session/{token}';
};

export type DeleteSessionSessionTokenDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSessionSessionTokenDeleteError = DeleteSessionSessionTokenDeleteErrors[keyof DeleteSessionSessionTokenDeleteErrors];

export type DeleteSessionSessionTokenDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateSessionSessionIdPatchData = {
    body: SessionPatch;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/session/{id}';
};

export type UpdateSessionSessionIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSessionSessionIdPatchError = UpdateSessionSessionIdPatchErrors[keyof UpdateSessionSessionIdPatchErrors];

export type UpdateSessionSessionIdPatchResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendSchemasModelsSession;
};

export type UpdateSessionSessionIdPatchResponse = UpdateSessionSessionIdPatchResponses[keyof UpdateSessionSessionIdPatchResponses];

export type OpenidConfigurationOpenidWellKnownOpenidConfigurationGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openid/.well_known/openid_configuration';
};

export type OpenidConfigurationOpenidWellKnownOpenidConfigurationGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type JwksOpenidWellKnownJwksGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openid/.well_known/jwks';
};

export type JwksOpenidWellKnownJwksGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TokenOpenidTokenPostData = {
    body: BodyTokenOpenidTokenPost;
    headers?: {
        /**
         * User-Agent
         */
        'user-agent'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/openid/token';
};

export type TokenOpenidTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TokenOpenidTokenPostError = TokenOpenidTokenPostErrors[keyof TokenOpenidTokenPostErrors];

export type TokenOpenidTokenPostResponses = {
    /**
     * Successful Response
     */
    200: PostTokenResponse;
};

export type TokenOpenidTokenPostResponse = TokenOpenidTokenPostResponses[keyof TokenOpenidTokenPostResponses];

export type UnlinkAirflowUserIdLinkDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/airflow/{user_id}/link';
};

export type UnlinkAirflowUserIdLinkDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnlinkAirflowUserIdLinkDeleteError = UnlinkAirflowUserIdLinkDeleteErrors[keyof UnlinkAirflowUserIdLinkDeleteErrors];

export type UnlinkAirflowUserIdLinkDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetLinkAirflowUserIdLinkGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/airflow/{user_id}/link';
};

export type GetLinkAirflowUserIdLinkGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetLinkAirflowUserIdLinkGetError = GetLinkAirflowUserIdLinkGetErrors[keyof GetLinkAirflowUserIdLinkGetErrors];

export type GetLinkAirflowUserIdLinkGetResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type GetLinkAirflowUserIdLinkGetResponse = GetLinkAirflowUserIdLinkGetResponses[keyof GetLinkAirflowUserIdLinkGetResponses];

export type LinkAirflowUserIdLinkPostData = {
    body: LinkOuterAccount;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/airflow/{user_id}/link';
};

export type LinkAirflowUserIdLinkPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LinkAirflowUserIdLinkPostError = LinkAirflowUserIdLinkPostErrors[keyof LinkAirflowUserIdLinkPostErrors];

export type LinkAirflowUserIdLinkPostResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type LinkAirflowUserIdLinkPostResponse = LinkAirflowUserIdLinkPostResponses[keyof LinkAirflowUserIdLinkPostResponses];

export type RegisterAuthenticRegistrationPostData = {
    body: AuthBackendAuthPluginsAuthenticAuthenticAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/authentic/registration';
};

export type RegisterAuthenticRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterAuthenticRegistrationPostError = RegisterAuthenticRegistrationPostErrors[keyof RegisterAuthenticRegistrationPostErrors];

export type RegisterAuthenticRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterAuthenticRegistrationPostResponse = RegisterAuthenticRegistrationPostResponses[keyof RegisterAuthenticRegistrationPostResponses];

export type LoginAuthenticLoginPostData = {
    body: AuthBackendAuthPluginsAuthenticAuthenticAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/authentic/login';
};

export type LoginAuthenticLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAuthenticLoginPostError = LoginAuthenticLoginPostErrors[keyof LoginAuthenticLoginPostErrors];

export type LoginAuthenticLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginAuthenticLoginPostResponse = LoginAuthenticLoginPostResponses[keyof LoginAuthenticLoginPostResponses];

export type RedirectUrlAuthenticRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/authentic/redirect_url';
};

export type RedirectUrlAuthenticRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlAuthenticRedirectUrlGetResponse = RedirectUrlAuthenticRedirectUrlGetResponses[keyof RedirectUrlAuthenticRedirectUrlGetResponses];

export type AuthUrlAuthenticAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/authentic/auth_url';
};

export type AuthUrlAuthenticAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlAuthenticAuthUrlGetResponse = AuthUrlAuthenticAuthUrlGetResponses[keyof AuthUrlAuthenticAuthUrlGetResponses];

export type UnregisterAuthenticDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/authentic';
};

export type UnregisterAuthenticDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UnlinkCoderUserIdLinkDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/coder/{user_id}/link';
};

export type UnlinkCoderUserIdLinkDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnlinkCoderUserIdLinkDeleteError = UnlinkCoderUserIdLinkDeleteErrors[keyof UnlinkCoderUserIdLinkDeleteErrors];

export type UnlinkCoderUserIdLinkDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetLinkCoderUserIdLinkGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/coder/{user_id}/link';
};

export type GetLinkCoderUserIdLinkGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetLinkCoderUserIdLinkGetError = GetLinkCoderUserIdLinkGetErrors[keyof GetLinkCoderUserIdLinkGetErrors];

export type GetLinkCoderUserIdLinkGetResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type GetLinkCoderUserIdLinkGetResponse = GetLinkCoderUserIdLinkGetResponses[keyof GetLinkCoderUserIdLinkGetResponses];

export type LinkCoderUserIdLinkPostData = {
    body: LinkOuterAccount;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/coder/{user_id}/link';
};

export type LinkCoderUserIdLinkPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LinkCoderUserIdLinkPostError = LinkCoderUserIdLinkPostErrors[keyof LinkCoderUserIdLinkPostErrors];

export type LinkCoderUserIdLinkPostResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type LinkCoderUserIdLinkPostResponse = LinkCoderUserIdLinkPostResponses[keyof LinkCoderUserIdLinkPostResponses];

export type RegisterEmailRegistrationPostData = {
    body: EmailRegister;
    path?: never;
    query?: never;
    url: '/email/registration';
};

export type RegisterEmailRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterEmailRegistrationPostError = RegisterEmailRegistrationPostErrors[keyof RegisterEmailRegistrationPostErrors];

export type RegisterEmailRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type RegisterEmailRegistrationPostResponse = RegisterEmailRegistrationPostResponses[keyof RegisterEmailRegistrationPostResponses];

export type LoginEmailLoginPostData = {
    body: EmailLogin;
    path?: never;
    query?: never;
    url: '/email/login';
};

export type LoginEmailLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginEmailLoginPostError = LoginEmailLoginPostErrors[keyof LoginEmailLoginPostErrors];

export type LoginEmailLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginEmailLoginPostResponse = LoginEmailLoginPostResponses[keyof LoginEmailLoginPostResponses];

export type ApproveEmailEmailApproveGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Token
         */
        token: string;
    };
    url: '/email/approve';
};

export type ApproveEmailEmailApproveGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ApproveEmailEmailApproveGetError = ApproveEmailEmailApproveGetErrors[keyof ApproveEmailEmailApproveGetErrors];

export type ApproveEmailEmailApproveGetResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type ApproveEmailEmailApproveGetResponse = ApproveEmailEmailApproveGetResponses[keyof ApproveEmailEmailApproveGetResponses];

export type RequestResetEmailEmailResetEmailRequestPostData = {
    body: EmailChange;
    path?: never;
    query?: never;
    url: '/email/reset/email/request';
};

export type RequestResetEmailEmailResetEmailRequestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RequestResetEmailEmailResetEmailRequestPostError = RequestResetEmailEmailResetEmailRequestPostErrors[keyof RequestResetEmailEmailResetEmailRequestPostErrors];

export type RequestResetEmailEmailResetEmailRequestPostResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type RequestResetEmailEmailResetEmailRequestPostResponse = RequestResetEmailEmailResetEmailRequestPostResponses[keyof RequestResetEmailEmailResetEmailRequestPostResponses];

export type ResetEmailEmailResetEmailGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Token
         */
        token: string;
    };
    url: '/email/reset/email';
};

export type ResetEmailEmailResetEmailGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetEmailEmailResetEmailGetError = ResetEmailEmailResetEmailGetErrors[keyof ResetEmailEmailResetEmailGetErrors];

export type ResetEmailEmailResetEmailGetResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type ResetEmailEmailResetEmailGetResponse = ResetEmailEmailResetEmailGetResponses[keyof ResetEmailEmailResetEmailGetResponses];

export type RequestResetPasswordEmailResetPasswordRequestPostData = {
    body: ResetPassword;
    path?: never;
    query?: never;
    url: '/email/reset/password/request';
};

export type RequestResetPasswordEmailResetPasswordRequestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RequestResetPasswordEmailResetPasswordRequestPostError = RequestResetPasswordEmailResetPasswordRequestPostErrors[keyof RequestResetPasswordEmailResetPasswordRequestPostErrors];

export type RequestResetPasswordEmailResetPasswordRequestPostResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type RequestResetPasswordEmailResetPasswordRequestPostResponse = RequestResetPasswordEmailResetPasswordRequestPostResponses[keyof RequestResetPasswordEmailResetPasswordRequestPostResponses];

export type RequestResetForgottenPasswordEmailResetPasswordRestorePostData = {
    body: RequestResetForgottenPassword;
    path?: never;
    query?: never;
    url: '/email/reset/password/restore';
};

export type RequestResetForgottenPasswordEmailResetPasswordRestorePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RequestResetForgottenPasswordEmailResetPasswordRestorePostError = RequestResetForgottenPasswordEmailResetPasswordRestorePostErrors[keyof RequestResetForgottenPasswordEmailResetPasswordRestorePostErrors];

export type RequestResetForgottenPasswordEmailResetPasswordRestorePostResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type RequestResetForgottenPasswordEmailResetPasswordRestorePostResponse = RequestResetForgottenPasswordEmailResetPasswordRestorePostResponses[keyof RequestResetForgottenPasswordEmailResetPasswordRestorePostResponses];

export type ResetForgottenPasswordEmailResetPasswordPostData = {
    body: ResetForgottenPassword;
    headers: {
        /**
         * Reset-Token
         */
        'reset-token': string;
    };
    path?: never;
    query?: never;
    url: '/email/reset/password';
};

export type ResetForgottenPasswordEmailResetPasswordPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetForgottenPasswordEmailResetPasswordPostError = ResetForgottenPasswordEmailResetPasswordPostErrors[keyof ResetForgottenPasswordEmailResetPasswordPostErrors];

export type ResetForgottenPasswordEmailResetPasswordPostResponses = {
    /**
     * Successful Response
     */
    200: StatusResponseModel;
};

export type ResetForgottenPasswordEmailResetPasswordPostResponse = ResetForgottenPasswordEmailResetPasswordPostResponses[keyof ResetForgottenPasswordEmailResetPasswordPostResponses];

export type RegisterGithubRegistrationPostData = {
    body: AuthBackendAuthPluginsGithubGithubAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/github/registration';
};

export type RegisterGithubRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterGithubRegistrationPostError = RegisterGithubRegistrationPostErrors[keyof RegisterGithubRegistrationPostErrors];

export type RegisterGithubRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterGithubRegistrationPostResponse = RegisterGithubRegistrationPostResponses[keyof RegisterGithubRegistrationPostResponses];

export type LoginGithubLoginPostData = {
    body: AuthBackendAuthPluginsGithubGithubAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/github/login';
};

export type LoginGithubLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginGithubLoginPostError = LoginGithubLoginPostErrors[keyof LoginGithubLoginPostErrors];

export type LoginGithubLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginGithubLoginPostResponse = LoginGithubLoginPostResponses[keyof LoginGithubLoginPostResponses];

export type RedirectUrlGithubRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/github/redirect_url';
};

export type RedirectUrlGithubRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlGithubRedirectUrlGetResponse = RedirectUrlGithubRedirectUrlGetResponses[keyof RedirectUrlGithubRedirectUrlGetResponses];

export type AuthUrlGithubAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/github/auth_url';
};

export type AuthUrlGithubAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlGithubAuthUrlGetResponse = AuthUrlGithubAuthUrlGetResponses[keyof AuthUrlGithubAuthUrlGetResponses];

export type UnregisterGithubDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/github';
};

export type UnregisterGithubDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterGoogleRegistrationPostData = {
    body: AuthBackendAuthPluginsGoogleGoogleAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/google/registration';
};

export type RegisterGoogleRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterGoogleRegistrationPostError = RegisterGoogleRegistrationPostErrors[keyof RegisterGoogleRegistrationPostErrors];

export type RegisterGoogleRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterGoogleRegistrationPostResponse = RegisterGoogleRegistrationPostResponses[keyof RegisterGoogleRegistrationPostResponses];

export type LoginGoogleLoginPostData = {
    body: AuthBackendAuthPluginsGoogleGoogleAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/google/login';
};

export type LoginGoogleLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginGoogleLoginPostError = LoginGoogleLoginPostErrors[keyof LoginGoogleLoginPostErrors];

export type LoginGoogleLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginGoogleLoginPostResponse = LoginGoogleLoginPostResponses[keyof LoginGoogleLoginPostResponses];

export type RedirectUrlGoogleRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/google/redirect_url';
};

export type RedirectUrlGoogleRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlGoogleRedirectUrlGetResponse = RedirectUrlGoogleRedirectUrlGetResponses[keyof RedirectUrlGoogleRedirectUrlGetResponses];

export type AuthUrlGoogleAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/google/auth_url';
};

export type AuthUrlGoogleAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlGoogleAuthUrlGetResponse = AuthUrlGoogleAuthUrlGetResponses[keyof AuthUrlGoogleAuthUrlGetResponses];

export type UnregisterGoogleDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/google';
};

export type UnregisterGoogleDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterLkMsuRegistrationPostData = {
    body: AuthBackendAuthPluginsLkmsuLkmsuAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/lk-msu/registration';
};

export type RegisterLkMsuRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterLkMsuRegistrationPostError = RegisterLkMsuRegistrationPostErrors[keyof RegisterLkMsuRegistrationPostErrors];

export type RegisterLkMsuRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterLkMsuRegistrationPostResponse = RegisterLkMsuRegistrationPostResponses[keyof RegisterLkMsuRegistrationPostResponses];

export type LoginLkMsuLoginPostData = {
    body: AuthBackendAuthPluginsLkmsuLkmsuAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/lk-msu/login';
};

export type LoginLkMsuLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLkMsuLoginPostError = LoginLkMsuLoginPostErrors[keyof LoginLkMsuLoginPostErrors];

export type LoginLkMsuLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginLkMsuLoginPostResponse = LoginLkMsuLoginPostResponses[keyof LoginLkMsuLoginPostResponses];

export type RedirectUrlLkMsuRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lk-msu/redirect_url';
};

export type RedirectUrlLkMsuRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlLkMsuRedirectUrlGetResponse = RedirectUrlLkMsuRedirectUrlGetResponses[keyof RedirectUrlLkMsuRedirectUrlGetResponses];

export type AuthUrlLkMsuAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lk-msu/auth_url';
};

export type AuthUrlLkMsuAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlLkMsuAuthUrlGetResponse = AuthUrlLkMsuAuthUrlGetResponses[keyof AuthUrlLkMsuAuthUrlGetResponses];

export type UnregisterLkMsuDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lk-msu';
};

export type UnregisterLkMsuDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UnlinkMailuUserIdLinkDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/mailu/{user_id}/link';
};

export type UnlinkMailuUserIdLinkDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnlinkMailuUserIdLinkDeleteError = UnlinkMailuUserIdLinkDeleteErrors[keyof UnlinkMailuUserIdLinkDeleteErrors];

export type UnlinkMailuUserIdLinkDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetLinkMailuUserIdLinkGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/mailu/{user_id}/link';
};

export type GetLinkMailuUserIdLinkGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetLinkMailuUserIdLinkGetError = GetLinkMailuUserIdLinkGetErrors[keyof GetLinkMailuUserIdLinkGetErrors];

export type GetLinkMailuUserIdLinkGetResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type GetLinkMailuUserIdLinkGetResponse = GetLinkMailuUserIdLinkGetResponses[keyof GetLinkMailuUserIdLinkGetResponses];

export type LinkMailuUserIdLinkPostData = {
    body: LinkOuterAccount;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/mailu/{user_id}/link';
};

export type LinkMailuUserIdLinkPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LinkMailuUserIdLinkPostError = LinkMailuUserIdLinkPostErrors[keyof LinkMailuUserIdLinkPostErrors];

export type LinkMailuUserIdLinkPostResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type LinkMailuUserIdLinkPostResponse = LinkMailuUserIdLinkPostResponses[keyof LinkMailuUserIdLinkPostResponses];

export type RegisterYandexRegistrationPostData = {
    body: AuthBackendAuthPluginsYandexYandexAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/yandex/registration';
};

export type RegisterYandexRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterYandexRegistrationPostError = RegisterYandexRegistrationPostErrors[keyof RegisterYandexRegistrationPostErrors];

export type RegisterYandexRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterYandexRegistrationPostResponse = RegisterYandexRegistrationPostResponses[keyof RegisterYandexRegistrationPostResponses];

export type LoginYandexLoginPostData = {
    body: AuthBackendAuthPluginsYandexYandexAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/yandex/login';
};

export type LoginYandexLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginYandexLoginPostError = LoginYandexLoginPostErrors[keyof LoginYandexLoginPostErrors];

export type LoginYandexLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginYandexLoginPostResponse = LoginYandexLoginPostResponses[keyof LoginYandexLoginPostResponses];

export type RedirectUrlYandexRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/yandex/redirect_url';
};

export type RedirectUrlYandexRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlYandexRedirectUrlGetResponse = RedirectUrlYandexRedirectUrlGetResponses[keyof RedirectUrlYandexRedirectUrlGetResponses];

export type AuthUrlYandexAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/yandex/auth_url';
};

export type AuthUrlYandexAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlYandexAuthUrlGetResponse = AuthUrlYandexAuthUrlGetResponses[keyof AuthUrlYandexAuthUrlGetResponses];

export type UnregisterYandexDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/yandex';
};

export type UnregisterYandexDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterMyMsuRegistrationPostData = {
    body: AuthBackendAuthPluginsYandexYandexAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/my-msu/registration';
};

export type RegisterMyMsuRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterMyMsuRegistrationPostError = RegisterMyMsuRegistrationPostErrors[keyof RegisterMyMsuRegistrationPostErrors];

export type RegisterMyMsuRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterMyMsuRegistrationPostResponse = RegisterMyMsuRegistrationPostResponses[keyof RegisterMyMsuRegistrationPostResponses];

export type LoginMyMsuLoginPostData = {
    body: AuthBackendAuthPluginsYandexYandexAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/my-msu/login';
};

export type LoginMyMsuLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginMyMsuLoginPostError = LoginMyMsuLoginPostErrors[keyof LoginMyMsuLoginPostErrors];

export type LoginMyMsuLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginMyMsuLoginPostResponse = LoginMyMsuLoginPostResponses[keyof LoginMyMsuLoginPostResponses];

export type RedirectUrlMyMsuRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/my-msu/redirect_url';
};

export type RedirectUrlMyMsuRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlMyMsuRedirectUrlGetResponse = RedirectUrlMyMsuRedirectUrlGetResponses[keyof RedirectUrlMyMsuRedirectUrlGetResponses];

export type AuthUrlMyMsuAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/my-msu/auth_url';
};

export type AuthUrlMyMsuAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlMyMsuAuthUrlGetResponse = AuthUrlMyMsuAuthUrlGetResponses[keyof AuthUrlMyMsuAuthUrlGetResponses];

export type UnregisterMyMsuDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/my-msu';
};

export type UnregisterMyMsuDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterPhysicsMsuRegistrationPostData = {
    body: AuthBackendAuthPluginsGoogleGoogleAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/physics-msu/registration';
};

export type RegisterPhysicsMsuRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterPhysicsMsuRegistrationPostError = RegisterPhysicsMsuRegistrationPostErrors[keyof RegisterPhysicsMsuRegistrationPostErrors];

export type RegisterPhysicsMsuRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterPhysicsMsuRegistrationPostResponse = RegisterPhysicsMsuRegistrationPostResponses[keyof RegisterPhysicsMsuRegistrationPostResponses];

export type LoginPhysicsMsuLoginPostData = {
    body: AuthBackendAuthPluginsGoogleGoogleAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/physics-msu/login';
};

export type LoginPhysicsMsuLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginPhysicsMsuLoginPostError = LoginPhysicsMsuLoginPostErrors[keyof LoginPhysicsMsuLoginPostErrors];

export type LoginPhysicsMsuLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginPhysicsMsuLoginPostResponse = LoginPhysicsMsuLoginPostResponses[keyof LoginPhysicsMsuLoginPostResponses];

export type RedirectUrlPhysicsMsuRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/physics-msu/redirect_url';
};

export type RedirectUrlPhysicsMsuRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlPhysicsMsuRedirectUrlGetResponse = RedirectUrlPhysicsMsuRedirectUrlGetResponses[keyof RedirectUrlPhysicsMsuRedirectUrlGetResponses];

export type AuthUrlPhysicsMsuAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/physics-msu/auth_url';
};

export type AuthUrlPhysicsMsuAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlPhysicsMsuAuthUrlGetResponse = AuthUrlPhysicsMsuAuthUrlGetResponses[keyof AuthUrlPhysicsMsuAuthUrlGetResponses];

export type UnregisterPhysicsMsuDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/physics-msu';
};

export type UnregisterPhysicsMsuDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UnlinkPostgresUserIdLinkDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/postgres/{user_id}/link';
};

export type UnlinkPostgresUserIdLinkDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnlinkPostgresUserIdLinkDeleteError = UnlinkPostgresUserIdLinkDeleteErrors[keyof UnlinkPostgresUserIdLinkDeleteErrors];

export type UnlinkPostgresUserIdLinkDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetLinkPostgresUserIdLinkGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/postgres/{user_id}/link';
};

export type GetLinkPostgresUserIdLinkGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetLinkPostgresUserIdLinkGetError = GetLinkPostgresUserIdLinkGetErrors[keyof GetLinkPostgresUserIdLinkGetErrors];

export type GetLinkPostgresUserIdLinkGetResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type GetLinkPostgresUserIdLinkGetResponse = GetLinkPostgresUserIdLinkGetResponses[keyof GetLinkPostgresUserIdLinkGetResponses];

export type LinkPostgresUserIdLinkPostData = {
    body: LinkOuterAccount;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/postgres/{user_id}/link';
};

export type LinkPostgresUserIdLinkPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LinkPostgresUserIdLinkPostError = LinkPostgresUserIdLinkPostErrors[keyof LinkPostgresUserIdLinkPostErrors];

export type LinkPostgresUserIdLinkPostResponses = {
    /**
     * Successful Response
     */
    200: GetOuterAccount;
};

export type LinkPostgresUserIdLinkPostResponse = LinkPostgresUserIdLinkPostResponses[keyof LinkPostgresUserIdLinkPostResponses];

export type RegisterTelegramRegistrationPostData = {
    body: AuthBackendAuthPluginsTelegramTelegramAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/telegram/registration';
};

export type RegisterTelegramRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterTelegramRegistrationPostError = RegisterTelegramRegistrationPostErrors[keyof RegisterTelegramRegistrationPostErrors];

export type RegisterTelegramRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterTelegramRegistrationPostResponse = RegisterTelegramRegistrationPostResponses[keyof RegisterTelegramRegistrationPostResponses];

export type LoginTelegramLoginPostData = {
    body: AuthBackendAuthPluginsTelegramTelegramAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/telegram/login';
};

export type LoginTelegramLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginTelegramLoginPostError = LoginTelegramLoginPostErrors[keyof LoginTelegramLoginPostErrors];

export type LoginTelegramLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginTelegramLoginPostResponse = LoginTelegramLoginPostResponses[keyof LoginTelegramLoginPostResponses];

export type RedirectUrlTelegramRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/telegram/redirect_url';
};

export type RedirectUrlTelegramRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlTelegramRedirectUrlGetResponse = RedirectUrlTelegramRedirectUrlGetResponses[keyof RedirectUrlTelegramRedirectUrlGetResponses];

export type AuthUrlTelegramAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/telegram/auth_url';
};

export type AuthUrlTelegramAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlTelegramAuthUrlGetResponse = AuthUrlTelegramAuthUrlGetResponses[keyof AuthUrlTelegramAuthUrlGetResponses];

export type UnregisterTelegramDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/telegram';
};

export type UnregisterTelegramDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterVkRegistrationPostData = {
    body: AuthBackendAuthPluginsVkVkAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/vk/registration';
};

export type RegisterVkRegistrationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterVkRegistrationPostError = RegisterVkRegistrationPostErrors[keyof RegisterVkRegistrationPostErrors];

export type RegisterVkRegistrationPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type RegisterVkRegistrationPostResponse = RegisterVkRegistrationPostResponses[keyof RegisterVkRegistrationPostResponses];

export type LoginVkLoginPostData = {
    body: AuthBackendAuthPluginsVkVkAuthOauthResponseSchema;
    path?: never;
    query?: never;
    url: '/vk/login';
};

export type LoginVkLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginVkLoginPostError = LoginVkLoginPostErrors[keyof LoginVkLoginPostErrors];

export type LoginVkLoginPostResponses = {
    /**
     * Successful Response
     */
    200: AuthBackendAuthMethodSessionSession;
};

export type LoginVkLoginPostResponse = LoginVkLoginPostResponses[keyof LoginVkLoginPostResponses];

export type RedirectUrlVkRedirectUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vk/redirect_url';
};

export type RedirectUrlVkRedirectUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type RedirectUrlVkRedirectUrlGetResponse = RedirectUrlVkRedirectUrlGetResponses[keyof RedirectUrlVkRedirectUrlGetResponses];

export type AuthUrlVkAuthUrlGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vk/auth_url';
};

export type AuthUrlVkAuthUrlGetResponses = {
    /**
     * Successful Response
     */
    200: UrlSchema;
};

export type AuthUrlVkAuthUrlGetResponse = AuthUrlVkAuthUrlGetResponses[keyof AuthUrlVkAuthUrlGetResponses];

export type UnregisterVkDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vk';
};

export type UnregisterVkDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
