// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
	type Options,
	approveEmailEmailApproveGet,
	authUrlAuthenticAuthUrlGet,
	authUrlGithubAuthUrlGet,
	authUrlGoogleAuthUrlGet,
	authUrlLkMsuAuthUrlGet,
	authUrlMyMsuAuthUrlGet,
	authUrlPhysicsMsuAuthUrlGet,
	authUrlTelegramAuthUrlGet,
	authUrlVkAuthUrlGet,
	authUrlYandexAuthUrlGet,
	createGroupGroupPost,
	createScopeScopePost,
	createSessionSessionPost,
	deleteGroupGroupIdDelete,
	deleteScopeScopeIdDelete,
	deleteSessionSessionTokenDelete,
	deleteSessionsSessionDelete,
	deleteUserUserUserIdDelete,
	getGroupGroupIdGet,
	getGroupsGroupGet,
	getLinkAirflowUserIdLinkGet,
	getLinkCoderUserIdLinkGet,
	getLinkMailuUserIdLinkGet,
	getLinkPostgresUserIdLinkGet,
	getScopeScopeIdGet,
	getScopesScopeGet,
	getSessionsSessionGet,
	getUserUserUserIdGet,
	getUsersUserGet,
	linkAirflowUserIdLinkPost,
	linkCoderUserIdLinkPost,
	linkMailuUserIdLinkPost,
	linkPostgresUserIdLinkPost,
	loginAuthenticLoginPost,
	loginEmailLoginPost,
	loginGithubLoginPost,
	loginGoogleLoginPost,
	loginLkMsuLoginPost,
	loginMyMsuLoginPost,
	loginPhysicsMsuLoginPost,
	loginTelegramLoginPost,
	loginVkLoginPost,
	loginYandexLoginPost,
	logoutLogoutPost,
	meMeGet,
	patchGroupGroupIdPatch,
	patchUserUserUserIdPatch,
	redirectUrlAuthenticRedirectUrlGet,
	redirectUrlGithubRedirectUrlGet,
	redirectUrlGoogleRedirectUrlGet,
	redirectUrlLkMsuRedirectUrlGet,
	redirectUrlMyMsuRedirectUrlGet,
	redirectUrlPhysicsMsuRedirectUrlGet,
	redirectUrlTelegramRedirectUrlGet,
	redirectUrlVkRedirectUrlGet,
	redirectUrlYandexRedirectUrlGet,
	registerAuthenticRegistrationPost,
	registerEmailRegistrationPost,
	registerGithubRegistrationPost,
	registerGoogleRegistrationPost,
	registerLkMsuRegistrationPost,
	registerMyMsuRegistrationPost,
	registerPhysicsMsuRegistrationPost,
	registerTelegramRegistrationPost,
	registerVkRegistrationPost,
	registerYandexRegistrationPost,
	requestResetEmailEmailResetEmailRequestPost,
	requestResetForgottenPasswordEmailResetPasswordRestorePost,
	requestResetPasswordEmailResetPasswordRequestPost,
	resetEmailEmailResetEmailGet,
	resetForgottenPasswordEmailResetPasswordPost,
	unlinkAirflowUserIdLinkDelete,
	unlinkCoderUserIdLinkDelete,
	unlinkMailuUserIdLinkDelete,
	unlinkPostgresUserIdLinkDelete,
	unregisterAuthenticDelete,
	unregisterGithubDelete,
	unregisterGoogleDelete,
	unregisterLkMsuDelete,
	unregisterMyMsuDelete,
	unregisterPhysicsMsuDelete,
	unregisterTelegramDelete,
	unregisterVkDelete,
	unregisterYandexDelete,
	updateScopeScopeIdPatch,
	updateSessionSessionIdPatch,
} from '../sdk.gen';
import type {
	ApproveEmailEmailApproveGetData,
	AuthUrlAuthenticAuthUrlGetData,
	AuthUrlGithubAuthUrlGetData,
	AuthUrlGoogleAuthUrlGetData,
	AuthUrlLkMsuAuthUrlGetData,
	AuthUrlMyMsuAuthUrlGetData,
	AuthUrlPhysicsMsuAuthUrlGetData,
	AuthUrlTelegramAuthUrlGetData,
	AuthUrlVkAuthUrlGetData,
	AuthUrlYandexAuthUrlGetData,
	CreateGroupGroupPostData,
	CreateGroupGroupPostError,
	CreateGroupGroupPostResponse,
	CreateScopeScopePostData,
	CreateScopeScopePostError,
	CreateScopeScopePostResponse,
	CreateSessionSessionPostData,
	CreateSessionSessionPostError,
	CreateSessionSessionPostResponse,
	DeleteGroupGroupIdDeleteData,
	DeleteGroupGroupIdDeleteError,
	DeleteScopeScopeIdDeleteData,
	DeleteScopeScopeIdDeleteError,
	DeleteScopeScopeIdDeleteResponse,
	DeleteSessionSessionTokenDeleteData,
	DeleteSessionSessionTokenDeleteError,
	DeleteSessionsSessionDeleteData,
	DeleteSessionsSessionDeleteError,
	DeleteUserUserUserIdDeleteData,
	DeleteUserUserUserIdDeleteError,
	GetGroupGroupIdGetData,
	GetGroupsGroupGetData,
	GetLinkAirflowUserIdLinkGetData,
	GetLinkCoderUserIdLinkGetData,
	GetLinkMailuUserIdLinkGetData,
	GetLinkPostgresUserIdLinkGetData,
	GetScopeScopeIdGetData,
	GetScopesScopeGetData,
	GetSessionsSessionGetData,
	GetUserUserUserIdGetData,
	GetUsersUserGetData,
	LinkAirflowUserIdLinkPostData,
	LinkAirflowUserIdLinkPostError,
	LinkAirflowUserIdLinkPostResponse,
	LinkCoderUserIdLinkPostData,
	LinkCoderUserIdLinkPostError,
	LinkCoderUserIdLinkPostResponse,
	LinkMailuUserIdLinkPostData,
	LinkMailuUserIdLinkPostError,
	LinkMailuUserIdLinkPostResponse,
	LinkPostgresUserIdLinkPostData,
	LinkPostgresUserIdLinkPostError,
	LinkPostgresUserIdLinkPostResponse,
	LoginAuthenticLoginPostData,
	LoginAuthenticLoginPostError,
	LoginAuthenticLoginPostResponse,
	LoginEmailLoginPostData,
	LoginEmailLoginPostError,
	LoginEmailLoginPostResponse,
	LoginGithubLoginPostData,
	LoginGithubLoginPostError,
	LoginGithubLoginPostResponse,
	LoginGoogleLoginPostData,
	LoginGoogleLoginPostError,
	LoginGoogleLoginPostResponse,
	LoginLkMsuLoginPostData,
	LoginLkMsuLoginPostError,
	LoginLkMsuLoginPostResponse,
	LoginMyMsuLoginPostData,
	LoginMyMsuLoginPostError,
	LoginMyMsuLoginPostResponse,
	LoginPhysicsMsuLoginPostData,
	LoginPhysicsMsuLoginPostError,
	LoginPhysicsMsuLoginPostResponse,
	LoginTelegramLoginPostData,
	LoginTelegramLoginPostError,
	LoginTelegramLoginPostResponse,
	LoginVkLoginPostData,
	LoginVkLoginPostError,
	LoginVkLoginPostResponse,
	LoginYandexLoginPostData,
	LoginYandexLoginPostError,
	LoginYandexLoginPostResponse,
	LogoutLogoutPostData,
	LogoutLogoutPostResponse,
	MeMeGetData,
	PatchGroupGroupIdPatchData,
	PatchGroupGroupIdPatchError,
	PatchGroupGroupIdPatchResponse,
	PatchUserUserUserIdPatchData,
	PatchUserUserUserIdPatchError,
	PatchUserUserUserIdPatchResponse,
	RedirectUrlAuthenticRedirectUrlGetData,
	RedirectUrlGithubRedirectUrlGetData,
	RedirectUrlGoogleRedirectUrlGetData,
	RedirectUrlLkMsuRedirectUrlGetData,
	RedirectUrlMyMsuRedirectUrlGetData,
	RedirectUrlPhysicsMsuRedirectUrlGetData,
	RedirectUrlTelegramRedirectUrlGetData,
	RedirectUrlVkRedirectUrlGetData,
	RedirectUrlYandexRedirectUrlGetData,
	RegisterAuthenticRegistrationPostData,
	RegisterAuthenticRegistrationPostError,
	RegisterAuthenticRegistrationPostResponse,
	RegisterEmailRegistrationPostData,
	RegisterEmailRegistrationPostError,
	RegisterEmailRegistrationPostResponse,
	RegisterGithubRegistrationPostData,
	RegisterGithubRegistrationPostError,
	RegisterGithubRegistrationPostResponse,
	RegisterGoogleRegistrationPostData,
	RegisterGoogleRegistrationPostError,
	RegisterGoogleRegistrationPostResponse,
	RegisterLkMsuRegistrationPostData,
	RegisterLkMsuRegistrationPostError,
	RegisterLkMsuRegistrationPostResponse,
	RegisterMyMsuRegistrationPostData,
	RegisterMyMsuRegistrationPostError,
	RegisterMyMsuRegistrationPostResponse,
	RegisterPhysicsMsuRegistrationPostData,
	RegisterPhysicsMsuRegistrationPostError,
	RegisterPhysicsMsuRegistrationPostResponse,
	RegisterTelegramRegistrationPostData,
	RegisterTelegramRegistrationPostError,
	RegisterTelegramRegistrationPostResponse,
	RegisterVkRegistrationPostData,
	RegisterVkRegistrationPostError,
	RegisterVkRegistrationPostResponse,
	RegisterYandexRegistrationPostData,
	RegisterYandexRegistrationPostError,
	RegisterYandexRegistrationPostResponse,
	RequestResetEmailEmailResetEmailRequestPostData,
	RequestResetEmailEmailResetEmailRequestPostError,
	RequestResetEmailEmailResetEmailRequestPostResponse,
	RequestResetForgottenPasswordEmailResetPasswordRestorePostData,
	RequestResetForgottenPasswordEmailResetPasswordRestorePostError,
	RequestResetForgottenPasswordEmailResetPasswordRestorePostResponse,
	RequestResetPasswordEmailResetPasswordRequestPostData,
	RequestResetPasswordEmailResetPasswordRequestPostError,
	RequestResetPasswordEmailResetPasswordRequestPostResponse,
	ResetEmailEmailResetEmailGetData,
	ResetForgottenPasswordEmailResetPasswordPostData,
	ResetForgottenPasswordEmailResetPasswordPostError,
	ResetForgottenPasswordEmailResetPasswordPostResponse,
	UnlinkAirflowUserIdLinkDeleteData,
	UnlinkAirflowUserIdLinkDeleteError,
	UnlinkCoderUserIdLinkDeleteData,
	UnlinkCoderUserIdLinkDeleteError,
	UnlinkMailuUserIdLinkDeleteData,
	UnlinkMailuUserIdLinkDeleteError,
	UnlinkPostgresUserIdLinkDeleteData,
	UnlinkPostgresUserIdLinkDeleteError,
	UnregisterAuthenticDeleteData,
	UnregisterGithubDeleteData,
	UnregisterGoogleDeleteData,
	UnregisterLkMsuDeleteData,
	UnregisterMyMsuDeleteData,
	UnregisterPhysicsMsuDeleteData,
	UnregisterTelegramDeleteData,
	UnregisterVkDeleteData,
	UnregisterYandexDeleteData,
	UpdateScopeScopeIdPatchData,
	UpdateScopeScopeIdPatchError,
	UpdateScopeScopeIdPatchResponse,
	UpdateSessionSessionIdPatchData,
	UpdateSessionSessionIdPatchError,
	UpdateSessionSessionIdPatchResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const logoutLogoutPostQueryKey = (options?: Options<LogoutLogoutPostData>) =>
	createQueryKey('logoutLogoutPost', options);

export const logoutLogoutPostOptions = (options?: Options<LogoutLogoutPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await logoutLogoutPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: logoutLogoutPostQueryKey(options),
	});
};

export const logoutLogoutPostMutation = (options?: Partial<Options<LogoutLogoutPostData>>) => {
	const mutationOptions: UseMutationOptions<
		LogoutLogoutPostResponse,
		DefaultError,
		Options<LogoutLogoutPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await logoutLogoutPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const meMeGetQueryKey = (options?: Options<MeMeGetData>) =>
	createQueryKey('meMeGet', options);

export const meMeGetOptions = (options?: Options<MeMeGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await meMeGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: meMeGetQueryKey(options),
	});
};

export const deleteSessionsSessionDeleteMutation = (
	options?: Partial<Options<DeleteSessionsSessionDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteSessionsSessionDeleteError,
		Options<DeleteSessionsSessionDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteSessionsSessionDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getSessionsSessionGetQueryKey = (options?: Options<GetSessionsSessionGetData>) =>
	createQueryKey('getSessionsSessionGet', options);

export const getSessionsSessionGetOptions = (options?: Options<GetSessionsSessionGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getSessionsSessionGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getSessionsSessionGetQueryKey(options),
	});
};

export const createSessionSessionPostQueryKey = (options: Options<CreateSessionSessionPostData>) =>
	createQueryKey('createSessionSessionPost', options);

export const createSessionSessionPostOptions = (options: Options<CreateSessionSessionPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createSessionSessionPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createSessionSessionPostQueryKey(options),
	});
};

export const createSessionSessionPostMutation = (
	options?: Partial<Options<CreateSessionSessionPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateSessionSessionPostResponse,
		CreateSessionSessionPostError,
		Options<CreateSessionSessionPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createSessionSessionPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteSessionSessionTokenDeleteMutation = (
	options?: Partial<Options<DeleteSessionSessionTokenDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteSessionSessionTokenDeleteError,
		Options<DeleteSessionSessionTokenDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteSessionSessionTokenDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const updateSessionSessionIdPatchMutation = (
	options?: Partial<Options<UpdateSessionSessionIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		UpdateSessionSessionIdPatchResponse,
		UpdateSessionSessionIdPatchError,
		Options<UpdateSessionSessionIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateSessionSessionIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteGroupGroupIdDeleteMutation = (
	options?: Partial<Options<DeleteGroupGroupIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteGroupGroupIdDeleteError,
		Options<DeleteGroupGroupIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteGroupGroupIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getGroupGroupIdGetQueryKey = (options: Options<GetGroupGroupIdGetData>) =>
	createQueryKey('getGroupGroupIdGet', options);

export const getGroupGroupIdGetOptions = (options: Options<GetGroupGroupIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getGroupGroupIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getGroupGroupIdGetQueryKey(options),
	});
};

export const patchGroupGroupIdPatchMutation = (
	options?: Partial<Options<PatchGroupGroupIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchGroupGroupIdPatchResponse,
		PatchGroupGroupIdPatchError,
		Options<PatchGroupGroupIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchGroupGroupIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getGroupsGroupGetQueryKey = (options?: Options<GetGroupsGroupGetData>) =>
	createQueryKey('getGroupsGroupGet', options);

export const getGroupsGroupGetOptions = (options?: Options<GetGroupsGroupGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getGroupsGroupGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getGroupsGroupGetQueryKey(options),
	});
};

export const createGroupGroupPostQueryKey = (options: Options<CreateGroupGroupPostData>) =>
	createQueryKey('createGroupGroupPost', options);

export const createGroupGroupPostOptions = (options: Options<CreateGroupGroupPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createGroupGroupPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createGroupGroupPostQueryKey(options),
	});
};

export const createGroupGroupPostMutation = (
	options?: Partial<Options<CreateGroupGroupPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateGroupGroupPostResponse,
		CreateGroupGroupPostError,
		Options<CreateGroupGroupPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createGroupGroupPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getScopesScopeGetQueryKey = (options?: Options<GetScopesScopeGetData>) =>
	createQueryKey('getScopesScopeGet', options);

export const getScopesScopeGetOptions = (options?: Options<GetScopesScopeGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getScopesScopeGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getScopesScopeGetQueryKey(options),
	});
};

export const createScopeScopePostQueryKey = (options: Options<CreateScopeScopePostData>) =>
	createQueryKey('createScopeScopePost', options);

export const createScopeScopePostOptions = (options: Options<CreateScopeScopePostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createScopeScopePost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createScopeScopePostQueryKey(options),
	});
};

export const createScopeScopePostMutation = (
	options?: Partial<Options<CreateScopeScopePostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateScopeScopePostResponse,
		CreateScopeScopePostError,
		Options<CreateScopeScopePostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createScopeScopePost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteScopeScopeIdDeleteMutation = (
	options?: Partial<Options<DeleteScopeScopeIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		DeleteScopeScopeIdDeleteResponse,
		DeleteScopeScopeIdDeleteError,
		Options<DeleteScopeScopeIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteScopeScopeIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getScopeScopeIdGetQueryKey = (options: Options<GetScopeScopeIdGetData>) =>
	createQueryKey('getScopeScopeIdGet', options);

export const getScopeScopeIdGetOptions = (options: Options<GetScopeScopeIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getScopeScopeIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getScopeScopeIdGetQueryKey(options),
	});
};

export const updateScopeScopeIdPatchMutation = (
	options?: Partial<Options<UpdateScopeScopeIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		UpdateScopeScopeIdPatchResponse,
		UpdateScopeScopeIdPatchError,
		Options<UpdateScopeScopeIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateScopeScopeIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteUserUserUserIdDeleteMutation = (
	options?: Partial<Options<DeleteUserUserUserIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteUserUserUserIdDeleteError,
		Options<DeleteUserUserUserIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteUserUserUserIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getUserUserUserIdGetQueryKey = (options: Options<GetUserUserUserIdGetData>) =>
	createQueryKey('getUserUserUserIdGet', options);

export const getUserUserUserIdGetOptions = (options: Options<GetUserUserUserIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getUserUserUserIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getUserUserUserIdGetQueryKey(options),
	});
};

export const patchUserUserUserIdPatchMutation = (
	options?: Partial<Options<PatchUserUserUserIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchUserUserUserIdPatchResponse,
		PatchUserUserUserIdPatchError,
		Options<PatchUserUserUserIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchUserUserUserIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getUsersUserGetQueryKey = (options?: Options<GetUsersUserGetData>) =>
	createQueryKey('getUsersUserGet', options);

export const getUsersUserGetOptions = (options?: Options<GetUsersUserGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getUsersUserGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getUsersUserGetQueryKey(options),
	});
};

export const unlinkAirflowUserIdLinkDeleteMutation = (
	options?: Partial<Options<UnlinkAirflowUserIdLinkDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		UnlinkAirflowUserIdLinkDeleteError,
		Options<UnlinkAirflowUserIdLinkDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unlinkAirflowUserIdLinkDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getLinkAirflowUserIdLinkGetQueryKey = (
	options: Options<GetLinkAirflowUserIdLinkGetData>
) => createQueryKey('getLinkAirflowUserIdLinkGet', options);

export const getLinkAirflowUserIdLinkGetOptions = (
	options: Options<GetLinkAirflowUserIdLinkGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getLinkAirflowUserIdLinkGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getLinkAirflowUserIdLinkGetQueryKey(options),
	});
};

export const linkAirflowUserIdLinkPostQueryKey = (
	options: Options<LinkAirflowUserIdLinkPostData>
) => createQueryKey('linkAirflowUserIdLinkPost', options);

export const linkAirflowUserIdLinkPostOptions = (
	options: Options<LinkAirflowUserIdLinkPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await linkAirflowUserIdLinkPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: linkAirflowUserIdLinkPostQueryKey(options),
	});
};

export const linkAirflowUserIdLinkPostMutation = (
	options?: Partial<Options<LinkAirflowUserIdLinkPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LinkAirflowUserIdLinkPostResponse,
		LinkAirflowUserIdLinkPostError,
		Options<LinkAirflowUserIdLinkPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await linkAirflowUserIdLinkPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerAuthenticRegistrationPostQueryKey = (
	options: Options<RegisterAuthenticRegistrationPostData>
) => createQueryKey('registerAuthenticRegistrationPost', options);

export const registerAuthenticRegistrationPostOptions = (
	options: Options<RegisterAuthenticRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerAuthenticRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerAuthenticRegistrationPostQueryKey(options),
	});
};

export const registerAuthenticRegistrationPostMutation = (
	options?: Partial<Options<RegisterAuthenticRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterAuthenticRegistrationPostResponse,
		RegisterAuthenticRegistrationPostError,
		Options<RegisterAuthenticRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerAuthenticRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginAuthenticLoginPostQueryKey = (options: Options<LoginAuthenticLoginPostData>) =>
	createQueryKey('loginAuthenticLoginPost', options);

export const loginAuthenticLoginPostOptions = (options: Options<LoginAuthenticLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginAuthenticLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginAuthenticLoginPostQueryKey(options),
	});
};

export const loginAuthenticLoginPostMutation = (
	options?: Partial<Options<LoginAuthenticLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginAuthenticLoginPostResponse,
		LoginAuthenticLoginPostError,
		Options<LoginAuthenticLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginAuthenticLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlAuthenticRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlAuthenticRedirectUrlGetData>
) => createQueryKey('redirectUrlAuthenticRedirectUrlGet', options);

export const redirectUrlAuthenticRedirectUrlGetOptions = (
	options?: Options<RedirectUrlAuthenticRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlAuthenticRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlAuthenticRedirectUrlGetQueryKey(options),
	});
};

export const authUrlAuthenticAuthUrlGetQueryKey = (
	options?: Options<AuthUrlAuthenticAuthUrlGetData>
) => createQueryKey('authUrlAuthenticAuthUrlGet', options);

export const authUrlAuthenticAuthUrlGetOptions = (
	options?: Options<AuthUrlAuthenticAuthUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlAuthenticAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlAuthenticAuthUrlGetQueryKey(options),
	});
};

export const unregisterAuthenticDeleteMutation = (
	options?: Partial<Options<UnregisterAuthenticDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterAuthenticDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterAuthenticDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const unlinkCoderUserIdLinkDeleteMutation = (
	options?: Partial<Options<UnlinkCoderUserIdLinkDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		UnlinkCoderUserIdLinkDeleteError,
		Options<UnlinkCoderUserIdLinkDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unlinkCoderUserIdLinkDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getLinkCoderUserIdLinkGetQueryKey = (
	options: Options<GetLinkCoderUserIdLinkGetData>
) => createQueryKey('getLinkCoderUserIdLinkGet', options);

export const getLinkCoderUserIdLinkGetOptions = (
	options: Options<GetLinkCoderUserIdLinkGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getLinkCoderUserIdLinkGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getLinkCoderUserIdLinkGetQueryKey(options),
	});
};

export const linkCoderUserIdLinkPostQueryKey = (options: Options<LinkCoderUserIdLinkPostData>) =>
	createQueryKey('linkCoderUserIdLinkPost', options);

export const linkCoderUserIdLinkPostOptions = (options: Options<LinkCoderUserIdLinkPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await linkCoderUserIdLinkPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: linkCoderUserIdLinkPostQueryKey(options),
	});
};

export const linkCoderUserIdLinkPostMutation = (
	options?: Partial<Options<LinkCoderUserIdLinkPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LinkCoderUserIdLinkPostResponse,
		LinkCoderUserIdLinkPostError,
		Options<LinkCoderUserIdLinkPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await linkCoderUserIdLinkPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerEmailRegistrationPostQueryKey = (
	options: Options<RegisterEmailRegistrationPostData>
) => createQueryKey('registerEmailRegistrationPost', options);

export const registerEmailRegistrationPostOptions = (
	options: Options<RegisterEmailRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerEmailRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerEmailRegistrationPostQueryKey(options),
	});
};

export const registerEmailRegistrationPostMutation = (
	options?: Partial<Options<RegisterEmailRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterEmailRegistrationPostResponse,
		RegisterEmailRegistrationPostError,
		Options<RegisterEmailRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerEmailRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginEmailLoginPostQueryKey = (options: Options<LoginEmailLoginPostData>) =>
	createQueryKey('loginEmailLoginPost', options);

export const loginEmailLoginPostOptions = (options: Options<LoginEmailLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginEmailLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginEmailLoginPostQueryKey(options),
	});
};

export const loginEmailLoginPostMutation = (
	options?: Partial<Options<LoginEmailLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginEmailLoginPostResponse,
		LoginEmailLoginPostError,
		Options<LoginEmailLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginEmailLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const approveEmailEmailApproveGetQueryKey = (
	options: Options<ApproveEmailEmailApproveGetData>
) => createQueryKey('approveEmailEmailApproveGet', options);

export const approveEmailEmailApproveGetOptions = (
	options: Options<ApproveEmailEmailApproveGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await approveEmailEmailApproveGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: approveEmailEmailApproveGetQueryKey(options),
	});
};

export const requestResetEmailEmailResetEmailRequestPostQueryKey = (
	options: Options<RequestResetEmailEmailResetEmailRequestPostData>
) => createQueryKey('requestResetEmailEmailResetEmailRequestPost', options);

export const requestResetEmailEmailResetEmailRequestPostOptions = (
	options: Options<RequestResetEmailEmailResetEmailRequestPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await requestResetEmailEmailResetEmailRequestPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: requestResetEmailEmailResetEmailRequestPostQueryKey(options),
	});
};

export const requestResetEmailEmailResetEmailRequestPostMutation = (
	options?: Partial<Options<RequestResetEmailEmailResetEmailRequestPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RequestResetEmailEmailResetEmailRequestPostResponse,
		RequestResetEmailEmailResetEmailRequestPostError,
		Options<RequestResetEmailEmailResetEmailRequestPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await requestResetEmailEmailResetEmailRequestPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const resetEmailEmailResetEmailGetQueryKey = (
	options: Options<ResetEmailEmailResetEmailGetData>
) => createQueryKey('resetEmailEmailResetEmailGet', options);

export const resetEmailEmailResetEmailGetOptions = (
	options: Options<ResetEmailEmailResetEmailGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await resetEmailEmailResetEmailGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: resetEmailEmailResetEmailGetQueryKey(options),
	});
};

export const requestResetPasswordEmailResetPasswordRequestPostQueryKey = (
	options: Options<RequestResetPasswordEmailResetPasswordRequestPostData>
) => createQueryKey('requestResetPasswordEmailResetPasswordRequestPost', options);

export const requestResetPasswordEmailResetPasswordRequestPostOptions = (
	options: Options<RequestResetPasswordEmailResetPasswordRequestPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await requestResetPasswordEmailResetPasswordRequestPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: requestResetPasswordEmailResetPasswordRequestPostQueryKey(options),
	});
};

export const requestResetPasswordEmailResetPasswordRequestPostMutation = (
	options?: Partial<Options<RequestResetPasswordEmailResetPasswordRequestPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RequestResetPasswordEmailResetPasswordRequestPostResponse,
		RequestResetPasswordEmailResetPasswordRequestPostError,
		Options<RequestResetPasswordEmailResetPasswordRequestPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await requestResetPasswordEmailResetPasswordRequestPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const requestResetForgottenPasswordEmailResetPasswordRestorePostQueryKey = (
	options: Options<RequestResetForgottenPasswordEmailResetPasswordRestorePostData>
) => createQueryKey('requestResetForgottenPasswordEmailResetPasswordRestorePost', options);

export const requestResetForgottenPasswordEmailResetPasswordRestorePostOptions = (
	options: Options<RequestResetForgottenPasswordEmailResetPasswordRestorePostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await requestResetForgottenPasswordEmailResetPasswordRestorePost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: requestResetForgottenPasswordEmailResetPasswordRestorePostQueryKey(options),
	});
};

export const requestResetForgottenPasswordEmailResetPasswordRestorePostMutation = (
	options?: Partial<Options<RequestResetForgottenPasswordEmailResetPasswordRestorePostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RequestResetForgottenPasswordEmailResetPasswordRestorePostResponse,
		RequestResetForgottenPasswordEmailResetPasswordRestorePostError,
		Options<RequestResetForgottenPasswordEmailResetPasswordRestorePostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await requestResetForgottenPasswordEmailResetPasswordRestorePost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const resetForgottenPasswordEmailResetPasswordPostQueryKey = (
	options: Options<ResetForgottenPasswordEmailResetPasswordPostData>
) => createQueryKey('resetForgottenPasswordEmailResetPasswordPost', options);

export const resetForgottenPasswordEmailResetPasswordPostOptions = (
	options: Options<ResetForgottenPasswordEmailResetPasswordPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await resetForgottenPasswordEmailResetPasswordPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: resetForgottenPasswordEmailResetPasswordPostQueryKey(options),
	});
};

export const resetForgottenPasswordEmailResetPasswordPostMutation = (
	options?: Partial<Options<ResetForgottenPasswordEmailResetPasswordPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		ResetForgottenPasswordEmailResetPasswordPostResponse,
		ResetForgottenPasswordEmailResetPasswordPostError,
		Options<ResetForgottenPasswordEmailResetPasswordPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await resetForgottenPasswordEmailResetPasswordPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerGithubRegistrationPostQueryKey = (
	options: Options<RegisterGithubRegistrationPostData>
) => createQueryKey('registerGithubRegistrationPost', options);

export const registerGithubRegistrationPostOptions = (
	options: Options<RegisterGithubRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerGithubRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerGithubRegistrationPostQueryKey(options),
	});
};

export const registerGithubRegistrationPostMutation = (
	options?: Partial<Options<RegisterGithubRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterGithubRegistrationPostResponse,
		RegisterGithubRegistrationPostError,
		Options<RegisterGithubRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerGithubRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginGithubLoginPostQueryKey = (options: Options<LoginGithubLoginPostData>) =>
	createQueryKey('loginGithubLoginPost', options);

export const loginGithubLoginPostOptions = (options: Options<LoginGithubLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginGithubLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginGithubLoginPostQueryKey(options),
	});
};

export const loginGithubLoginPostMutation = (
	options?: Partial<Options<LoginGithubLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginGithubLoginPostResponse,
		LoginGithubLoginPostError,
		Options<LoginGithubLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginGithubLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlGithubRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlGithubRedirectUrlGetData>
) => createQueryKey('redirectUrlGithubRedirectUrlGet', options);

export const redirectUrlGithubRedirectUrlGetOptions = (
	options?: Options<RedirectUrlGithubRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlGithubRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlGithubRedirectUrlGetQueryKey(options),
	});
};

export const authUrlGithubAuthUrlGetQueryKey = (options?: Options<AuthUrlGithubAuthUrlGetData>) =>
	createQueryKey('authUrlGithubAuthUrlGet', options);

export const authUrlGithubAuthUrlGetOptions = (options?: Options<AuthUrlGithubAuthUrlGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlGithubAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlGithubAuthUrlGetQueryKey(options),
	});
};

export const unregisterGithubDeleteMutation = (
	options?: Partial<Options<UnregisterGithubDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterGithubDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterGithubDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerGoogleRegistrationPostQueryKey = (
	options: Options<RegisterGoogleRegistrationPostData>
) => createQueryKey('registerGoogleRegistrationPost', options);

export const registerGoogleRegistrationPostOptions = (
	options: Options<RegisterGoogleRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerGoogleRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerGoogleRegistrationPostQueryKey(options),
	});
};

export const registerGoogleRegistrationPostMutation = (
	options?: Partial<Options<RegisterGoogleRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterGoogleRegistrationPostResponse,
		RegisterGoogleRegistrationPostError,
		Options<RegisterGoogleRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerGoogleRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginGoogleLoginPostQueryKey = (options: Options<LoginGoogleLoginPostData>) =>
	createQueryKey('loginGoogleLoginPost', options);

export const loginGoogleLoginPostOptions = (options: Options<LoginGoogleLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginGoogleLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginGoogleLoginPostQueryKey(options),
	});
};

export const loginGoogleLoginPostMutation = (
	options?: Partial<Options<LoginGoogleLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginGoogleLoginPostResponse,
		LoginGoogleLoginPostError,
		Options<LoginGoogleLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginGoogleLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlGoogleRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlGoogleRedirectUrlGetData>
) => createQueryKey('redirectUrlGoogleRedirectUrlGet', options);

export const redirectUrlGoogleRedirectUrlGetOptions = (
	options?: Options<RedirectUrlGoogleRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlGoogleRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlGoogleRedirectUrlGetQueryKey(options),
	});
};

export const authUrlGoogleAuthUrlGetQueryKey = (options?: Options<AuthUrlGoogleAuthUrlGetData>) =>
	createQueryKey('authUrlGoogleAuthUrlGet', options);

export const authUrlGoogleAuthUrlGetOptions = (options?: Options<AuthUrlGoogleAuthUrlGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlGoogleAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlGoogleAuthUrlGetQueryKey(options),
	});
};

export const unregisterGoogleDeleteMutation = (
	options?: Partial<Options<UnregisterGoogleDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterGoogleDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterGoogleDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerLkMsuRegistrationPostQueryKey = (
	options: Options<RegisterLkMsuRegistrationPostData>
) => createQueryKey('registerLkMsuRegistrationPost', options);

export const registerLkMsuRegistrationPostOptions = (
	options: Options<RegisterLkMsuRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerLkMsuRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerLkMsuRegistrationPostQueryKey(options),
	});
};

export const registerLkMsuRegistrationPostMutation = (
	options?: Partial<Options<RegisterLkMsuRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterLkMsuRegistrationPostResponse,
		RegisterLkMsuRegistrationPostError,
		Options<RegisterLkMsuRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerLkMsuRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginLkMsuLoginPostQueryKey = (options: Options<LoginLkMsuLoginPostData>) =>
	createQueryKey('loginLkMsuLoginPost', options);

export const loginLkMsuLoginPostOptions = (options: Options<LoginLkMsuLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginLkMsuLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginLkMsuLoginPostQueryKey(options),
	});
};

export const loginLkMsuLoginPostMutation = (
	options?: Partial<Options<LoginLkMsuLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginLkMsuLoginPostResponse,
		LoginLkMsuLoginPostError,
		Options<LoginLkMsuLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginLkMsuLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlLkMsuRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlLkMsuRedirectUrlGetData>
) => createQueryKey('redirectUrlLkMsuRedirectUrlGet', options);

export const redirectUrlLkMsuRedirectUrlGetOptions = (
	options?: Options<RedirectUrlLkMsuRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlLkMsuRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlLkMsuRedirectUrlGetQueryKey(options),
	});
};

export const authUrlLkMsuAuthUrlGetQueryKey = (options?: Options<AuthUrlLkMsuAuthUrlGetData>) =>
	createQueryKey('authUrlLkMsuAuthUrlGet', options);

export const authUrlLkMsuAuthUrlGetOptions = (options?: Options<AuthUrlLkMsuAuthUrlGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlLkMsuAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlLkMsuAuthUrlGetQueryKey(options),
	});
};

export const unregisterLkMsuDeleteMutation = (
	options?: Partial<Options<UnregisterLkMsuDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterLkMsuDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterLkMsuDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const unlinkMailuUserIdLinkDeleteMutation = (
	options?: Partial<Options<UnlinkMailuUserIdLinkDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		UnlinkMailuUserIdLinkDeleteError,
		Options<UnlinkMailuUserIdLinkDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unlinkMailuUserIdLinkDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getLinkMailuUserIdLinkGetQueryKey = (
	options: Options<GetLinkMailuUserIdLinkGetData>
) => createQueryKey('getLinkMailuUserIdLinkGet', options);

export const getLinkMailuUserIdLinkGetOptions = (
	options: Options<GetLinkMailuUserIdLinkGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getLinkMailuUserIdLinkGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getLinkMailuUserIdLinkGetQueryKey(options),
	});
};

export const linkMailuUserIdLinkPostQueryKey = (options: Options<LinkMailuUserIdLinkPostData>) =>
	createQueryKey('linkMailuUserIdLinkPost', options);

export const linkMailuUserIdLinkPostOptions = (options: Options<LinkMailuUserIdLinkPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await linkMailuUserIdLinkPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: linkMailuUserIdLinkPostQueryKey(options),
	});
};

export const linkMailuUserIdLinkPostMutation = (
	options?: Partial<Options<LinkMailuUserIdLinkPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LinkMailuUserIdLinkPostResponse,
		LinkMailuUserIdLinkPostError,
		Options<LinkMailuUserIdLinkPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await linkMailuUserIdLinkPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerYandexRegistrationPostQueryKey = (
	options: Options<RegisterYandexRegistrationPostData>
) => createQueryKey('registerYandexRegistrationPost', options);

export const registerYandexRegistrationPostOptions = (
	options: Options<RegisterYandexRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerYandexRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerYandexRegistrationPostQueryKey(options),
	});
};

export const registerYandexRegistrationPostMutation = (
	options?: Partial<Options<RegisterYandexRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterYandexRegistrationPostResponse,
		RegisterYandexRegistrationPostError,
		Options<RegisterYandexRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerYandexRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginYandexLoginPostQueryKey = (options: Options<LoginYandexLoginPostData>) =>
	createQueryKey('loginYandexLoginPost', options);

export const loginYandexLoginPostOptions = (options: Options<LoginYandexLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginYandexLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginYandexLoginPostQueryKey(options),
	});
};

export const loginYandexLoginPostMutation = (
	options?: Partial<Options<LoginYandexLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginYandexLoginPostResponse,
		LoginYandexLoginPostError,
		Options<LoginYandexLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginYandexLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlYandexRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlYandexRedirectUrlGetData>
) => createQueryKey('redirectUrlYandexRedirectUrlGet', options);

export const redirectUrlYandexRedirectUrlGetOptions = (
	options?: Options<RedirectUrlYandexRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlYandexRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlYandexRedirectUrlGetQueryKey(options),
	});
};

export const authUrlYandexAuthUrlGetQueryKey = (options?: Options<AuthUrlYandexAuthUrlGetData>) =>
	createQueryKey('authUrlYandexAuthUrlGet', options);

export const authUrlYandexAuthUrlGetOptions = (options?: Options<AuthUrlYandexAuthUrlGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlYandexAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlYandexAuthUrlGetQueryKey(options),
	});
};

export const unregisterYandexDeleteMutation = (
	options?: Partial<Options<UnregisterYandexDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterYandexDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterYandexDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerMyMsuRegistrationPostQueryKey = (
	options: Options<RegisterMyMsuRegistrationPostData>
) => createQueryKey('registerMyMsuRegistrationPost', options);

export const registerMyMsuRegistrationPostOptions = (
	options: Options<RegisterMyMsuRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerMyMsuRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerMyMsuRegistrationPostQueryKey(options),
	});
};

export const registerMyMsuRegistrationPostMutation = (
	options?: Partial<Options<RegisterMyMsuRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterMyMsuRegistrationPostResponse,
		RegisterMyMsuRegistrationPostError,
		Options<RegisterMyMsuRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerMyMsuRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginMyMsuLoginPostQueryKey = (options: Options<LoginMyMsuLoginPostData>) =>
	createQueryKey('loginMyMsuLoginPost', options);

export const loginMyMsuLoginPostOptions = (options: Options<LoginMyMsuLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginMyMsuLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginMyMsuLoginPostQueryKey(options),
	});
};

export const loginMyMsuLoginPostMutation = (
	options?: Partial<Options<LoginMyMsuLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginMyMsuLoginPostResponse,
		LoginMyMsuLoginPostError,
		Options<LoginMyMsuLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginMyMsuLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlMyMsuRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlMyMsuRedirectUrlGetData>
) => createQueryKey('redirectUrlMyMsuRedirectUrlGet', options);

export const redirectUrlMyMsuRedirectUrlGetOptions = (
	options?: Options<RedirectUrlMyMsuRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlMyMsuRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlMyMsuRedirectUrlGetQueryKey(options),
	});
};

export const authUrlMyMsuAuthUrlGetQueryKey = (options?: Options<AuthUrlMyMsuAuthUrlGetData>) =>
	createQueryKey('authUrlMyMsuAuthUrlGet', options);

export const authUrlMyMsuAuthUrlGetOptions = (options?: Options<AuthUrlMyMsuAuthUrlGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlMyMsuAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlMyMsuAuthUrlGetQueryKey(options),
	});
};

export const unregisterMyMsuDeleteMutation = (
	options?: Partial<Options<UnregisterMyMsuDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterMyMsuDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterMyMsuDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerPhysicsMsuRegistrationPostQueryKey = (
	options: Options<RegisterPhysicsMsuRegistrationPostData>
) => createQueryKey('registerPhysicsMsuRegistrationPost', options);

export const registerPhysicsMsuRegistrationPostOptions = (
	options: Options<RegisterPhysicsMsuRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerPhysicsMsuRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerPhysicsMsuRegistrationPostQueryKey(options),
	});
};

export const registerPhysicsMsuRegistrationPostMutation = (
	options?: Partial<Options<RegisterPhysicsMsuRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterPhysicsMsuRegistrationPostResponse,
		RegisterPhysicsMsuRegistrationPostError,
		Options<RegisterPhysicsMsuRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerPhysicsMsuRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginPhysicsMsuLoginPostQueryKey = (options: Options<LoginPhysicsMsuLoginPostData>) =>
	createQueryKey('loginPhysicsMsuLoginPost', options);

export const loginPhysicsMsuLoginPostOptions = (options: Options<LoginPhysicsMsuLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginPhysicsMsuLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginPhysicsMsuLoginPostQueryKey(options),
	});
};

export const loginPhysicsMsuLoginPostMutation = (
	options?: Partial<Options<LoginPhysicsMsuLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginPhysicsMsuLoginPostResponse,
		LoginPhysicsMsuLoginPostError,
		Options<LoginPhysicsMsuLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginPhysicsMsuLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlPhysicsMsuRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlPhysicsMsuRedirectUrlGetData>
) => createQueryKey('redirectUrlPhysicsMsuRedirectUrlGet', options);

export const redirectUrlPhysicsMsuRedirectUrlGetOptions = (
	options?: Options<RedirectUrlPhysicsMsuRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlPhysicsMsuRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlPhysicsMsuRedirectUrlGetQueryKey(options),
	});
};

export const authUrlPhysicsMsuAuthUrlGetQueryKey = (
	options?: Options<AuthUrlPhysicsMsuAuthUrlGetData>
) => createQueryKey('authUrlPhysicsMsuAuthUrlGet', options);

export const authUrlPhysicsMsuAuthUrlGetOptions = (
	options?: Options<AuthUrlPhysicsMsuAuthUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlPhysicsMsuAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlPhysicsMsuAuthUrlGetQueryKey(options),
	});
};

export const unregisterPhysicsMsuDeleteMutation = (
	options?: Partial<Options<UnregisterPhysicsMsuDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterPhysicsMsuDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterPhysicsMsuDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const unlinkPostgresUserIdLinkDeleteMutation = (
	options?: Partial<Options<UnlinkPostgresUserIdLinkDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		UnlinkPostgresUserIdLinkDeleteError,
		Options<UnlinkPostgresUserIdLinkDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unlinkPostgresUserIdLinkDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getLinkPostgresUserIdLinkGetQueryKey = (
	options: Options<GetLinkPostgresUserIdLinkGetData>
) => createQueryKey('getLinkPostgresUserIdLinkGet', options);

export const getLinkPostgresUserIdLinkGetOptions = (
	options: Options<GetLinkPostgresUserIdLinkGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getLinkPostgresUserIdLinkGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getLinkPostgresUserIdLinkGetQueryKey(options),
	});
};

export const linkPostgresUserIdLinkPostQueryKey = (
	options: Options<LinkPostgresUserIdLinkPostData>
) => createQueryKey('linkPostgresUserIdLinkPost', options);

export const linkPostgresUserIdLinkPostOptions = (
	options: Options<LinkPostgresUserIdLinkPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await linkPostgresUserIdLinkPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: linkPostgresUserIdLinkPostQueryKey(options),
	});
};

export const linkPostgresUserIdLinkPostMutation = (
	options?: Partial<Options<LinkPostgresUserIdLinkPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LinkPostgresUserIdLinkPostResponse,
		LinkPostgresUserIdLinkPostError,
		Options<LinkPostgresUserIdLinkPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await linkPostgresUserIdLinkPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerTelegramRegistrationPostQueryKey = (
	options: Options<RegisterTelegramRegistrationPostData>
) => createQueryKey('registerTelegramRegistrationPost', options);

export const registerTelegramRegistrationPostOptions = (
	options: Options<RegisterTelegramRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerTelegramRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerTelegramRegistrationPostQueryKey(options),
	});
};

export const registerTelegramRegistrationPostMutation = (
	options?: Partial<Options<RegisterTelegramRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterTelegramRegistrationPostResponse,
		RegisterTelegramRegistrationPostError,
		Options<RegisterTelegramRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerTelegramRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginTelegramLoginPostQueryKey = (options: Options<LoginTelegramLoginPostData>) =>
	createQueryKey('loginTelegramLoginPost', options);

export const loginTelegramLoginPostOptions = (options: Options<LoginTelegramLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginTelegramLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginTelegramLoginPostQueryKey(options),
	});
};

export const loginTelegramLoginPostMutation = (
	options?: Partial<Options<LoginTelegramLoginPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		LoginTelegramLoginPostResponse,
		LoginTelegramLoginPostError,
		Options<LoginTelegramLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginTelegramLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlTelegramRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlTelegramRedirectUrlGetData>
) => createQueryKey('redirectUrlTelegramRedirectUrlGet', options);

export const redirectUrlTelegramRedirectUrlGetOptions = (
	options?: Options<RedirectUrlTelegramRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlTelegramRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlTelegramRedirectUrlGetQueryKey(options),
	});
};

export const authUrlTelegramAuthUrlGetQueryKey = (
	options?: Options<AuthUrlTelegramAuthUrlGetData>
) => createQueryKey('authUrlTelegramAuthUrlGet', options);

export const authUrlTelegramAuthUrlGetOptions = (
	options?: Options<AuthUrlTelegramAuthUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlTelegramAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlTelegramAuthUrlGetQueryKey(options),
	});
};

export const unregisterTelegramDeleteMutation = (
	options?: Partial<Options<UnregisterTelegramDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterTelegramDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterTelegramDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const registerVkRegistrationPostQueryKey = (
	options: Options<RegisterVkRegistrationPostData>
) => createQueryKey('registerVkRegistrationPost', options);

export const registerVkRegistrationPostOptions = (
	options: Options<RegisterVkRegistrationPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await registerVkRegistrationPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: registerVkRegistrationPostQueryKey(options),
	});
};

export const registerVkRegistrationPostMutation = (
	options?: Partial<Options<RegisterVkRegistrationPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		RegisterVkRegistrationPostResponse,
		RegisterVkRegistrationPostError,
		Options<RegisterVkRegistrationPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await registerVkRegistrationPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const loginVkLoginPostQueryKey = (options: Options<LoginVkLoginPostData>) =>
	createQueryKey('loginVkLoginPost', options);

export const loginVkLoginPostOptions = (options: Options<LoginVkLoginPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await loginVkLoginPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: loginVkLoginPostQueryKey(options),
	});
};

export const loginVkLoginPostMutation = (options?: Partial<Options<LoginVkLoginPostData>>) => {
	const mutationOptions: UseMutationOptions<
		LoginVkLoginPostResponse,
		LoginVkLoginPostError,
		Options<LoginVkLoginPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await loginVkLoginPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const redirectUrlVkRedirectUrlGetQueryKey = (
	options?: Options<RedirectUrlVkRedirectUrlGetData>
) => createQueryKey('redirectUrlVkRedirectUrlGet', options);

export const redirectUrlVkRedirectUrlGetOptions = (
	options?: Options<RedirectUrlVkRedirectUrlGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await redirectUrlVkRedirectUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: redirectUrlVkRedirectUrlGetQueryKey(options),
	});
};

export const authUrlVkAuthUrlGetQueryKey = (options?: Options<AuthUrlVkAuthUrlGetData>) =>
	createQueryKey('authUrlVkAuthUrlGet', options);

export const authUrlVkAuthUrlGetOptions = (options?: Options<AuthUrlVkAuthUrlGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await authUrlVkAuthUrlGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: authUrlVkAuthUrlGetQueryKey(options),
	});
};

export const unregisterVkDeleteMutation = (options?: Partial<Options<UnregisterVkDeleteData>>) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DefaultError,
		Options<UnregisterVkDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await unregisterVkDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};
