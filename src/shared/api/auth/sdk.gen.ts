// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
	ApproveEmailEmailApproveGetData,
	ApproveEmailEmailApproveGetError,
	ApproveEmailEmailApproveGetResponse,
	AuthUrlAuthenticAuthUrlGetData,
	AuthUrlAuthenticAuthUrlGetResponse,
	AuthUrlGithubAuthUrlGetData,
	AuthUrlGithubAuthUrlGetResponse,
	AuthUrlGoogleAuthUrlGetData,
	AuthUrlGoogleAuthUrlGetResponse,
	AuthUrlLkMsuAuthUrlGetData,
	AuthUrlLkMsuAuthUrlGetResponse,
	AuthUrlMyMsuAuthUrlGetData,
	AuthUrlMyMsuAuthUrlGetResponse,
	AuthUrlPhysicsMsuAuthUrlGetData,
	AuthUrlPhysicsMsuAuthUrlGetResponse,
	AuthUrlTelegramAuthUrlGetData,
	AuthUrlTelegramAuthUrlGetResponse,
	AuthUrlVkAuthUrlGetData,
	AuthUrlVkAuthUrlGetResponse,
	AuthUrlYandexAuthUrlGetData,
	AuthUrlYandexAuthUrlGetResponse,
	CreateGroupGroupPostData,
	CreateGroupGroupPostError,
	CreateGroupGroupPostResponse,
	CreateScopeScopePostData,
	CreateScopeScopePostError,
	CreateScopeScopePostResponse,
	CreateSessionSessionPostData,
	CreateSessionSessionPostError,
	CreateSessionSessionPostResponse,
	DeleteGroupGroupIdDeleteData,
	DeleteGroupGroupIdDeleteError,
	DeleteScopeScopeIdDeleteData,
	DeleteScopeScopeIdDeleteError,
	DeleteScopeScopeIdDeleteResponse,
	DeleteSessionSessionTokenDeleteData,
	DeleteSessionSessionTokenDeleteError,
	DeleteSessionsSessionDeleteData,
	DeleteSessionsSessionDeleteError,
	DeleteUserUserUserIdDeleteData,
	DeleteUserUserUserIdDeleteError,
	GetGroupGroupIdGetData,
	GetGroupGroupIdGetError,
	GetGroupGroupIdGetResponse,
	GetGroupsGroupGetData,
	GetGroupsGroupGetError,
	GetGroupsGroupGetResponse,
	GetLinkAirflowUserIdLinkGetData,
	GetLinkAirflowUserIdLinkGetError,
	GetLinkAirflowUserIdLinkGetResponse,
	GetLinkCoderUserIdLinkGetData,
	GetLinkCoderUserIdLinkGetError,
	GetLinkCoderUserIdLinkGetResponse,
	GetLinkMailuUserIdLinkGetData,
	GetLinkMailuUserIdLinkGetError,
	GetLinkMailuUserIdLinkGetResponse,
	GetLinkPostgresUserIdLinkGetData,
	GetLinkPostgresUserIdLinkGetError,
	GetLinkPostgresUserIdLinkGetResponse,
	GetScopeScopeIdGetData,
	GetScopeScopeIdGetError,
	GetScopeScopeIdGetResponse,
	GetScopesScopeGetData,
	GetScopesScopeGetResponse,
	GetSessionsSessionGetData,
	GetSessionsSessionGetError,
	GetSessionsSessionGetResponse,
	GetUserUserUserIdGetData,
	GetUserUserUserIdGetError,
	GetUserUserUserIdGetResponse,
	GetUsersUserGetData,
	GetUsersUserGetError,
	GetUsersUserGetResponse,
	LinkAirflowUserIdLinkPostData,
	LinkAirflowUserIdLinkPostError,
	LinkAirflowUserIdLinkPostResponse,
	LinkCoderUserIdLinkPostData,
	LinkCoderUserIdLinkPostError,
	LinkCoderUserIdLinkPostResponse,
	LinkMailuUserIdLinkPostData,
	LinkMailuUserIdLinkPostError,
	LinkMailuUserIdLinkPostResponse,
	LinkPostgresUserIdLinkPostData,
	LinkPostgresUserIdLinkPostError,
	LinkPostgresUserIdLinkPostResponse,
	LoginAuthenticLoginPostData,
	LoginAuthenticLoginPostError,
	LoginAuthenticLoginPostResponse,
	LoginEmailLoginPostData,
	LoginEmailLoginPostError,
	LoginEmailLoginPostResponse,
	LoginGithubLoginPostData,
	LoginGithubLoginPostError,
	LoginGithubLoginPostResponse,
	LoginGoogleLoginPostData,
	LoginGoogleLoginPostError,
	LoginGoogleLoginPostResponse,
	LoginLkMsuLoginPostData,
	LoginLkMsuLoginPostError,
	LoginLkMsuLoginPostResponse,
	LoginMyMsuLoginPostData,
	LoginMyMsuLoginPostError,
	LoginMyMsuLoginPostResponse,
	LoginPhysicsMsuLoginPostData,
	LoginPhysicsMsuLoginPostError,
	LoginPhysicsMsuLoginPostResponse,
	LoginTelegramLoginPostData,
	LoginTelegramLoginPostError,
	LoginTelegramLoginPostResponse,
	LoginVkLoginPostData,
	LoginVkLoginPostError,
	LoginVkLoginPostResponse,
	LoginYandexLoginPostData,
	LoginYandexLoginPostError,
	LoginYandexLoginPostResponse,
	LogoutLogoutPostData,
	LogoutLogoutPostResponse,
	MeMeGetData,
	MeMeGetError,
	MeMeGetResponse,
	PatchGroupGroupIdPatchData,
	PatchGroupGroupIdPatchError,
	PatchGroupGroupIdPatchResponse,
	PatchUserUserUserIdPatchData,
	PatchUserUserUserIdPatchError,
	PatchUserUserUserIdPatchResponse,
	RedirectUrlAuthenticRedirectUrlGetData,
	RedirectUrlAuthenticRedirectUrlGetResponse,
	RedirectUrlGithubRedirectUrlGetData,
	RedirectUrlGithubRedirectUrlGetResponse,
	RedirectUrlGoogleRedirectUrlGetData,
	RedirectUrlGoogleRedirectUrlGetResponse,
	RedirectUrlLkMsuRedirectUrlGetData,
	RedirectUrlLkMsuRedirectUrlGetResponse,
	RedirectUrlMyMsuRedirectUrlGetData,
	RedirectUrlMyMsuRedirectUrlGetResponse,
	RedirectUrlPhysicsMsuRedirectUrlGetData,
	RedirectUrlPhysicsMsuRedirectUrlGetResponse,
	RedirectUrlTelegramRedirectUrlGetData,
	RedirectUrlTelegramRedirectUrlGetResponse,
	RedirectUrlVkRedirectUrlGetData,
	RedirectUrlVkRedirectUrlGetResponse,
	RedirectUrlYandexRedirectUrlGetData,
	RedirectUrlYandexRedirectUrlGetResponse,
	RegisterAuthenticRegistrationPostData,
	RegisterAuthenticRegistrationPostError,
	RegisterAuthenticRegistrationPostResponse,
	RegisterEmailRegistrationPostData,
	RegisterEmailRegistrationPostError,
	RegisterEmailRegistrationPostResponse,
	RegisterGithubRegistrationPostData,
	RegisterGithubRegistrationPostError,
	RegisterGithubRegistrationPostResponse,
	RegisterGoogleRegistrationPostData,
	RegisterGoogleRegistrationPostError,
	RegisterGoogleRegistrationPostResponse,
	RegisterLkMsuRegistrationPostData,
	RegisterLkMsuRegistrationPostError,
	RegisterLkMsuRegistrationPostResponse,
	RegisterMyMsuRegistrationPostData,
	RegisterMyMsuRegistrationPostError,
	RegisterMyMsuRegistrationPostResponse,
	RegisterPhysicsMsuRegistrationPostData,
	RegisterPhysicsMsuRegistrationPostError,
	RegisterPhysicsMsuRegistrationPostResponse,
	RegisterTelegramRegistrationPostData,
	RegisterTelegramRegistrationPostError,
	RegisterTelegramRegistrationPostResponse,
	RegisterVkRegistrationPostData,
	RegisterVkRegistrationPostError,
	RegisterVkRegistrationPostResponse,
	RegisterYandexRegistrationPostData,
	RegisterYandexRegistrationPostError,
	RegisterYandexRegistrationPostResponse,
	RequestResetEmailEmailResetEmailRequestPostData,
	RequestResetEmailEmailResetEmailRequestPostError,
	RequestResetEmailEmailResetEmailRequestPostResponse,
	RequestResetForgottenPasswordEmailResetPasswordRestorePostData,
	RequestResetForgottenPasswordEmailResetPasswordRestorePostError,
	RequestResetForgottenPasswordEmailResetPasswordRestorePostResponse,
	RequestResetPasswordEmailResetPasswordRequestPostData,
	RequestResetPasswordEmailResetPasswordRequestPostError,
	RequestResetPasswordEmailResetPasswordRequestPostResponse,
	ResetEmailEmailResetEmailGetData,
	ResetEmailEmailResetEmailGetError,
	ResetEmailEmailResetEmailGetResponse,
	ResetForgottenPasswordEmailResetPasswordPostData,
	ResetForgottenPasswordEmailResetPasswordPostError,
	ResetForgottenPasswordEmailResetPasswordPostResponse,
	UnlinkAirflowUserIdLinkDeleteData,
	UnlinkAirflowUserIdLinkDeleteError,
	UnlinkCoderUserIdLinkDeleteData,
	UnlinkCoderUserIdLinkDeleteError,
	UnlinkMailuUserIdLinkDeleteData,
	UnlinkMailuUserIdLinkDeleteError,
	UnlinkPostgresUserIdLinkDeleteData,
	UnlinkPostgresUserIdLinkDeleteError,
	UnregisterAuthenticDeleteData,
	UnregisterGithubDeleteData,
	UnregisterGoogleDeleteData,
	UnregisterLkMsuDeleteData,
	UnregisterMyMsuDeleteData,
	UnregisterPhysicsMsuDeleteData,
	UnregisterTelegramDeleteData,
	UnregisterVkDeleteData,
	UnregisterYandexDeleteData,
	UpdateScopeScopeIdPatchData,
	UpdateScopeScopeIdPatchError,
	UpdateScopeScopeIdPatchResponse,
	UpdateSessionSessionIdPatchData,
	UpdateSessionSessionIdPatchError,
	UpdateSessionSessionIdPatchResponse,
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Logout
 */
export const logoutLogoutPost = <ThrowOnError extends boolean = false>(
	options?: Options<LogoutLogoutPostData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<LogoutLogoutPostResponse, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/logout',
		...options,
	});
};

/**
 * Me
 */
export const meMeGet = <ThrowOnError extends boolean = false>(
	options?: Options<MeMeGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<MeMeGetResponse, MeMeGetError, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/me',
		...options,
	});
};

/**
 * Delete Sessions
 */
export const deleteSessionsSessionDelete = <ThrowOnError extends boolean = false>(
	options?: Options<DeleteSessionsSessionDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<
		unknown,
		DeleteSessionsSessionDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/session',
		...options,
	});
};

/**
 * Get Sessions
 */
export const getSessionsSessionGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetSessionsSessionGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetSessionsSessionGetResponse,
		GetSessionsSessionGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/session',
		...options,
	});
};

/**
 * Create Session
 */
export const createSessionSessionPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateSessionSessionPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateSessionSessionPostResponse,
		CreateSessionSessionPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/session',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Session
 */
export const deleteSessionSessionTokenDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteSessionSessionTokenDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteSessionSessionTokenDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/session/{token}',
		...options,
	});
};

/**
 * Update Session
 */
export const updateSessionSessionIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<UpdateSessionSessionIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		UpdateSessionSessionIdPatchResponse,
		UpdateSessionSessionIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/session/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Group
 * Scopes: `["auth.scope.delete"]`
 */
export const deleteGroupGroupIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteGroupGroupIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteGroupGroupIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/{id}',
		...options,
	});
};

/**
 * Get Group
 * Scopes: `["auth.group.read"]`
 */
export const getGroupGroupIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetGroupGroupIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetGroupGroupIdGetResponse,
		GetGroupGroupIdGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/{id}',
		...options,
	});
};

/**
 * Patch Group
 * Scopes: `["auth.group.update"]`
 */
export const patchGroupGroupIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<PatchGroupGroupIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		PatchGroupGroupIdPatchResponse,
		PatchGroupGroupIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Groups
 * Scopes: `["auth.group.read"]`
 */
export const getGroupsGroupGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetGroupsGroupGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetGroupsGroupGetResponse,
		GetGroupsGroupGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group',
		...options,
	});
};

/**
 * Create Group
 * Scopes: `["auth.group.create"]`
 */
export const createGroupGroupPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateGroupGroupPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateGroupGroupPostResponse,
		CreateGroupGroupPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/group',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Scopes
 * Scopes: `["auth.scope.read"]`
 */
export const getScopesScopeGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetScopesScopeGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetScopesScopeGetResponse, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/scope',
		...options,
	});
};

/**
 * Create Scope
 * Scopes: `["auth.scope.create"]`
 */
export const createScopeScopePost = <ThrowOnError extends boolean = false>(
	options: Options<CreateScopeScopePostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateScopeScopePostResponse,
		CreateScopeScopePostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/scope',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Scope
 * Scopes: `["auth.scope.delete"]`
 */
export const deleteScopeScopeIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteScopeScopeIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteScopeScopeIdDeleteResponse,
		DeleteScopeScopeIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/scope/{id}',
		...options,
	});
};

/**
 * Get Scope
 * Scopes: `["auth.scope.read"]`
 */
export const getScopeScopeIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetScopeScopeIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetScopeScopeIdGetResponse,
		GetScopeScopeIdGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/scope/{id}',
		...options,
	});
};

/**
 * Update Scope
 * Scopes: `["auth.scope.update"]`
 */
export const updateScopeScopeIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<UpdateScopeScopeIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		UpdateScopeScopeIdPatchResponse,
		UpdateScopeScopeIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/scope/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete User
 * Scopes: `["auth.user.delete"]` or `["auth.user.selfdelete"]` for self delete
 */
export const deleteUserUserUserIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteUserUserUserIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		DeleteUserUserUserIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/user/{user_id}',
		...options,
	});
};

/**
 * Get User
 * Scopes: `["auth.user.read"]`
 */
export const getUserUserUserIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetUserUserUserIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetUserUserUserIdGetResponse,
		GetUserUserUserIdGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/user/{user_id}',
		...options,
	});
};

/**
 * Patch User
 * Scopes: `["auth.user.update"]`
 */
export const patchUserUserUserIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<PatchUserUserUserIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		PatchUserUserUserIdPatchResponse,
		PatchUserUserUserIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/user/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Get Users
 * Scopes: `["auth.user.read"]`
 */
export const getUsersUserGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetUsersUserGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetUsersUserGetResponse,
		GetUsersUserGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/user',
		...options,
	});
};

/**
 *  Unlink
 * Отвязать внешний аккаунт пользователю
 *
 * Удалить данные может администратор
 */
export const unlinkAirflowUserIdLinkDelete = <ThrowOnError extends boolean = false>(
	options: Options<UnlinkAirflowUserIdLinkDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		UnlinkAirflowUserIdLinkDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/airflow/{user_id}/link',
		...options,
	});
};

/**
 *  Get Link
 * Получить данные внешнего аккаунт пользователя
 *
 * Получить данные может администратор или сам пользователь
 */
export const getLinkAirflowUserIdLinkGet = <ThrowOnError extends boolean = false>(
	options: Options<GetLinkAirflowUserIdLinkGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetLinkAirflowUserIdLinkGetResponse,
		GetLinkAirflowUserIdLinkGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/airflow/{user_id}/link',
		...options,
	});
};

/**
 *  Link
 * Привязать пользователю внешний аккаунт
 *
 * Привязать аккаунт может только администратор
 */
export const linkAirflowUserIdLinkPost = <ThrowOnError extends boolean = false>(
	options: Options<LinkAirflowUserIdLinkPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LinkAirflowUserIdLinkPostResponse,
		LinkAirflowUserIdLinkPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/airflow/{user_id}/link',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 */
export const registerAuthenticRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterAuthenticRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterAuthenticRegistrationPostResponse,
		RegisterAuthenticRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/authentic/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта Authentic
 */
export const loginAuthenticLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginAuthenticLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginAuthenticLoginPostResponse,
		LoginAuthenticLoginPostError,
		ThrowOnError
	>({
		url: '/authentic/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlAuthenticRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlAuthenticRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlAuthenticRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/authentic/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlAuthenticAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlAuthenticAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlAuthenticAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/authentic/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterAuthenticDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterAuthenticDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/authentic',
		...options,
	});
};

/**
 *  Unlink
 * Отвязать внешний аккаунт пользователю
 *
 * Удалить данные может администратор
 */
export const unlinkCoderUserIdLinkDelete = <ThrowOnError extends boolean = false>(
	options: Options<UnlinkCoderUserIdLinkDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		UnlinkCoderUserIdLinkDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/coder/{user_id}/link',
		...options,
	});
};

/**
 *  Get Link
 * Получить данные внешнего аккаунт пользователя
 *
 * Получить данные может администратор или сам пользователь
 */
export const getLinkCoderUserIdLinkGet = <ThrowOnError extends boolean = false>(
	options: Options<GetLinkCoderUserIdLinkGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetLinkCoderUserIdLinkGetResponse,
		GetLinkCoderUserIdLinkGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/coder/{user_id}/link',
		...options,
	});
};

/**
 *  Link
 * Привязать пользователю внешний аккаунт
 *
 * Привязать аккаунт может только администратор
 */
export const linkCoderUserIdLinkPost = <ThrowOnError extends boolean = false>(
	options: Options<LinkCoderUserIdLinkPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LinkCoderUserIdLinkPostResponse,
		LinkCoderUserIdLinkPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/coder/{user_id}/link',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Register
 */
export const registerEmailRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterEmailRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterEmailRegistrationPostResponse,
		RegisterEmailRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/email/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 */
export const loginEmailLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginEmailLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginEmailLoginPostResponse,
		LoginEmailLoginPostError,
		ThrowOnError
	>({
		url: '/email/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Approve Email
 */
export const approveEmailEmailApproveGet = <ThrowOnError extends boolean = false>(
	options: Options<ApproveEmailEmailApproveGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		ApproveEmailEmailApproveGetResponse,
		ApproveEmailEmailApproveGetError,
		ThrowOnError
	>({
		url: '/email/approve',
		...options,
	});
};

/**
 *  Request Reset Email
 */
export const requestResetEmailEmailResetEmailRequestPost = <ThrowOnError extends boolean = false>(
	options: Options<RequestResetEmailEmailResetEmailRequestPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RequestResetEmailEmailResetEmailRequestPostResponse,
		RequestResetEmailEmailResetEmailRequestPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/email/reset/email/request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Reset Email
 */
export const resetEmailEmailResetEmailGet = <ThrowOnError extends boolean = false>(
	options: Options<ResetEmailEmailResetEmailGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		ResetEmailEmailResetEmailGetResponse,
		ResetEmailEmailResetEmailGetError,
		ThrowOnError
	>({
		url: '/email/reset/email',
		...options,
	});
};

/**
 *  Request Reset Password
 */
export const requestResetPasswordEmailResetPasswordRequestPost = <
	ThrowOnError extends boolean = false,
>(
	options: Options<RequestResetPasswordEmailResetPasswordRequestPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RequestResetPasswordEmailResetPasswordRequestPostResponse,
		RequestResetPasswordEmailResetPasswordRequestPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/email/reset/password/request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Request Reset Forgotten Password
 */
export const requestResetForgottenPasswordEmailResetPasswordRestorePost = <
	ThrowOnError extends boolean = false,
>(
	options: Options<RequestResetForgottenPasswordEmailResetPasswordRestorePostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RequestResetForgottenPasswordEmailResetPasswordRestorePostResponse,
		RequestResetForgottenPasswordEmailResetPasswordRestorePostError,
		ThrowOnError
	>({
		url: '/email/reset/password/restore',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Reset Forgotten Password
 */
export const resetForgottenPasswordEmailResetPasswordPost = <ThrowOnError extends boolean = false>(
	options: Options<ResetForgottenPasswordEmailResetPasswordPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		ResetForgottenPasswordEmailResetPasswordPostResponse,
		ResetForgottenPasswordEmailResetPasswordPostError,
		ThrowOnError
	>({
		url: '/email/reset/password',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 *
 * Если передана активная сессия пользователя, то привязывает аккаунт https://github.com к
 * аккаунту в активной сессии. Иначе, создает новый пользователь и делает https://github.com
 * первым методом входа.
 */
export const registerGithubRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterGithubRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterGithubRegistrationPostResponse,
		RegisterGithubRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/github/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта https://github.com
 *
 * Производит вход, если находит пользователя по уникальному идендификатору. Если аккаунт не
 * найден, возвращает ошибка.
 */
export const loginGithubLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginGithubLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginGithubLoginPostResponse,
		LoginGithubLoginPostError,
		ThrowOnError
	>({
		url: '/github/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlGithubRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlGithubRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlGithubRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/github/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlGithubAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlGithubAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlGithubAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/github/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterGithubDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterGithubDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/github',
		...options,
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 *
 * Если передана активная сессия пользователя, то привязывает аккаунт Google к аккаунту в
 * активной сессии. иначе, создает новый пользователь и делает Google первым методом входа.
 */
export const registerGoogleRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterGoogleRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterGoogleRegistrationPostResponse,
		RegisterGoogleRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/google/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта Google
 *
 * Производит вход, если находит пользователя по Google client_id. Если аккаунт не найден,
 * возвращает ошибка.
 */
export const loginGoogleLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginGoogleLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginGoogleLoginPostResponse,
		LoginGoogleLoginPostError,
		ThrowOnError
	>({
		url: '/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlGoogleRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlGoogleRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlGoogleRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/google/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlGoogleAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlGoogleAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlGoogleAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/google/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterGoogleDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterGoogleDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/google',
		...options,
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 *
 * Если передана активная сессия пользователя, то привязывает аккаунт https://lk.msu.ru к
 * аккаунту в активной сессии. Иначе, создает новый пользователь и делает https://lk.msu.ru
 * первым методом входа.
 */
export const registerLkMsuRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterLkMsuRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterLkMsuRegistrationPostResponse,
		RegisterLkMsuRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lk-msu/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта https://lk.msu.ru
 *
 * Производит вход, если находит пользователя по уникальному идендификатору. Если аккаунт не
 * найден, возвращает ошибка.
 */
export const loginLkMsuLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginLkMsuLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginLkMsuLoginPostResponse,
		LoginLkMsuLoginPostError,
		ThrowOnError
	>({
		url: '/lk-msu/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlLkMsuRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlLkMsuRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlLkMsuRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/lk-msu/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlLkMsuAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlLkMsuAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlLkMsuAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/lk-msu/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterLkMsuDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterLkMsuDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/lk-msu',
		...options,
	});
};

/**
 *  Unlink
 * Отвязать внешний аккаунт пользователю
 *
 * Удалить данные может администратор
 */
export const unlinkMailuUserIdLinkDelete = <ThrowOnError extends boolean = false>(
	options: Options<UnlinkMailuUserIdLinkDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		UnlinkMailuUserIdLinkDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/mailu/{user_id}/link',
		...options,
	});
};

/**
 *  Get Link
 * Получить данные внешнего аккаунт пользователя
 *
 * Получить данные может администратор или сам пользователь
 */
export const getLinkMailuUserIdLinkGet = <ThrowOnError extends boolean = false>(
	options: Options<GetLinkMailuUserIdLinkGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetLinkMailuUserIdLinkGetResponse,
		GetLinkMailuUserIdLinkGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/mailu/{user_id}/link',
		...options,
	});
};

/**
 *  Link
 * Привязать пользователю внешний аккаунт
 *
 * Привязать аккаунт может только администратор
 */
export const linkMailuUserIdLinkPost = <ThrowOnError extends boolean = false>(
	options: Options<LinkMailuUserIdLinkPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LinkMailuUserIdLinkPostResponse,
		LinkMailuUserIdLinkPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/mailu/{user_id}/link',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 *
 * Если передана активная сессия пользователя, то привязывает аккаунт Yandex к
 * аккаунту в активной сессии. Иначе, создает новый пользователь и делает Yandex
 * первым методом входа.
 */
export const registerYandexRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterYandexRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterYandexRegistrationPostResponse,
		RegisterYandexRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/yandex/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта Yandex
 * Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
 * найден, возвращает ошибка.
 */
export const loginYandexLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginYandexLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginYandexLoginPostResponse,
		LoginYandexLoginPostError,
		ThrowOnError
	>({
		url: '/yandex/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlYandexRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlYandexRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlYandexRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/yandex/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlYandexAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlYandexAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlYandexAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/yandex/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterYandexDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterYandexDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/yandex',
		...options,
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 *
 * Если передана активная сессия пользователя, то привязывает аккаунт Yandex к
 * аккаунту в активной сессии. Иначе, создает новый пользователь и делает Yandex
 * первым методом входа.
 */
export const registerMyMsuRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterMyMsuRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterMyMsuRegistrationPostResponse,
		RegisterMyMsuRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/my-msu/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта Yandex
 * Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
 * найден, возвращает ошибка.
 */
export const loginMyMsuLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginMyMsuLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginMyMsuLoginPostResponse,
		LoginMyMsuLoginPostError,
		ThrowOnError
	>({
		url: '/my-msu/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlMyMsuRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlMyMsuRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlMyMsuRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/my-msu/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlMyMsuAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlMyMsuAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlMyMsuAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/my-msu/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterMyMsuDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterMyMsuDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/my-msu',
		...options,
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 *
 * Если передана активная сессия пользователя, то привязывает аккаунт Google к аккаунту в
 * активной сессии. иначе, создает новый пользователь и делает Google первым методом входа.
 */
export const registerPhysicsMsuRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterPhysicsMsuRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterPhysicsMsuRegistrationPostResponse,
		RegisterPhysicsMsuRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/physics-msu/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта Google
 *
 * Производит вход, если находит пользователя по Google client_id. Если аккаунт не найден,
 * возвращает ошибка.
 */
export const loginPhysicsMsuLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginPhysicsMsuLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginPhysicsMsuLoginPostResponse,
		LoginPhysicsMsuLoginPostError,
		ThrowOnError
	>({
		url: '/physics-msu/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlPhysicsMsuRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlPhysicsMsuRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlPhysicsMsuRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/physics-msu/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlPhysicsMsuAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlPhysicsMsuAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlPhysicsMsuAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/physics-msu/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterPhysicsMsuDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterPhysicsMsuDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/physics-msu',
		...options,
	});
};

/**
 *  Unlink
 * Отвязать внешний аккаунт пользователю
 *
 * Удалить данные может администратор
 */
export const unlinkPostgresUserIdLinkDelete = <ThrowOnError extends boolean = false>(
	options: Options<UnlinkPostgresUserIdLinkDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		unknown,
		UnlinkPostgresUserIdLinkDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/postgres/{user_id}/link',
		...options,
	});
};

/**
 *  Get Link
 * Получить данные внешнего аккаунт пользователя
 *
 * Получить данные может администратор или сам пользователь
 */
export const getLinkPostgresUserIdLinkGet = <ThrowOnError extends boolean = false>(
	options: Options<GetLinkPostgresUserIdLinkGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetLinkPostgresUserIdLinkGetResponse,
		GetLinkPostgresUserIdLinkGetError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/postgres/{user_id}/link',
		...options,
	});
};

/**
 *  Link
 * Привязать пользователю внешний аккаунт
 *
 * Привязать аккаунт может только администратор
 */
export const linkPostgresUserIdLinkPost = <ThrowOnError extends boolean = false>(
	options: Options<LinkPostgresUserIdLinkPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LinkPostgresUserIdLinkPostResponse,
		LinkPostgresUserIdLinkPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/postgres/{user_id}/link',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Register
 */
export const registerTelegramRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterTelegramRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterTelegramRegistrationPostResponse,
		RegisterTelegramRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/telegram/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта https://lk.msu.ru
 *
 * Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
 * найден, возвращает ошибка.
 */
export const loginTelegramLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginTelegramLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginTelegramLoginPostResponse,
		LoginTelegramLoginPostError,
		ThrowOnError
	>({
		url: '/telegram/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlTelegramRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlTelegramRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlTelegramRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/telegram/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlTelegramAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlTelegramAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		AuthUrlTelegramAuthUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/telegram/auth_url',
		...options,
	});
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterTelegramDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterTelegramDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/telegram',
		...options,
	});
};

/**
 *  Register
 * Создает аккаунт или привязывает существующий
 *
 * Если передана активная сессия пользователя, то привязывает аккаунт https://vk.com к
 * аккаунту в активной сессии. Иначе, создает новый пользователь и делает https://vk.com
 * первым методом входа.
 */
export const registerVkRegistrationPost = <ThrowOnError extends boolean = false>(
	options: Options<RegisterVkRegistrationPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterVkRegistrationPostResponse,
		RegisterVkRegistrationPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/vk/registration',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Login
 * Вход в пользователя с помощью аккаунта https://lk.msu.ru
 *
 * Производит вход, если находит пользователя по уникаотному идендификатору. Если аккаунт не
 * найден, возвращает ошибка.
 */
export const loginVkLoginPost = <ThrowOnError extends boolean = false>(
	options: Options<LoginVkLoginPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		LoginVkLoginPostResponse,
		LoginVkLoginPostError,
		ThrowOnError
	>({
		url: '/vk/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 *  Redirect Url
 * URL на который происходит редирект после завершения входа на стороне провайдера
 */
export const redirectUrlVkRedirectUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<RedirectUrlVkRedirectUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		RedirectUrlVkRedirectUrlGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/vk/redirect_url',
		...options,
	});
};

/**
 *  Auth Url
 * URL на который происходит редирект из приложения для авторизации на стороне провайдера
 */
export const authUrlVkAuthUrlGet = <ThrowOnError extends boolean = false>(
	options?: Options<AuthUrlVkAuthUrlGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<AuthUrlVkAuthUrlGetResponse, unknown, ThrowOnError>(
		{
			url: '/vk/auth_url',
			...options,
		}
	);
};

/**
 *  Unregister
 * Отключает для пользователя метод входа
 */
export const unregisterVkDelete = <ThrowOnError extends boolean = false>(
	options?: Options<UnregisterVkDeleteData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/vk',
		...options,
	});
};
