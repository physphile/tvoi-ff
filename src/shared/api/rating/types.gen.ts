// This file is auto-generated by @hey-api/openapi-ts

export type CommentGet = {
	uuid: string;
	user_id?: number | null;
	create_ts: string;
	update_ts: string;
	subject?: string | null;
	text: string;
	mark_kindness: number;
	mark_freebie: number;
	mark_clarity: number;
	mark_general: number;
	lecturer_id: number;
};

export type CommentGetAll = {
	comments?: Array<CommentGet>;
	limit: number;
	offset: number;
	total: number;
};

export type CommentImport = {
	subject?: string | null;
	text: string;
	create_ts?: string | null;
	update_ts?: string | null;
	mark_kindness: number;
	mark_freebie: number;
	mark_clarity: number;
	is_anonymous?: boolean;
	lecturer_id: number;
};

export type CommentImportAll = {
	comments: Array<CommentImport>;
};

export type CommentPost = {
	subject: string;
	text: string;
	create_ts?: string | null;
	update_ts?: string | null;
	mark_kindness: number;
	mark_freebie: number;
	mark_clarity: number;
	is_anonymous?: boolean;
};

export type HttpValidationError = {
	detail?: Array<ValidationError>;
};

export type LecturerGet = {
	id: number;
	first_name: string;
	last_name: string;
	middle_name: string;
	avatar_link?: string | null;
	subjects?: Array<string> | null;
	timetable_id: number;
	mark_kindness?: number | null;
	mark_freebie?: number | null;
	mark_clarity?: number | null;
	mark_general?: number | null;
	mark_weighted?: number | null;
	comments?: Array<CommentGet> | null;
};

export type LecturerGetAll = {
	lecturers?: Array<LecturerGet>;
	limit: number;
	offset: number;
	total: number;
};

export type LecturerPatch = {
	first_name?: string | null;
	last_name?: string | null;
	middle_name?: string | null;
	avatar_link?: string | null;
	timetable_id?: number | null;
};

export type LecturerPost = {
	first_name: string;
	last_name: string;
	middle_name: string;
	avatar_link?: string | null;
	timetable_id?: number | null;
};

export type StatusResponseModel = {
	status: string;
	message: string;
	ru: string;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type GetLecturersLecturerGetData = {
	body?: never;
	path?: never;
	query?: {
		limit?: number;
		offset?: number;
		info?: Array<'comments' | 'mark'>;
		order_by?:
			| 'mark_weighted'
			| 'mark_kindness'
			| 'mark_freebie'
			| 'mark_clarity'
			| 'mark_general'
			| 'last_name';
		subject?: string;
		name?: string;
		asc_order?: boolean;
	};
	url: '/lecturer';
};

export type GetLecturersLecturerGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetLecturersLecturerGetError =
	GetLecturersLecturerGetErrors[keyof GetLecturersLecturerGetErrors];

export type GetLecturersLecturerGetResponses = {
	/**
	 * Successful Response
	 */
	200: LecturerGetAll;
};

export type GetLecturersLecturerGetResponse =
	GetLecturersLecturerGetResponses[keyof GetLecturersLecturerGetResponses];

export type CreateLecturerLecturerPostData = {
	body: LecturerPost;
	path?: never;
	query?: never;
	url: '/lecturer';
};

export type CreateLecturerLecturerPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateLecturerLecturerPostError =
	CreateLecturerLecturerPostErrors[keyof CreateLecturerLecturerPostErrors];

export type CreateLecturerLecturerPostResponses = {
	/**
	 * Successful Response
	 */
	200: LecturerGet;
};

export type CreateLecturerLecturerPostResponse =
	CreateLecturerLecturerPostResponses[keyof CreateLecturerLecturerPostResponses];

export type DeleteLecturerLecturerIdDeleteData = {
	body?: never;
	path: {
		id: number;
	};
	query?: never;
	url: '/lecturer/{id}';
};

export type DeleteLecturerLecturerIdDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DeleteLecturerLecturerIdDeleteError =
	DeleteLecturerLecturerIdDeleteErrors[keyof DeleteLecturerLecturerIdDeleteErrors];

export type DeleteLecturerLecturerIdDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: StatusResponseModel;
};

export type DeleteLecturerLecturerIdDeleteResponse =
	DeleteLecturerLecturerIdDeleteResponses[keyof DeleteLecturerLecturerIdDeleteResponses];

export type GetLecturerLecturerIdGetData = {
	body?: never;
	path: {
		id: number;
	};
	query?: {
		info?: Array<'comments' | 'mark'>;
	};
	url: '/lecturer/{id}';
};

export type GetLecturerLecturerIdGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetLecturerLecturerIdGetError =
	GetLecturerLecturerIdGetErrors[keyof GetLecturerLecturerIdGetErrors];

export type GetLecturerLecturerIdGetResponses = {
	/**
	 * Successful Response
	 */
	200: LecturerGet;
};

export type GetLecturerLecturerIdGetResponse =
	GetLecturerLecturerIdGetResponses[keyof GetLecturerLecturerIdGetResponses];

export type UpdateLecturerLecturerIdPatchData = {
	body: LecturerPatch;
	path: {
		id: number;
	};
	query?: never;
	url: '/lecturer/{id}';
};

export type UpdateLecturerLecturerIdPatchErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UpdateLecturerLecturerIdPatchError =
	UpdateLecturerLecturerIdPatchErrors[keyof UpdateLecturerLecturerIdPatchErrors];

export type UpdateLecturerLecturerIdPatchResponses = {
	/**
	 * Successful Response
	 */
	200: LecturerGet;
};

export type UpdateLecturerLecturerIdPatchResponse =
	UpdateLecturerLecturerIdPatchResponses[keyof UpdateLecturerLecturerIdPatchResponses];

export type GetCommentsCommentGetData = {
	body?: never;
	path?: never;
	query?: {
		limit?: number;
		offset?: number;
		lecturer_id?: number | null;
		user_id?: number | null;
		order_by?: Array<'create_ts'>;
		unreviewed?: boolean;
	};
	url: '/comment';
};

export type GetCommentsCommentGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetCommentsCommentGetError =
	GetCommentsCommentGetErrors[keyof GetCommentsCommentGetErrors];

export type GetCommentsCommentGetResponses = {
	/**
	 * Successful Response
	 */
	200: CommentGetAll;
};

export type GetCommentsCommentGetResponse =
	GetCommentsCommentGetResponses[keyof GetCommentsCommentGetResponses];

export type CreateCommentCommentPostData = {
	body: CommentPost;
	path?: never;
	query: {
		lecturer_id: number;
	};
	url: '/comment';
};

export type CreateCommentCommentPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateCommentCommentPostError =
	CreateCommentCommentPostErrors[keyof CreateCommentCommentPostErrors];

export type CreateCommentCommentPostResponses = {
	/**
	 * Successful Response
	 */
	200: CommentGet;
};

export type CreateCommentCommentPostResponse =
	CreateCommentCommentPostResponses[keyof CreateCommentCommentPostResponses];

export type ImportCommentsCommentImportPostData = {
	body: CommentImportAll;
	path?: never;
	query?: never;
	url: '/comment/import';
};

export type ImportCommentsCommentImportPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ImportCommentsCommentImportPostError =
	ImportCommentsCommentImportPostErrors[keyof ImportCommentsCommentImportPostErrors];

export type ImportCommentsCommentImportPostResponses = {
	/**
	 * Successful Response
	 */
	200: CommentGetAll;
};

export type ImportCommentsCommentImportPostResponse =
	ImportCommentsCommentImportPostResponses[keyof ImportCommentsCommentImportPostResponses];

export type DeleteCommentCommentUuidDeleteData = {
	body?: never;
	path: {
		uuid: string;
	};
	query?: never;
	url: '/comment/{uuid}';
};

export type DeleteCommentCommentUuidDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DeleteCommentCommentUuidDeleteError =
	DeleteCommentCommentUuidDeleteErrors[keyof DeleteCommentCommentUuidDeleteErrors];

export type DeleteCommentCommentUuidDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: StatusResponseModel;
};

export type DeleteCommentCommentUuidDeleteResponse =
	DeleteCommentCommentUuidDeleteResponses[keyof DeleteCommentCommentUuidDeleteResponses];

export type GetCommentCommentUuidGetData = {
	body?: never;
	path: {
		uuid: string;
	};
	query?: never;
	url: '/comment/{uuid}';
};

export type GetCommentCommentUuidGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetCommentCommentUuidGetError =
	GetCommentCommentUuidGetErrors[keyof GetCommentCommentUuidGetErrors];

export type GetCommentCommentUuidGetResponses = {
	/**
	 * Successful Response
	 */
	200: CommentGet;
};

export type GetCommentCommentUuidGetResponse =
	GetCommentCommentUuidGetResponses[keyof GetCommentCommentUuidGetResponses];

export type ReviewCommentCommentUuidPatchData = {
	body?: never;
	path: {
		uuid: string;
	};
	query?: {
		review_status?: 'approved' | 'dismissed';
	};
	url: '/comment/{uuid}';
};

export type ReviewCommentCommentUuidPatchErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ReviewCommentCommentUuidPatchError =
	ReviewCommentCommentUuidPatchErrors[keyof ReviewCommentCommentUuidPatchErrors];

export type ReviewCommentCommentUuidPatchResponses = {
	/**
	 * Successful Response
	 */
	200: CommentGet;
};

export type ReviewCommentCommentUuidPatchResponse =
	ReviewCommentCommentUuidPatchResponses[keyof ReviewCommentCommentUuidPatchResponses];

export type ClientOptions = {
	baseUrl: `${string}://${string}/rating` | (string & {});
};
