// This file is auto-generated by @hey-api/openapi-ts

import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import { type Options, extensionsExtensionsGet, processConvertPost } from '../sdk.gen';
import type {
	ExtensionsExtensionsGetData,
	ProcessConvertPostData,
	ProcessConvertPostError,
	ProcessConvertPostResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const processConvertPostQueryKey = (options: Options<ProcessConvertPostData>) =>
	createQueryKey('processConvertPost', options);

export const processConvertPostOptions = (options: Options<ProcessConvertPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await processConvertPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: processConvertPostQueryKey(options),
	});
};

export const processConvertPostMutation = (options?: Partial<Options<ProcessConvertPostData>>) => {
	const mutationOptions: UseMutationOptions<
		ProcessConvertPostResponse,
		ProcessConvertPostError,
		Options<ProcessConvertPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await processConvertPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const extensionsExtensionsGetQueryKey = (options?: Options<ExtensionsExtensionsGetData>) =>
	createQueryKey('extensionsExtensionsGet', options);

export const extensionsExtensionsGetOptions = (options?: Options<ExtensionsExtensionsGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await extensionsExtensionsGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: extensionsExtensionsGetQueryKey(options),
	});
};
