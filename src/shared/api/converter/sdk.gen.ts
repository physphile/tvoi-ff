// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	type Options as ClientOptions,
	type TDataShape,
	formDataBodySerializer,
} from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
	ExtensionsExtensionsGetData,
	ExtensionsExtensionsGetResponse,
	ProcessConvertPostData,
	ProcessConvertPostError,
	ProcessConvertPostResponse,
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Process
 * Upload file to server. Takes extension to which the file will be converted and the file
 */
export const processConvertPost = <ThrowOnError extends boolean = false>(
	options: Options<ProcessConvertPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		ProcessConvertPostResponse,
		ProcessConvertPostError,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/convert',
		...options,
		headers: {
			'Content-Type': null,
			...options?.headers,
		},
	});
};

/**
 * Extensions
 */
export const extensionsExtensionsGet = <ThrowOnError extends boolean = false>(
	options?: Options<ExtensionsExtensionsGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		ExtensionsExtensionsGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/extensions',
		...options,
	});
};
