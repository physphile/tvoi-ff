// This file is auto-generated by @hey-api/openapi-ts

export type CategoryGet = {
	name: string;
	read_scope?: string | null;
	update_scope?: string | null;
	id: number;
	params?: Array<ParamGet> | null;
};

export type CategoryPatch = {
	name?: string | null;
	read_scope?: string | null;
	update_scope?: string | null;
};

export type CategoryPost = {
	name: string;
	read_scope?: string | null;
	update_scope?: string | null;
};

export type ExtendedUserInfo = {
	category: string;
	param: string;
	value?: string | null;
	user_id: number;
};

export type HttpValidationError = {
	detail?: Array<ValidationError>;
};

export type ParamGet = {
	visible_in_user_response?: boolean;
	name: string;
	is_required: boolean;
	changeable: boolean;
	type: ViewType;
	validation?: string | null;
	id: number;
	category_id: number;
};

export type ParamPatch = {
	visible_in_user_response?: boolean;
	name?: string | null;
	is_required?: boolean | null;
	changeable?: boolean | null;
	type?: ViewType | null;
	validation?: string | null;
};

export type ParamPost = {
	visible_in_user_response?: boolean;
	name: string;
	is_required: boolean;
	changeable: boolean;
	type: ViewType;
	validation?: string | null;
};

export type SourceGet = {
	name: string;
	trust_level: number;
	id: number;
};

export type SourcePatch = {
	name?: string | null;
	trust_level?: number | null;
};

export type SourcePost = {
	name: string;
	trust_level: number;
};

export type StatusResponseModel = {
	status: string;
	message: string;
	ru: string;
};

export type UserInfo = {
	category: string;
	param: string;
	value?: string | null;
};

export type UserInfoGet = {
	items: Array<UserInfo>;
};

export type UserInfoUpdate = {
	items: Array<UserInfo>;
	source: string;
};

export type UsersInfoGet = {
	items: Array<ExtendedUserInfo>;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

/**
 * Тип отображения пользоватльских данных в ответе `GET /user/{user_id}`
 * ALL: {category: {param: [val1, val2, ...]}}
 * LAST: {category: {param: last_modified_value}}
 * MOST_TRUSTED: {category: {param: most_trusted_value}}
 */
export type ViewType = 'all' | 'last' | 'most_trusted';

export type GetSourcesSourceGetData = {
	body?: never;
	path?: never;
	query?: never;
	url: '/source';
};

export type GetSourcesSourceGetResponses = {
	/**
	 * Successful Response
	 */
	200: Array<SourceGet>;
};

export type GetSourcesSourceGetResponse =
	GetSourcesSourceGetResponses[keyof GetSourcesSourceGetResponses];

export type CreateSourceSourcePostData = {
	body: SourcePost;
	path?: never;
	query?: never;
	url: '/source';
};

export type CreateSourceSourcePostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateSourceSourcePostError =
	CreateSourceSourcePostErrors[keyof CreateSourceSourcePostErrors];

export type CreateSourceSourcePostResponses = {
	/**
	 * Successful Response
	 */
	200: SourceGet;
};

export type CreateSourceSourcePostResponse =
	CreateSourceSourcePostResponses[keyof CreateSourceSourcePostResponses];

export type DeleteSourceSourceIdDeleteData = {
	body?: never;
	path: {
		id: number;
	};
	query?: never;
	url: '/source/{id}';
};

export type DeleteSourceSourceIdDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DeleteSourceSourceIdDeleteError =
	DeleteSourceSourceIdDeleteErrors[keyof DeleteSourceSourceIdDeleteErrors];

export type DeleteSourceSourceIdDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: StatusResponseModel;
};

export type DeleteSourceSourceIdDeleteResponse =
	DeleteSourceSourceIdDeleteResponses[keyof DeleteSourceSourceIdDeleteResponses];

export type GetSourceSourceIdGetData = {
	body?: never;
	path: {
		id: number;
	};
	query?: never;
	url: '/source/{id}';
};

export type GetSourceSourceIdGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetSourceSourceIdGetError =
	GetSourceSourceIdGetErrors[keyof GetSourceSourceIdGetErrors];

export type GetSourceSourceIdGetResponses = {
	/**
	 * Successful Response
	 */
	200: SourceGet;
};

export type GetSourceSourceIdGetResponse =
	GetSourceSourceIdGetResponses[keyof GetSourceSourceIdGetResponses];

export type PatchSourceSourceIdPatchData = {
	body: SourcePatch;
	path: {
		id: number;
	};
	query?: never;
	url: '/source/{id}';
};

export type PatchSourceSourceIdPatchErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PatchSourceSourceIdPatchError =
	PatchSourceSourceIdPatchErrors[keyof PatchSourceSourceIdPatchErrors];

export type PatchSourceSourceIdPatchResponses = {
	/**
	 * Successful Response
	 */
	200: SourceGet;
};

export type PatchSourceSourceIdPatchResponse =
	PatchSourceSourceIdPatchResponses[keyof PatchSourceSourceIdPatchResponses];

export type GetCategoriesCategoryGetData = {
	body?: never;
	path?: never;
	query?: {
		query?: Array<'param'>;
	};
	url: '/category';
};

export type GetCategoriesCategoryGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetCategoriesCategoryGetError =
	GetCategoriesCategoryGetErrors[keyof GetCategoriesCategoryGetErrors];

export type GetCategoriesCategoryGetResponses = {
	/**
	 * Successful Response
	 */
	200: Array<CategoryGet>;
};

export type GetCategoriesCategoryGetResponse =
	GetCategoriesCategoryGetResponses[keyof GetCategoriesCategoryGetResponses];

export type CreateCategoryCategoryPostData = {
	body: CategoryPost;
	path?: never;
	query?: never;
	url: '/category';
};

export type CreateCategoryCategoryPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateCategoryCategoryPostError =
	CreateCategoryCategoryPostErrors[keyof CreateCategoryCategoryPostErrors];

export type CreateCategoryCategoryPostResponses = {
	/**
	 * Successful Response
	 */
	200: CategoryGet;
};

export type CreateCategoryCategoryPostResponse =
	CreateCategoryCategoryPostResponses[keyof CreateCategoryCategoryPostResponses];

export type DeleteCategoryCategoryIdDeleteData = {
	body?: never;
	path: {
		id: number;
	};
	query?: never;
	url: '/category/{id}';
};

export type DeleteCategoryCategoryIdDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DeleteCategoryCategoryIdDeleteError =
	DeleteCategoryCategoryIdDeleteErrors[keyof DeleteCategoryCategoryIdDeleteErrors];

export type DeleteCategoryCategoryIdDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: StatusResponseModel;
};

export type DeleteCategoryCategoryIdDeleteResponse =
	DeleteCategoryCategoryIdDeleteResponses[keyof DeleteCategoryCategoryIdDeleteResponses];

export type GetCategoryCategoryIdGetData = {
	body?: never;
	path: {
		id: number;
	};
	query?: never;
	url: '/category/{id}';
};

export type GetCategoryCategoryIdGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetCategoryCategoryIdGetError =
	GetCategoryCategoryIdGetErrors[keyof GetCategoryCategoryIdGetErrors];

export type GetCategoryCategoryIdGetResponses = {
	/**
	 * Successful Response
	 */
	200: CategoryGet;
};

export type GetCategoryCategoryIdGetResponse =
	GetCategoryCategoryIdGetResponses[keyof GetCategoryCategoryIdGetResponses];

export type PatchCategoryCategoryIdPatchData = {
	body: CategoryPatch;
	path: {
		id: number;
	};
	query?: never;
	url: '/category/{id}';
};

export type PatchCategoryCategoryIdPatchErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PatchCategoryCategoryIdPatchError =
	PatchCategoryCategoryIdPatchErrors[keyof PatchCategoryCategoryIdPatchErrors];

export type PatchCategoryCategoryIdPatchResponses = {
	/**
	 * Successful Response
	 */
	200: CategoryGet;
};

export type PatchCategoryCategoryIdPatchResponse =
	PatchCategoryCategoryIdPatchResponses[keyof PatchCategoryCategoryIdPatchResponses];

export type GetParamsCategoryCategoryIdParamGetData = {
	body?: never;
	path: {
		category_id: number;
	};
	query?: never;
	url: '/category/{category_id}/param';
};

export type GetParamsCategoryCategoryIdParamGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetParamsCategoryCategoryIdParamGetError =
	GetParamsCategoryCategoryIdParamGetErrors[keyof GetParamsCategoryCategoryIdParamGetErrors];

export type GetParamsCategoryCategoryIdParamGetResponses = {
	/**
	 * Successful Response
	 */
	200: Array<ParamGet>;
};

export type GetParamsCategoryCategoryIdParamGetResponse =
	GetParamsCategoryCategoryIdParamGetResponses[keyof GetParamsCategoryCategoryIdParamGetResponses];

export type CreateParamCategoryCategoryIdParamPostData = {
	body: ParamPost;
	path: {
		category_id: number;
	};
	query?: never;
	url: '/category/{category_id}/param';
};

export type CreateParamCategoryCategoryIdParamPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type CreateParamCategoryCategoryIdParamPostError =
	CreateParamCategoryCategoryIdParamPostErrors[keyof CreateParamCategoryCategoryIdParamPostErrors];

export type CreateParamCategoryCategoryIdParamPostResponses = {
	/**
	 * Successful Response
	 */
	200: ParamGet;
};

export type CreateParamCategoryCategoryIdParamPostResponse =
	CreateParamCategoryCategoryIdParamPostResponses[keyof CreateParamCategoryCategoryIdParamPostResponses];

export type DeleteParamCategoryCategoryIdParamIdDeleteData = {
	body?: never;
	path: {
		id: number;
		category_id: number;
	};
	query?: never;
	url: '/category/{category_id}/param/{id}';
};

export type DeleteParamCategoryCategoryIdParamIdDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DeleteParamCategoryCategoryIdParamIdDeleteError =
	DeleteParamCategoryCategoryIdParamIdDeleteErrors[keyof DeleteParamCategoryCategoryIdParamIdDeleteErrors];

export type DeleteParamCategoryCategoryIdParamIdDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: StatusResponseModel;
};

export type DeleteParamCategoryCategoryIdParamIdDeleteResponse =
	DeleteParamCategoryCategoryIdParamIdDeleteResponses[keyof DeleteParamCategoryCategoryIdParamIdDeleteResponses];

export type GetParamCategoryCategoryIdParamIdGetData = {
	body?: never;
	path: {
		id: number;
		category_id: number;
	};
	query?: never;
	url: '/category/{category_id}/param/{id}';
};

export type GetParamCategoryCategoryIdParamIdGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetParamCategoryCategoryIdParamIdGetError =
	GetParamCategoryCategoryIdParamIdGetErrors[keyof GetParamCategoryCategoryIdParamIdGetErrors];

export type GetParamCategoryCategoryIdParamIdGetResponses = {
	/**
	 * Successful Response
	 */
	200: ParamGet;
};

export type GetParamCategoryCategoryIdParamIdGetResponse =
	GetParamCategoryCategoryIdParamIdGetResponses[keyof GetParamCategoryCategoryIdParamIdGetResponses];

export type PatchParamCategoryCategoryIdParamIdPatchData = {
	body: ParamPatch;
	path: {
		id: number;
		category_id: number;
	};
	query?: never;
	url: '/category/{category_id}/param/{id}';
};

export type PatchParamCategoryCategoryIdParamIdPatchErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type PatchParamCategoryCategoryIdParamIdPatchError =
	PatchParamCategoryCategoryIdParamIdPatchErrors[keyof PatchParamCategoryCategoryIdParamIdPatchErrors];

export type PatchParamCategoryCategoryIdParamIdPatchResponses = {
	/**
	 * Successful Response
	 */
	200: ParamGet;
};

export type PatchParamCategoryCategoryIdParamIdPatchResponse =
	PatchParamCategoryCategoryIdParamIdPatchResponses[keyof PatchParamCategoryCategoryIdParamIdPatchResponses];

export type GetUserInfoUserIdGetData = {
	body?: never;
	path: {
		id: number;
	};
	query?: {
		additional_data?: Array<number>;
	};
	url: '/user/{id}';
};

export type GetUserInfoUserIdGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetUserInfoUserIdGetError =
	GetUserInfoUserIdGetErrors[keyof GetUserInfoUserIdGetErrors];

export type GetUserInfoUserIdGetResponses = {
	/**
	 * Successful Response
	 */
	200: UserInfoGet;
};

export type GetUserInfoUserIdGetResponse =
	GetUserInfoUserIdGetResponses[keyof GetUserInfoUserIdGetResponses];

export type UpdateUserUserIdPostData = {
	body: UserInfoUpdate;
	path: {
		id: number;
	};
	query?: never;
	url: '/user/{id}';
};

export type UpdateUserUserIdPostErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UpdateUserUserIdPostError =
	UpdateUserUserIdPostErrors[keyof UpdateUserUserIdPostErrors];

export type UpdateUserUserIdPostResponses = {
	/**
	 * Successful Response
	 */
	200: StatusResponseModel;
};

export type UpdateUserUserIdPostResponse =
	UpdateUserUserIdPostResponses[keyof UpdateUserUserIdPostResponses];

export type GetUsersInfoUserGetData = {
	body?: never;
	path?: never;
	query: {
		users: Array<number>;
		categories: Array<number>;
		additional_data?: Array<number>;
	};
	url: '/user';
};

export type GetUsersInfoUserGetErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type GetUsersInfoUserGetError = GetUsersInfoUserGetErrors[keyof GetUsersInfoUserGetErrors];

export type GetUsersInfoUserGetResponses = {
	/**
	 * Successful Response
	 */
	200: UsersInfoGet;
};

export type GetUsersInfoUserGetResponse =
	GetUsersInfoUserGetResponses[keyof GetUsersInfoUserGetResponses];

export type ClientOptions = {
	baseUrl: `${string}://${string}/userdata` | (string & {});
};
