// This file is auto-generated by @hey-api/openapi-ts

import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
	type Options,
	createCategoryCategoryPost,
	createParamCategoryCategoryIdParamPost,
	createSourceSourcePost,
	deleteCategoryCategoryIdDelete,
	deleteParamCategoryCategoryIdParamIdDelete,
	deleteSourceSourceIdDelete,
	getCategoriesCategoryGet,
	getCategoryCategoryIdGet,
	getParamCategoryCategoryIdParamIdGet,
	getParamsCategoryCategoryIdParamGet,
	getSourceSourceIdGet,
	getSourcesSourceGet,
	getUserInfoUserIdGet,
	getUsersInfoUserGet,
	patchCategoryCategoryIdPatch,
	patchParamCategoryCategoryIdParamIdPatch,
	patchSourceSourceIdPatch,
	updateUserUserIdPost,
} from '../sdk.gen';
import type {
	CreateCategoryCategoryPostData,
	CreateCategoryCategoryPostError,
	CreateCategoryCategoryPostResponse,
	CreateParamCategoryCategoryIdParamPostData,
	CreateParamCategoryCategoryIdParamPostError,
	CreateParamCategoryCategoryIdParamPostResponse,
	CreateSourceSourcePostData,
	CreateSourceSourcePostError,
	CreateSourceSourcePostResponse,
	DeleteCategoryCategoryIdDeleteData,
	DeleteCategoryCategoryIdDeleteError,
	DeleteCategoryCategoryIdDeleteResponse,
	DeleteParamCategoryCategoryIdParamIdDeleteData,
	DeleteParamCategoryCategoryIdParamIdDeleteError,
	DeleteParamCategoryCategoryIdParamIdDeleteResponse,
	DeleteSourceSourceIdDeleteData,
	DeleteSourceSourceIdDeleteError,
	DeleteSourceSourceIdDeleteResponse,
	GetCategoriesCategoryGetData,
	GetCategoryCategoryIdGetData,
	GetParamCategoryCategoryIdParamIdGetData,
	GetParamsCategoryCategoryIdParamGetData,
	GetSourceSourceIdGetData,
	GetSourcesSourceGetData,
	GetUserInfoUserIdGetData,
	GetUsersInfoUserGetData,
	PatchCategoryCategoryIdPatchData,
	PatchCategoryCategoryIdPatchError,
	PatchCategoryCategoryIdPatchResponse,
	PatchParamCategoryCategoryIdParamIdPatchData,
	PatchParamCategoryCategoryIdParamIdPatchError,
	PatchParamCategoryCategoryIdParamIdPatchResponse,
	PatchSourceSourceIdPatchData,
	PatchSourceSourceIdPatchError,
	PatchSourceSourceIdPatchResponse,
	UpdateUserUserIdPostData,
	UpdateUserUserIdPostError,
	UpdateUserUserIdPostResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const getSourcesSourceGetQueryKey = (options?: Options<GetSourcesSourceGetData>) =>
	createQueryKey('getSourcesSourceGet', options);

export const getSourcesSourceGetOptions = (options?: Options<GetSourcesSourceGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getSourcesSourceGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getSourcesSourceGetQueryKey(options),
	});
};

export const createSourceSourcePostQueryKey = (options: Options<CreateSourceSourcePostData>) =>
	createQueryKey('createSourceSourcePost', options);

export const createSourceSourcePostOptions = (options: Options<CreateSourceSourcePostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createSourceSourcePost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createSourceSourcePostQueryKey(options),
	});
};

export const createSourceSourcePostMutation = (
	options?: Partial<Options<CreateSourceSourcePostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateSourceSourcePostResponse,
		CreateSourceSourcePostError,
		Options<CreateSourceSourcePostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createSourceSourcePost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteSourceSourceIdDeleteMutation = (
	options?: Partial<Options<DeleteSourceSourceIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		DeleteSourceSourceIdDeleteResponse,
		DeleteSourceSourceIdDeleteError,
		Options<DeleteSourceSourceIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteSourceSourceIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getSourceSourceIdGetQueryKey = (options: Options<GetSourceSourceIdGetData>) =>
	createQueryKey('getSourceSourceIdGet', options);

export const getSourceSourceIdGetOptions = (options: Options<GetSourceSourceIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getSourceSourceIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getSourceSourceIdGetQueryKey(options),
	});
};

export const patchSourceSourceIdPatchMutation = (
	options?: Partial<Options<PatchSourceSourceIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchSourceSourceIdPatchResponse,
		PatchSourceSourceIdPatchError,
		Options<PatchSourceSourceIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchSourceSourceIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getCategoriesCategoryGetQueryKey = (options?: Options<GetCategoriesCategoryGetData>) =>
	createQueryKey('getCategoriesCategoryGet', options);

export const getCategoriesCategoryGetOptions = (
	options?: Options<GetCategoriesCategoryGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCategoriesCategoryGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getCategoriesCategoryGetQueryKey(options),
	});
};

export const createCategoryCategoryPostQueryKey = (
	options: Options<CreateCategoryCategoryPostData>
) => createQueryKey('createCategoryCategoryPost', options);

export const createCategoryCategoryPostOptions = (
	options: Options<CreateCategoryCategoryPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createCategoryCategoryPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createCategoryCategoryPostQueryKey(options),
	});
};

export const createCategoryCategoryPostMutation = (
	options?: Partial<Options<CreateCategoryCategoryPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateCategoryCategoryPostResponse,
		CreateCategoryCategoryPostError,
		Options<CreateCategoryCategoryPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createCategoryCategoryPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteCategoryCategoryIdDeleteMutation = (
	options?: Partial<Options<DeleteCategoryCategoryIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		DeleteCategoryCategoryIdDeleteResponse,
		DeleteCategoryCategoryIdDeleteError,
		Options<DeleteCategoryCategoryIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteCategoryCategoryIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getCategoryCategoryIdGetQueryKey = (options: Options<GetCategoryCategoryIdGetData>) =>
	createQueryKey('getCategoryCategoryIdGet', options);

export const getCategoryCategoryIdGetOptions = (options: Options<GetCategoryCategoryIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCategoryCategoryIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getCategoryCategoryIdGetQueryKey(options),
	});
};

export const patchCategoryCategoryIdPatchMutation = (
	options?: Partial<Options<PatchCategoryCategoryIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchCategoryCategoryIdPatchResponse,
		PatchCategoryCategoryIdPatchError,
		Options<PatchCategoryCategoryIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchCategoryCategoryIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getParamsCategoryCategoryIdParamGetQueryKey = (
	options: Options<GetParamsCategoryCategoryIdParamGetData>
) => createQueryKey('getParamsCategoryCategoryIdParamGet', options);

export const getParamsCategoryCategoryIdParamGetOptions = (
	options: Options<GetParamsCategoryCategoryIdParamGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getParamsCategoryCategoryIdParamGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getParamsCategoryCategoryIdParamGetQueryKey(options),
	});
};

export const createParamCategoryCategoryIdParamPostQueryKey = (
	options: Options<CreateParamCategoryCategoryIdParamPostData>
) => createQueryKey('createParamCategoryCategoryIdParamPost', options);

export const createParamCategoryCategoryIdParamPostOptions = (
	options: Options<CreateParamCategoryCategoryIdParamPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createParamCategoryCategoryIdParamPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createParamCategoryCategoryIdParamPostQueryKey(options),
	});
};

export const createParamCategoryCategoryIdParamPostMutation = (
	options?: Partial<Options<CreateParamCategoryCategoryIdParamPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateParamCategoryCategoryIdParamPostResponse,
		CreateParamCategoryCategoryIdParamPostError,
		Options<CreateParamCategoryCategoryIdParamPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createParamCategoryCategoryIdParamPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteParamCategoryCategoryIdParamIdDeleteMutation = (
	options?: Partial<Options<DeleteParamCategoryCategoryIdParamIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		DeleteParamCategoryCategoryIdParamIdDeleteResponse,
		DeleteParamCategoryCategoryIdParamIdDeleteError,
		Options<DeleteParamCategoryCategoryIdParamIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteParamCategoryCategoryIdParamIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getParamCategoryCategoryIdParamIdGetQueryKey = (
	options: Options<GetParamCategoryCategoryIdParamIdGetData>
) => createQueryKey('getParamCategoryCategoryIdParamIdGet', options);

export const getParamCategoryCategoryIdParamIdGetOptions = (
	options: Options<GetParamCategoryCategoryIdParamIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getParamCategoryCategoryIdParamIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getParamCategoryCategoryIdParamIdGetQueryKey(options),
	});
};

export const patchParamCategoryCategoryIdParamIdPatchMutation = (
	options?: Partial<Options<PatchParamCategoryCategoryIdParamIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchParamCategoryCategoryIdParamIdPatchResponse,
		PatchParamCategoryCategoryIdParamIdPatchError,
		Options<PatchParamCategoryCategoryIdParamIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchParamCategoryCategoryIdParamIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getUserInfoUserIdGetQueryKey = (options: Options<GetUserInfoUserIdGetData>) =>
	createQueryKey('getUserInfoUserIdGet', options);

export const getUserInfoUserIdGetOptions = (options: Options<GetUserInfoUserIdGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getUserInfoUserIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getUserInfoUserIdGetQueryKey(options),
	});
};

export const updateUserUserIdPostQueryKey = (options: Options<UpdateUserUserIdPostData>) =>
	createQueryKey('updateUserUserIdPost', options);

export const updateUserUserIdPostOptions = (options: Options<UpdateUserUserIdPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await updateUserUserIdPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: updateUserUserIdPostQueryKey(options),
	});
};

export const updateUserUserIdPostMutation = (
	options?: Partial<Options<UpdateUserUserIdPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		UpdateUserUserIdPostResponse,
		UpdateUserUserIdPostError,
		Options<UpdateUserUserIdPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await updateUserUserIdPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getUsersInfoUserGetQueryKey = (options: Options<GetUsersInfoUserGetData>) =>
	createQueryKey('getUsersInfoUserGet', options);

export const getUsersInfoUserGetOptions = (options: Options<GetUsersInfoUserGetData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getUsersInfoUserGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getUsersInfoUserGetQueryKey(options),
	});
};
