// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateCategoryCategoryPostData, CreateCategoryCategoryPostErrors, CreateCategoryCategoryPostResponses, CreateParamCategoryCategoryIdParamPostData, CreateParamCategoryCategoryIdParamPostErrors, CreateParamCategoryCategoryIdParamPostResponses, CreateSourceSourcePostData, CreateSourceSourcePostErrors, CreateSourceSourcePostResponses, DeleteCategoryCategoryIdDeleteData, DeleteCategoryCategoryIdDeleteErrors, DeleteCategoryCategoryIdDeleteResponses, DeleteParamCategoryCategoryIdParamIdDeleteData, DeleteParamCategoryCategoryIdParamIdDeleteErrors, DeleteParamCategoryCategoryIdParamIdDeleteResponses, DeleteSourceSourceIdDeleteData, DeleteSourceSourceIdDeleteErrors, DeleteSourceSourceIdDeleteResponses, GetCategoriesCategoryGetData, GetCategoriesCategoryGetErrors, GetCategoriesCategoryGetResponses, GetCategoryCategoryIdGetData, GetCategoryCategoryIdGetErrors, GetCategoryCategoryIdGetResponses, GetParamCategoryCategoryIdParamIdGetData, GetParamCategoryCategoryIdParamIdGetErrors, GetParamCategoryCategoryIdParamIdGetResponses, GetParamsCategoryCategoryIdParamGetData, GetParamsCategoryCategoryIdParamGetErrors, GetParamsCategoryCategoryIdParamGetResponses, GetSourceSourceIdGetData, GetSourceSourceIdGetErrors, GetSourceSourceIdGetResponses, GetSourcesSourceGetData, GetSourcesSourceGetResponses, GetUserInfoUserIdGetData, GetUserInfoUserIdGetErrors, GetUserInfoUserIdGetResponses, GetUsersInfoUserGetData, GetUsersInfoUserGetErrors, GetUsersInfoUserGetResponses, PatchCategoryCategoryIdPatchData, PatchCategoryCategoryIdPatchErrors, PatchCategoryCategoryIdPatchResponses, PatchParamCategoryCategoryIdParamIdPatchData, PatchParamCategoryCategoryIdParamIdPatchErrors, PatchParamCategoryCategoryIdParamIdPatchResponses, PatchSourceSourceIdPatchData, PatchSourceSourceIdPatchErrors, PatchSourceSourceIdPatchResponses, UpdateUserUserIdPostData, UpdateUserUserIdPostErrors, UpdateUserUserIdPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Sources
 *
 * Получить все источники данных
 */
export const getSourcesSourceGet = <ThrowOnError extends boolean = false>(options?: Options<GetSourcesSourceGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSourcesSourceGetResponses, unknown, ThrowOnError>({
        url: '/source',
        ...options
    });
};

/**
 * Create Source
 *
 * Создать источник данных
 *
 * Scopes: `["userdata.source.create"]`
 */
export const createSourceSourcePost = <ThrowOnError extends boolean = false>(options: Options<CreateSourceSourcePostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSourceSourcePostResponses, CreateSourceSourcePostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/source',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Source
 *
 * Удалить источник данных
 *
 * Scopes: `["userdata.source.delete"]`
 */
export const deleteSourceSourceIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSourceSourceIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSourceSourceIdDeleteResponses, DeleteSourceSourceIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/source/{id}',
        ...options
    });
};

/**
 * Get Source
 *
 * Получить источник данных
 */
export const getSourceSourceIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSourceSourceIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSourceSourceIdGetResponses, GetSourceSourceIdGetErrors, ThrowOnError>({
        url: '/source/{id}',
        ...options
    });
};

/**
 * Patch Source
 *
 * Обновить источник данных
 *
 * Scopes: `["userdata.source.update"]`
 */
export const patchSourceSourceIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchSourceSourceIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchSourceSourceIdPatchResponses, PatchSourceSourceIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/source/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Categories
 *
 * Получить все категории
 */
export const getCategoriesCategoryGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesCategoryGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoriesCategoryGetResponses, GetCategoriesCategoryGetErrors, ThrowOnError>({
        url: '/category',
        ...options
    });
};

/**
 * Create Category
 *
 * Создать категорию пользовательских данных. Получить категорию можно будет со скоупами, имена которых в category_inp.scopes
 * Ручка обновит документацию
 *
 * Scopes: `["userdata.category.create"]`
 */
export const createCategoryCategoryPost = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryCategoryPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCategoryCategoryPostResponses, CreateCategoryCategoryPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Category
 *
 * Удалить категорию
 *
 * Scopes: `["userdata.category.delete"]`
 */
export const deleteCategoryCategoryIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryCategoryIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCategoryCategoryIdDeleteResponses, DeleteCategoryCategoryIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{id}',
        ...options
    });
};

/**
 * Get Category
 *
 * Получить категорию
 */
export const getCategoryCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoryCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCategoryCategoryIdGetResponses, GetCategoryCategoryIdGetErrors, ThrowOnError>({
        url: '/category/{id}',
        ...options
    });
};

/**
 * Patch Category
 *
 * Обновить категорию
 *
 * Scopes: `["userdata.category.update"]`
 */
export const patchCategoryCategoryIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchCategoryCategoryIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchCategoryCategoryIdPatchResponses, PatchCategoryCategoryIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Params
 *
 * Получить все параметры категории
 */
export const getParamsCategoryCategoryIdParamGet = <ThrowOnError extends boolean = false>(options: Options<GetParamsCategoryCategoryIdParamGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetParamsCategoryCategoryIdParamGetResponses, GetParamsCategoryCategoryIdParamGetErrors, ThrowOnError>({
        url: '/category/{category_id}/param',
        ...options
    });
};

/**
 * Create Param
 *
 * Создать поле внутри категории. Ответ на пользовательские данные будет такой {..., category: {...,param: '', ...}}
 *
 * Scopes: `["userdata.param.create"]`
 */
export const createParamCategoryCategoryIdParamPost = <ThrowOnError extends boolean = false>(options: Options<CreateParamCategoryCategoryIdParamPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateParamCategoryCategoryIdParamPostResponses, CreateParamCategoryCategoryIdParamPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/param',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Param
 *
 * Удалить параметр внутри категории
 *
 * Scopes: `["userdata.param.delete"]`
 */
export const deleteParamCategoryCategoryIdParamIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteParamCategoryCategoryIdParamIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteParamCategoryCategoryIdParamIdDeleteResponses, DeleteParamCategoryCategoryIdParamIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/param/{id}',
        ...options
    });
};

/**
 * Get Param
 *
 * Получить параметр по айди
 */
export const getParamCategoryCategoryIdParamIdGet = <ThrowOnError extends boolean = false>(options: Options<GetParamCategoryCategoryIdParamIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetParamCategoryCategoryIdParamIdGetResponses, GetParamCategoryCategoryIdParamIdGetErrors, ThrowOnError>({
        url: '/category/{category_id}/param/{id}',
        ...options
    });
};

/**
 * Patch Param
 *
 * Обновить параметр внутри категории
 *
 * Scopes: `["userdata.param.update"]`
 */
export const patchParamCategoryCategoryIdParamIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchParamCategoryCategoryIdParamIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchParamCategoryCategoryIdParamIdPatchResponses, PatchParamCategoryCategoryIdParamIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/category/{category_id}/param/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Info
 *
 * Получить информацию о пользователе
 */
export const getUserInfoUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserInfoUserIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserInfoUserIdGetResponses, GetUserInfoUserIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user/{id}',
        ...options
    });
};

/**
 * Update User
 *
 * Обновить информацию о пользователе.
 * Объект - пользователь, информацию которого обновляют
 * Субъект - пользователь, который обновляет - источник
 *
 * Если не указать параметр внутри категории, то ничего не обновится, если указать что-то,
 * то либо создастся новая запись(в случае, если она отсутствовала у данного источника), либо отредактируется
 * старая. Если в значении параметра указан None, то соответствующая информациия удаляется из данного источника
 *
 * Обновлять через эту ручку можно только от имени источников admin и user.
 *
 * Чтобы обновить от имени админиа, надо иметь скоуп `userdata.info.admin`
 * Чтобы обновить неизменяемую информацию надо обладать скоупом `userdata.info.update`
 * Для обновления своей информации(источник `user`) не нужны скоупы на обновление соответствующих категорий
 * Для обновления чужой информации от имени админа(источник `admin`)
 * нужны скоупы на обновление всех указанных в теле запроса категорий пользовательских данных данных
 */
export const updateUserUserIdPost = <ThrowOnError extends boolean = false>(options: Options<UpdateUserUserIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateUserUserIdPostResponses, UpdateUserUserIdPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Users Info
 *
 * Получить информацию о пользователях.
 * :param users: список id юзеров, про которых нужно вернуть информацию
 * :param categories: список id категорий, параметры которых нужно вернуть
 * :return: список данных о пользователях и данных категориях
 */
export const getUsersInfoUserGet = <ThrowOnError extends boolean = false>(options: Options<GetUsersInfoUserGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUsersInfoUserGetResponses, GetUsersInfoUserGetErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user',
        ...options
    });
};
