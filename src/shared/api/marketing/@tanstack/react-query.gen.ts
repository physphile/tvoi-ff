// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
	type Options,
	createUserV1UserPost,
	patchUserV1UserIdPatch,
	writeActionV1ActionPost,
} from '../sdk.gen';
import type {
	CreateUserV1UserPostData,
	CreateUserV1UserPostResponse,
	PatchUserV1UserIdPatchData,
	PatchUserV1UserIdPatchError,
	PatchUserV1UserIdPatchResponse,
	WriteActionV1ActionPostData,
	WriteActionV1ActionPostError,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const writeActionV1ActionPostQueryKey = (options: Options<WriteActionV1ActionPostData>) =>
	createQueryKey('writeActionV1ActionPost', options);

export const writeActionV1ActionPostOptions = (options: Options<WriteActionV1ActionPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await writeActionV1ActionPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: writeActionV1ActionPostQueryKey(options),
	});
};

export const writeActionV1ActionPostMutation = (
	options?: Partial<Options<WriteActionV1ActionPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		unknown,
		WriteActionV1ActionPostError,
		Options<WriteActionV1ActionPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await writeActionV1ActionPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const createUserV1UserPostQueryKey = (options?: Options<CreateUserV1UserPostData>) =>
	createQueryKey('createUserV1UserPost', options);

export const createUserV1UserPostOptions = (options?: Options<CreateUserV1UserPostData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createUserV1UserPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createUserV1UserPostQueryKey(options),
	});
};

export const createUserV1UserPostMutation = (
	options?: Partial<Options<CreateUserV1UserPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateUserV1UserPostResponse,
		DefaultError,
		Options<CreateUserV1UserPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createUserV1UserPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const patchUserV1UserIdPatchMutation = (
	options?: Partial<Options<PatchUserV1UserIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		PatchUserV1UserIdPatchResponse,
		PatchUserV1UserIdPatchError,
		Options<PatchUserV1UserIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await patchUserV1UserIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};
