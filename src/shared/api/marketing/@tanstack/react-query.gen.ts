// This file is auto-generated by @hey-api/openapi-ts

import type { DefaultError, UseMutationOptions } from '@tanstack/react-query';

import { createUserV1UserPost, type Options, patchUserV1UserIdPatch, writeActionV1ActionPost } from '../sdk.gen';
import type { CreateUserV1UserPostData, CreateUserV1UserPostResponse, PatchUserV1UserIdPatchData, PatchUserV1UserIdPatchError, PatchUserV1UserIdPatchResponse, WriteActionV1ActionPostData, WriteActionV1ActionPostError } from '../types.gen';

/**
 * Write Action
 *
 * Создать действие
 */
export const writeActionV1ActionPostMutation = (options?: Partial<Options<WriteActionV1ActionPostData>>): UseMutationOptions<unknown, WriteActionV1ActionPostError, Options<WriteActionV1ActionPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, WriteActionV1ActionPostError, Options<WriteActionV1ActionPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await writeActionV1ActionPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create User
 *
 * Создать уникальный идентификатор установки
 */
export const createUserV1UserPostMutation = (options?: Partial<Options<CreateUserV1UserPostData>>): UseMutationOptions<CreateUserV1UserPostResponse, DefaultError, Options<CreateUserV1UserPostData>> => {
    const mutationOptions: UseMutationOptions<CreateUserV1UserPostResponse, DefaultError, Options<CreateUserV1UserPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createUserV1UserPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Patch User
 *
 * Изменить пользователя в маркетинге
 *
 * Необходимые scopes: `marketing.user.patch`
 */
export const patchUserV1UserIdPatchMutation = (options?: Partial<Options<PatchUserV1UserIdPatchData>>): UseMutationOptions<PatchUserV1UserIdPatchResponse, PatchUserV1UserIdPatchError, Options<PatchUserV1UserIdPatchData>> => {
    const mutationOptions: UseMutationOptions<PatchUserV1UserIdPatchResponse, PatchUserV1UserIdPatchError, Options<PatchUserV1UserIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchUserV1UserIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
