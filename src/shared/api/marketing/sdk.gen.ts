// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateUserV1UserPostData, CreateUserV1UserPostResponses, PatchUserV1UserIdPatchData, PatchUserV1UserIdPatchErrors, PatchUserV1UserIdPatchResponses, WriteActionV1ActionPostData, WriteActionV1ActionPostErrors, WriteActionV1ActionPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Write Action
 *
 * Создать действие
 */
export const writeActionV1ActionPost = <ThrowOnError extends boolean = false>(options: Options<WriteActionV1ActionPostData, ThrowOnError>) => {
    return (options.client ?? client).post<WriteActionV1ActionPostResponses, WriteActionV1ActionPostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/v1/action',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create User
 *
 * Создать уникальный идентификатор установки
 */
export const createUserV1UserPost = <ThrowOnError extends boolean = false>(options?: Options<CreateUserV1UserPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUserV1UserPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/v1/user',
        ...options
    });
};

/**
 * Patch User
 *
 * Изменить пользователя в маркетинге
 *
 * Необходимые scopes: `marketing.user.patch`
 */
export const patchUserV1UserIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchUserV1UserIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchUserV1UserIdPatchResponses, PatchUserV1UserIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/v1/user/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
