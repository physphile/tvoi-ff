// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
	CreateUserV1UserPostData,
	CreateUserV1UserPostResponse,
	PatchUserV1UserIdPatchData,
	PatchUserV1UserIdPatchError,
	PatchUserV1UserIdPatchResponse,
	WriteActionV1ActionPostData,
	WriteActionV1ActionPostError,
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Write Action
 * Создать действие
 */
export const writeActionV1ActionPost = <ThrowOnError extends boolean = false>(
	options: Options<WriteActionV1ActionPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		unknown,
		WriteActionV1ActionPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/v1/action',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Create User
 * Создать уникальный идентификатор установки
 */
export const createUserV1UserPost = <ThrowOnError extends boolean = false>(
	options?: Options<CreateUserV1UserPostData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<
		CreateUserV1UserPostResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/v1/user',
		...options,
	});
};

/**
 * Patch User
 * Изменить пользователя в маркетинге
 *
 * Необходимые scopes: `marketing.user.patch`
 */
export const patchUserV1UserIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<PatchUserV1UserIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		PatchUserV1UserIdPatchResponse,
		PatchUserV1UserIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/v1/user/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};
