// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { createAchievementAchievementPost, createRecieverAchievementAchievementIdRecieverUserIdPost, deleteAchievementAchievementIdDelete, editAchievementAchievementIdPatch, getAchievementAchievementIdGet, getAllAchievementsAchievementGet, getAllAchievementsUserUserIdGet, getAllRecieversAchievementAchievementIdRecieverGet, type Options, revokeRecieverAchievementAchievementIdRecieverUserIdDelete, uploadPictureAchievementIdPicturePatch } from '../sdk.gen';
import type { CreateAchievementAchievementPostData, CreateAchievementAchievementPostError, CreateAchievementAchievementPostResponse, CreateRecieverAchievementAchievementIdRecieverUserIdPostData, CreateRecieverAchievementAchievementIdRecieverUserIdPostError, CreateRecieverAchievementAchievementIdRecieverUserIdPostResponse, DeleteAchievementAchievementIdDeleteData, DeleteAchievementAchievementIdDeleteError, DeleteAchievementAchievementIdDeleteResponse, EditAchievementAchievementIdPatchData, EditAchievementAchievementIdPatchError, EditAchievementAchievementIdPatchResponse, GetAchievementAchievementIdGetData, GetAllAchievementsAchievementGetData, GetAllAchievementsUserUserIdGetData, GetAllRecieversAchievementAchievementIdRecieverGetData, RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData, RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteError, RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteResponse, UploadPictureAchievementIdPicturePatchData, UploadPictureAchievementIdPicturePatchError, UploadPictureAchievementIdPicturePatchResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getAllAchievementsAchievementGetQueryKey = (options?: Options<GetAllAchievementsAchievementGetData>) => createQueryKey('getAllAchievementsAchievementGet', options);

/**
 * Get All Achievements
 */
export const getAllAchievementsAchievementGetOptions = (options?: Options<GetAllAchievementsAchievementGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllAchievementsAchievementGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllAchievementsAchievementGetQueryKey(options)
    });
};

/**
 * Create Achievement
 *
 * Нужны права на: `achievements.achievement.create`
 */
export const createAchievementAchievementPostMutation = (options?: Partial<Options<CreateAchievementAchievementPostData>>): UseMutationOptions<CreateAchievementAchievementPostResponse, CreateAchievementAchievementPostError, Options<CreateAchievementAchievementPostData>> => {
    const mutationOptions: UseMutationOptions<CreateAchievementAchievementPostResponse, CreateAchievementAchievementPostError, Options<CreateAchievementAchievementPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createAchievementAchievementPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Achievement
 *
 * Нужны права на: `achievements.achievement.delete`
 */
export const deleteAchievementAchievementIdDeleteMutation = (options?: Partial<Options<DeleteAchievementAchievementIdDeleteData>>): UseMutationOptions<DeleteAchievementAchievementIdDeleteResponse, DeleteAchievementAchievementIdDeleteError, Options<DeleteAchievementAchievementIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteAchievementAchievementIdDeleteResponse, DeleteAchievementAchievementIdDeleteError, Options<DeleteAchievementAchievementIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAchievementAchievementIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAchievementAchievementIdGetQueryKey = (options: Options<GetAchievementAchievementIdGetData>) => createQueryKey('getAchievementAchievementIdGet', options);

/**
 * Get Achievement
 */
export const getAchievementAchievementIdGetOptions = (options: Options<GetAchievementAchievementIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAchievementAchievementIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAchievementAchievementIdGetQueryKey(options)
    });
};

/**
 * Edit Achievement
 *
 * Нужны права на: `achievements.achievement.edit`
 */
export const editAchievementAchievementIdPatchMutation = (options?: Partial<Options<EditAchievementAchievementIdPatchData>>): UseMutationOptions<EditAchievementAchievementIdPatchResponse, EditAchievementAchievementIdPatchError, Options<EditAchievementAchievementIdPatchData>> => {
    const mutationOptions: UseMutationOptions<EditAchievementAchievementIdPatchResponse, EditAchievementAchievementIdPatchError, Options<EditAchievementAchievementIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await editAchievementAchievementIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Upload Picture
 */
export const uploadPictureAchievementIdPicturePatchMutation = (options?: Partial<Options<UploadPictureAchievementIdPicturePatchData>>): UseMutationOptions<UploadPictureAchievementIdPicturePatchResponse, UploadPictureAchievementIdPicturePatchError, Options<UploadPictureAchievementIdPicturePatchData>> => {
    const mutationOptions: UseMutationOptions<UploadPictureAchievementIdPicturePatchResponse, UploadPictureAchievementIdPicturePatchError, Options<UploadPictureAchievementIdPicturePatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await uploadPictureAchievementIdPicturePatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllRecieversAchievementAchievementIdRecieverGetQueryKey = (options: Options<GetAllRecieversAchievementAchievementIdRecieverGetData>) => createQueryKey('getAllRecieversAchievementAchievementIdRecieverGet', options);

/**
 * Get All Recievers
 */
export const getAllRecieversAchievementAchievementIdRecieverGetOptions = (options: Options<GetAllRecieversAchievementAchievementIdRecieverGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllRecieversAchievementAchievementIdRecieverGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllRecieversAchievementAchievementIdRecieverGetQueryKey(options)
    });
};

/**
 * Revoke Reciever
 *
 * Нужны права на: `achievements.achievement.revoke`
 */
export const revokeRecieverAchievementAchievementIdRecieverUserIdDeleteMutation = (options?: Partial<Options<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData>>): UseMutationOptions<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteResponse, RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteError, Options<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteResponse, RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteError, Options<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await revokeRecieverAchievementAchievementIdRecieverUserIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create Reciever
 *
 * Нужны права на: `achievements.achievement.give`
 */
export const createRecieverAchievementAchievementIdRecieverUserIdPostMutation = (options?: Partial<Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData>>): UseMutationOptions<CreateRecieverAchievementAchievementIdRecieverUserIdPostResponse, CreateRecieverAchievementAchievementIdRecieverUserIdPostError, Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData>> => {
    const mutationOptions: UseMutationOptions<CreateRecieverAchievementAchievementIdRecieverUserIdPostResponse, CreateRecieverAchievementAchievementIdRecieverUserIdPostError, Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createRecieverAchievementAchievementIdRecieverUserIdPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllAchievementsUserUserIdGetQueryKey = (options: Options<GetAllAchievementsUserUserIdGetData>) => createQueryKey('getAllAchievementsUserUserIdGet', options);

/**
 * Get All Achievements
 */
export const getAllAchievementsUserUserIdGetOptions = (options: Options<GetAllAchievementsUserUserIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllAchievementsUserUserIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllAchievementsUserUserIdGetQueryKey(options)
    });
};
