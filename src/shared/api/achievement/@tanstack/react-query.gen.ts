// This file is auto-generated by @hey-api/openapi-ts

import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
	type Options,
	createAchievementAchievementPost,
	createRecieverAchievementAchievementIdRecieverUserIdPost,
	deleteAchievementAchievementIdDelete,
	editAchievementAchievementIdPatch,
	getAchievementAchievementIdGet,
	getAllAchievementsAchievementGet,
	getAllAchievementsUserUserIdGet,
	getAllRecieversAchievementAchievementIdRecieverGet,
	revokeRecieverAchievementAchievementIdRecieverUserIdDelete,
	uploadPictureAchievementIdPicturePatch,
} from '../sdk.gen';
import type {
	CreateAchievementAchievementPostData,
	CreateAchievementAchievementPostError,
	CreateAchievementAchievementPostResponse,
	CreateRecieverAchievementAchievementIdRecieverUserIdPostData,
	CreateRecieverAchievementAchievementIdRecieverUserIdPostError,
	CreateRecieverAchievementAchievementIdRecieverUserIdPostResponse,
	DeleteAchievementAchievementIdDeleteData,
	DeleteAchievementAchievementIdDeleteError,
	DeleteAchievementAchievementIdDeleteResponse,
	EditAchievementAchievementIdPatchData,
	EditAchievementAchievementIdPatchError,
	EditAchievementAchievementIdPatchResponse,
	GetAchievementAchievementIdGetData,
	GetAllAchievementsAchievementGetData,
	GetAllAchievementsUserUserIdGetData,
	GetAllRecieversAchievementAchievementIdRecieverGetData,
	RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData,
	RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteError,
	RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteResponse,
	UploadPictureAchievementIdPicturePatchData,
	UploadPictureAchievementIdPicturePatchError,
	UploadPictureAchievementIdPicturePatchResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string;
		_infinite?: boolean;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const getAllAchievementsAchievementGetQueryKey = (
	options?: Options<GetAllAchievementsAchievementGetData>
) => createQueryKey('getAllAchievementsAchievementGet', options);

export const getAllAchievementsAchievementGetOptions = (
	options?: Options<GetAllAchievementsAchievementGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAllAchievementsAchievementGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getAllAchievementsAchievementGetQueryKey(options),
	});
};

export const createAchievementAchievementPostQueryKey = (
	options: Options<CreateAchievementAchievementPostData>
) => createQueryKey('createAchievementAchievementPost', options);

export const createAchievementAchievementPostOptions = (
	options: Options<CreateAchievementAchievementPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createAchievementAchievementPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createAchievementAchievementPostQueryKey(options),
	});
};

export const createAchievementAchievementPostMutation = (
	options?: Partial<Options<CreateAchievementAchievementPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateAchievementAchievementPostResponse,
		CreateAchievementAchievementPostError,
		Options<CreateAchievementAchievementPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createAchievementAchievementPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const deleteAchievementAchievementIdDeleteMutation = (
	options?: Partial<Options<DeleteAchievementAchievementIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		DeleteAchievementAchievementIdDeleteResponse,
		DeleteAchievementAchievementIdDeleteError,
		Options<DeleteAchievementAchievementIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await deleteAchievementAchievementIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getAchievementAchievementIdGetQueryKey = (
	options: Options<GetAchievementAchievementIdGetData>
) => createQueryKey('getAchievementAchievementIdGet', options);

export const getAchievementAchievementIdGetOptions = (
	options: Options<GetAchievementAchievementIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAchievementAchievementIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getAchievementAchievementIdGetQueryKey(options),
	});
};

export const editAchievementAchievementIdPatchMutation = (
	options?: Partial<Options<EditAchievementAchievementIdPatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		EditAchievementAchievementIdPatchResponse,
		EditAchievementAchievementIdPatchError,
		Options<EditAchievementAchievementIdPatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await editAchievementAchievementIdPatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const uploadPictureAchievementIdPicturePatchMutation = (
	options?: Partial<Options<UploadPictureAchievementIdPicturePatchData>>
) => {
	const mutationOptions: UseMutationOptions<
		UploadPictureAchievementIdPicturePatchResponse,
		UploadPictureAchievementIdPicturePatchError,
		Options<UploadPictureAchievementIdPicturePatchData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await uploadPictureAchievementIdPicturePatch({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getAllRecieversAchievementAchievementIdRecieverGetQueryKey = (
	options: Options<GetAllRecieversAchievementAchievementIdRecieverGetData>
) => createQueryKey('getAllRecieversAchievementAchievementIdRecieverGet', options);

export const getAllRecieversAchievementAchievementIdRecieverGetOptions = (
	options: Options<GetAllRecieversAchievementAchievementIdRecieverGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAllRecieversAchievementAchievementIdRecieverGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getAllRecieversAchievementAchievementIdRecieverGetQueryKey(options),
	});
};

export const revokeRecieverAchievementAchievementIdRecieverUserIdDeleteMutation = (
	options?: Partial<Options<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData>>
) => {
	const mutationOptions: UseMutationOptions<
		RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteResponse,
		RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteError,
		Options<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await revokeRecieverAchievementAchievementIdRecieverUserIdDelete({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const createRecieverAchievementAchievementIdRecieverUserIdPostQueryKey = (
	options: Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData>
) => createQueryKey('createRecieverAchievementAchievementIdRecieverUserIdPost', options);

export const createRecieverAchievementAchievementIdRecieverUserIdPostOptions = (
	options: Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await createRecieverAchievementAchievementIdRecieverUserIdPost({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: createRecieverAchievementAchievementIdRecieverUserIdPostQueryKey(options),
	});
};

export const createRecieverAchievementAchievementIdRecieverUserIdPostMutation = (
	options?: Partial<Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData>>
) => {
	const mutationOptions: UseMutationOptions<
		CreateRecieverAchievementAchievementIdRecieverUserIdPostResponse,
		CreateRecieverAchievementAchievementIdRecieverUserIdPostError,
		Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData>
	> = {
		mutationFn: async localOptions => {
			const { data } = await createRecieverAchievementAchievementIdRecieverUserIdPost({
				...options,
				...localOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

export const getAllAchievementsUserUserIdGetQueryKey = (
	options: Options<GetAllAchievementsUserUserIdGetData>
) => createQueryKey('getAllAchievementsUserUserIdGet', options);

export const getAllAchievementsUserUserIdGetOptions = (
	options: Options<GetAllAchievementsUserUserIdGetData>
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAllAchievementsUserUserIdGet({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getAllAchievementsUserUserIdGetQueryKey(options),
	});
};
