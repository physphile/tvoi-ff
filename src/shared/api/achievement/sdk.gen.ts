// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	type Options as ClientOptions,
	type TDataShape,
	formDataBodySerializer,
} from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
	CreateAchievementAchievementPostData,
	CreateAchievementAchievementPostError,
	CreateAchievementAchievementPostResponse,
	CreateRecieverAchievementAchievementIdRecieverUserIdPostData,
	CreateRecieverAchievementAchievementIdRecieverUserIdPostError,
	CreateRecieverAchievementAchievementIdRecieverUserIdPostResponse,
	DeleteAchievementAchievementIdDeleteData,
	DeleteAchievementAchievementIdDeleteError,
	DeleteAchievementAchievementIdDeleteResponse,
	EditAchievementAchievementIdPatchData,
	EditAchievementAchievementIdPatchError,
	EditAchievementAchievementIdPatchResponse,
	GetAchievementAchievementIdGetData,
	GetAchievementAchievementIdGetError,
	GetAchievementAchievementIdGetResponse,
	GetAllAchievementsAchievementGetData,
	GetAllAchievementsAchievementGetResponse,
	GetAllAchievementsUserUserIdGetData,
	GetAllAchievementsUserUserIdGetError,
	GetAllAchievementsUserUserIdGetResponse,
	GetAllRecieversAchievementAchievementIdRecieverGetData,
	GetAllRecieversAchievementAchievementIdRecieverGetError,
	GetAllRecieversAchievementAchievementIdRecieverGetResponse,
	RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData,
	RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteError,
	RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteResponse,
	UploadPictureAchievementIdPicturePatchData,
	UploadPictureAchievementIdPicturePatchError,
	UploadPictureAchievementIdPicturePatchResponse,
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Get All Achievements
 */
export const getAllAchievementsAchievementGet = <ThrowOnError extends boolean = false>(
	options?: Options<GetAllAchievementsAchievementGetData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		GetAllAchievementsAchievementGetResponse,
		unknown,
		ThrowOnError
	>({
		url: '/achievement',
		...options,
	});
};

/**
 * Create Achievement
 * Нужны права на: `achievements.achievement.create`
 */
export const createAchievementAchievementPost = <ThrowOnError extends boolean = false>(
	options: Options<CreateAchievementAchievementPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateAchievementAchievementPostResponse,
		CreateAchievementAchievementPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/achievement',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Delete Achievement
 * Нужны права на: `achievements.achievement.delete`
 */
export const deleteAchievementAchievementIdDelete = <ThrowOnError extends boolean = false>(
	options: Options<DeleteAchievementAchievementIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		DeleteAchievementAchievementIdDeleteResponse,
		DeleteAchievementAchievementIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/achievement/{id}',
		...options,
	});
};

/**
 * Get Achievement
 */
export const getAchievementAchievementIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetAchievementAchievementIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetAchievementAchievementIdGetResponse,
		GetAchievementAchievementIdGetError,
		ThrowOnError
	>({
		url: '/achievement/{id}',
		...options,
	});
};

/**
 * Edit Achievement
 * Нужны права на: `achievements.achievement.edit`
 */
export const editAchievementAchievementIdPatch = <ThrowOnError extends boolean = false>(
	options: Options<EditAchievementAchievementIdPatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		EditAchievementAchievementIdPatchResponse,
		EditAchievementAchievementIdPatchError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/achievement/{id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers,
		},
	});
};

/**
 * Upload Picture
 */
export const uploadPictureAchievementIdPicturePatch = <ThrowOnError extends boolean = false>(
	options: Options<UploadPictureAchievementIdPicturePatchData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		UploadPictureAchievementIdPicturePatchResponse,
		UploadPictureAchievementIdPicturePatchError,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/achievement/{id}/picture',
		...options,
		headers: {
			'Content-Type': null,
			...options?.headers,
		},
	});
};

/**
 * Get All Recievers
 */
export const getAllRecieversAchievementAchievementIdRecieverGet = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetAllRecieversAchievementAchievementIdRecieverGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetAllRecieversAchievementAchievementIdRecieverGetResponse,
		GetAllRecieversAchievementAchievementIdRecieverGetError,
		ThrowOnError
	>({
		url: '/achievement/{achievement_id}/reciever',
		...options,
	});
};

/**
 * Revoke Reciever
 * Нужны права на: `achievements.achievement.revoke`
 */
export const revokeRecieverAchievementAchievementIdRecieverUserIdDelete = <
	ThrowOnError extends boolean = false,
>(
	options: Options<RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteResponse,
		RevokeRecieverAchievementAchievementIdRecieverUserIdDeleteError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/achievement/{achievement_id}/reciever/{user_id}',
		...options,
	});
};

/**
 * Create Reciever
 * Нужны права на: `achievements.achievement.give`
 */
export const createRecieverAchievementAchievementIdRecieverUserIdPost = <
	ThrowOnError extends boolean = false,
>(
	options: Options<CreateRecieverAchievementAchievementIdRecieverUserIdPostData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateRecieverAchievementAchievementIdRecieverUserIdPostResponse,
		CreateRecieverAchievementAchievementIdRecieverUserIdPostError,
		ThrowOnError
	>({
		security: [
			{
				name: 'Authorization',
				type: 'apiKey',
			},
		],
		url: '/achievement/{achievement_id}/reciever/{user_id}',
		...options,
	});
};

/**
 * Get All Achievements
 */
export const getAllAchievementsUserUserIdGet = <ThrowOnError extends boolean = false>(
	options: Options<GetAllAchievementsUserUserIdGetData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetAllAchievementsUserUserIdGetResponse,
		GetAllAchievementsUserUserIdGetError,
		ThrowOnError
	>({
		url: '/user/{user_id}',
		...options,
	});
};
