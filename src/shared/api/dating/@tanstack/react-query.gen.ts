// This file is auto-generated by @hey-api/openapi-ts

import { type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { createCommentForProfileCommentsProfilesProfileIdCommentsPost, createProfileProfilesPost, deleteCommentCommentsCommentsCommentIdDelete, deleteProfileProfilesProfileIdDelete, getCommentsForProfileCommentsProfilesProfileIdCommentsGet, getProfileProfilesProfileIdGet, getProfilesProfilesGet, type Options, updateProfileProfilesProfileIdPut } from '../sdk.gen';
import type { CreateCommentForProfileCommentsProfilesProfileIdCommentsPostData, CreateCommentForProfileCommentsProfilesProfileIdCommentsPostError, CreateCommentForProfileCommentsProfilesProfileIdCommentsPostResponse, CreateProfileProfilesPostData, CreateProfileProfilesPostError, CreateProfileProfilesPostResponse, DeleteCommentCommentsCommentsCommentIdDeleteData, DeleteCommentCommentsCommentsCommentIdDeleteError, DeleteCommentCommentsCommentsCommentIdDeleteResponse, DeleteProfileProfilesProfileIdDeleteData, DeleteProfileProfilesProfileIdDeleteError, DeleteProfileProfilesProfileIdDeleteResponse, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetError, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetResponse, GetProfileProfilesProfileIdGetData, GetProfilesProfilesGetData, GetProfilesProfilesGetError, GetProfilesProfilesGetResponse, UpdateProfileProfilesProfileIdPutData, UpdateProfileProfilesProfileIdPutError, UpdateProfileProfilesProfileIdPutResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getProfilesProfilesGetQueryKey = (options?: Options<GetProfilesProfilesGetData>) => createQueryKey('getProfilesProfilesGet', options);

/**
 * Get Profiles
 *
 * Получить список всех анкет с пагинацией и фильтрацией.
 */
export const getProfilesProfilesGetOptions = (options?: Options<GetProfilesProfilesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProfilesProfilesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProfilesProfilesGetQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getProfilesProfilesGetInfiniteQueryKey = (options?: Options<GetProfilesProfilesGetData>): QueryKey<Options<GetProfilesProfilesGetData>> => createQueryKey('getProfilesProfilesGet', options, true);

/**
 * Get Profiles
 *
 * Получить список всех анкет с пагинацией и фильтрацией.
 */
export const getProfilesProfilesGetInfiniteOptions = (options?: Options<GetProfilesProfilesGetData>) => {
    return infiniteQueryOptions<GetProfilesProfilesGetResponse, GetProfilesProfilesGetError, InfiniteData<GetProfilesProfilesGetResponse>, QueryKey<Options<GetProfilesProfilesGetData>>, number | Pick<QueryKey<Options<GetProfilesProfilesGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetProfilesProfilesGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getProfilesProfilesGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProfilesProfilesGetInfiniteQueryKey(options)
    });
};

/**
 * Create Profile
 *
 * Создать новую анкету.
 */
export const createProfileProfilesPostMutation = (options?: Partial<Options<CreateProfileProfilesPostData>>): UseMutationOptions<CreateProfileProfilesPostResponse, CreateProfileProfilesPostError, Options<CreateProfileProfilesPostData>> => {
    const mutationOptions: UseMutationOptions<CreateProfileProfilesPostResponse, CreateProfileProfilesPostError, Options<CreateProfileProfilesPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createProfileProfilesPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Profile
 *
 * Удалить анкету.
 */
export const deleteProfileProfilesProfileIdDeleteMutation = (options?: Partial<Options<DeleteProfileProfilesProfileIdDeleteData>>): UseMutationOptions<DeleteProfileProfilesProfileIdDeleteResponse, DeleteProfileProfilesProfileIdDeleteError, Options<DeleteProfileProfilesProfileIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteProfileProfilesProfileIdDeleteResponse, DeleteProfileProfilesProfileIdDeleteError, Options<DeleteProfileProfilesProfileIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteProfileProfilesProfileIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProfileProfilesProfileIdGetQueryKey = (options: Options<GetProfileProfilesProfileIdGetData>) => createQueryKey('getProfileProfilesProfileIdGet', options);

/**
 * Get Profile
 *
 * Получить анкету по ID вместе с комментариями.
 */
export const getProfileProfilesProfileIdGetOptions = (options: Options<GetProfileProfilesProfileIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProfileProfilesProfileIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProfileProfilesProfileIdGetQueryKey(options)
    });
};

/**
 * Update Profile
 *
 * Обновить существующую анкету.
 */
export const updateProfileProfilesProfileIdPutMutation = (options?: Partial<Options<UpdateProfileProfilesProfileIdPutData>>): UseMutationOptions<UpdateProfileProfilesProfileIdPutResponse, UpdateProfileProfilesProfileIdPutError, Options<UpdateProfileProfilesProfileIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateProfileProfilesProfileIdPutResponse, UpdateProfileProfilesProfileIdPutError, Options<UpdateProfileProfilesProfileIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateProfileProfilesProfileIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCommentsForProfileCommentsProfilesProfileIdCommentsGetQueryKey = (options: Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>) => createQueryKey('getCommentsForProfileCommentsProfilesProfileIdCommentsGet', options);

/**
 * Get Comments For Profile
 *
 * Получить все комментарии к анкете с пагинацией.
 */
export const getCommentsForProfileCommentsProfilesProfileIdCommentsGetOptions = (options: Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommentsForProfileCommentsProfilesProfileIdCommentsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommentsForProfileCommentsProfilesProfileIdCommentsGetQueryKey(options)
    });
};

export const getCommentsForProfileCommentsProfilesProfileIdCommentsGetInfiniteQueryKey = (options: Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>): QueryKey<Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>> => createQueryKey('getCommentsForProfileCommentsProfilesProfileIdCommentsGet', options, true);

/**
 * Get Comments For Profile
 *
 * Получить все комментарии к анкете с пагинацией.
 */
export const getCommentsForProfileCommentsProfilesProfileIdCommentsGetInfiniteOptions = (options: Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>) => {
    return infiniteQueryOptions<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetResponse, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetError, InfiniteData<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetResponse>, QueryKey<Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>>, number | Pick<QueryKey<Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getCommentsForProfileCommentsProfilesProfileIdCommentsGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommentsForProfileCommentsProfilesProfileIdCommentsGetInfiniteQueryKey(options)
    });
};

/**
 * Create Comment For Profile
 *
 * Создать новый комментарий к анкете.
 */
export const createCommentForProfileCommentsProfilesProfileIdCommentsPostMutation = (options?: Partial<Options<CreateCommentForProfileCommentsProfilesProfileIdCommentsPostData>>): UseMutationOptions<CreateCommentForProfileCommentsProfilesProfileIdCommentsPostResponse, CreateCommentForProfileCommentsProfilesProfileIdCommentsPostError, Options<CreateCommentForProfileCommentsProfilesProfileIdCommentsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateCommentForProfileCommentsProfilesProfileIdCommentsPostResponse, CreateCommentForProfileCommentsProfilesProfileIdCommentsPostError, Options<CreateCommentForProfileCommentsProfilesProfileIdCommentsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createCommentForProfileCommentsProfilesProfileIdCommentsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Comment
 *
 * Удалить комментарий.
 */
export const deleteCommentCommentsCommentsCommentIdDeleteMutation = (options?: Partial<Options<DeleteCommentCommentsCommentsCommentIdDeleteData>>): UseMutationOptions<DeleteCommentCommentsCommentsCommentIdDeleteResponse, DeleteCommentCommentsCommentsCommentIdDeleteError, Options<DeleteCommentCommentsCommentsCommentIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteCommentCommentsCommentsCommentIdDeleteResponse, DeleteCommentCommentsCommentsCommentIdDeleteError, Options<DeleteCommentCommentsCommentsCommentIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteCommentCommentsCommentsCommentIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
