// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateCommentForProfileCommentsProfilesProfileIdCommentsPostData, CreateCommentForProfileCommentsProfilesProfileIdCommentsPostErrors, CreateCommentForProfileCommentsProfilesProfileIdCommentsPostResponses, CreateProfileProfilesPostData, CreateProfileProfilesPostErrors, CreateProfileProfilesPostResponses, DeleteCommentCommentsCommentsCommentIdDeleteData, DeleteCommentCommentsCommentsCommentIdDeleteErrors, DeleteCommentCommentsCommentsCommentIdDeleteResponses, DeleteProfileProfilesProfileIdDeleteData, DeleteProfileProfilesProfileIdDeleteErrors, DeleteProfileProfilesProfileIdDeleteResponses, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetErrors, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetResponses, GetProfileProfilesProfileIdGetData, GetProfileProfilesProfileIdGetErrors, GetProfileProfilesProfileIdGetResponses, GetProfilesProfilesGetData, GetProfilesProfilesGetErrors, GetProfilesProfilesGetResponses, UpdateProfileProfilesProfileIdPutData, UpdateProfileProfilesProfileIdPutErrors, UpdateProfileProfilesProfileIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Profiles
 *
 * Получить список всех анкет с пагинацией и фильтрацией.
 */
export const getProfilesProfilesGet = <ThrowOnError extends boolean = false>(options?: Options<GetProfilesProfilesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProfilesProfilesGetResponses, GetProfilesProfilesGetErrors, ThrowOnError>({
        url: '/profiles/',
        ...options
    });
};

/**
 * Create Profile
 *
 * Создать новую анкету.
 */
export const createProfileProfilesPost = <ThrowOnError extends boolean = false>(options: Options<CreateProfileProfilesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateProfileProfilesPostResponses, CreateProfileProfilesPostErrors, ThrowOnError>({
        url: '/profiles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Profile
 *
 * Удалить анкету.
 */
export const deleteProfileProfilesProfileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProfileProfilesProfileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProfileProfilesProfileIdDeleteResponses, DeleteProfileProfilesProfileIdDeleteErrors, ThrowOnError>({
        url: '/profiles/{profile_id}',
        ...options
    });
};

/**
 * Get Profile
 *
 * Получить анкету по ID вместе с комментариями.
 */
export const getProfileProfilesProfileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProfileProfilesProfileIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProfileProfilesProfileIdGetResponses, GetProfileProfilesProfileIdGetErrors, ThrowOnError>({
        url: '/profiles/{profile_id}',
        ...options
    });
};

/**
 * Update Profile
 *
 * Обновить существующую анкету.
 */
export const updateProfileProfilesProfileIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileProfilesProfileIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateProfileProfilesProfileIdPutResponses, UpdateProfileProfilesProfileIdPutErrors, ThrowOnError>({
        url: '/profiles/{profile_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Comments For Profile
 *
 * Получить все комментарии к анкете с пагинацией.
 */
export const getCommentsForProfileCommentsProfilesProfileIdCommentsGet = <ThrowOnError extends boolean = false>(options: Options<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCommentsForProfileCommentsProfilesProfileIdCommentsGetResponses, GetCommentsForProfileCommentsProfilesProfileIdCommentsGetErrors, ThrowOnError>({
        url: '/comments/profiles/{profile_id}/comments',
        ...options
    });
};

/**
 * Create Comment For Profile
 *
 * Создать новый комментарий к анкете.
 */
export const createCommentForProfileCommentsProfilesProfileIdCommentsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCommentForProfileCommentsProfilesProfileIdCommentsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCommentForProfileCommentsProfilesProfileIdCommentsPostResponses, CreateCommentForProfileCommentsProfilesProfileIdCommentsPostErrors, ThrowOnError>({
        url: '/comments/profiles/{profile_id}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Comment
 *
 * Удалить комментарий.
 */
export const deleteCommentCommentsCommentsCommentIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentCommentsCommentsCommentIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCommentCommentsCommentsCommentIdDeleteResponses, DeleteCommentCommentsCommentsCommentIdDeleteErrors, ThrowOnError>({
        url: '/comments/comments/{comment_id}',
        ...options
    });
};
